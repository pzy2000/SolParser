{
    "/root/openzeppelin-contracts/lib/halmos-cheatcodes/src/SVM.sol": [],
    "/root/openzeppelin-contracts/lib/halmos-cheatcodes/src/SymTest.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/erc4626-tests/ERC4626.test.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "setUpVault",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function setUpVault(Init memory init) public virtual {\n        // setup initial shares and assets for individual users\n        for (uint i = 0; i < N; i++) {\n            address user = init.user[i];\n            vm.assume(_isEOA(user));\n            // shares\n            uint shares = init.share[i];\n            try IMockERC20(_underlying_).mint(user, shares) {} catch { vm.assume(false); }\n            _approve(_underlying_, user, _vault_, shares);\n            vm.prank(user); try IERC4626(_vault_).deposit(shares, user) {} catch { vm.assume(false); }\n            // assets\n            uint assets = init.asset[i];\n            try IMockERC20(_underlying_).mint(user, assets) {} catch { vm.assume(false); }\n        }\n\n        // setup initial yield for vault\n        setUpYield(init);\n    }",
                    "start": "30",
                    "end": "47",
                    "class": "ERC4626Test",
                    "signature": " setUpVaultInit memory init",
                    "full_signature": "function setUpVault(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.setUpVaultInit memory init",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// setup initial vault state as follows:\n//\n// totalAssets == sum(init.share) + init.yield\n// totalShares == sum(init.share)\n//\n// init.user[i]'s assets == init.asset[i]\n// init.user[i]'s shares == init.share[i]\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setUpYield",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function setUpYield(Init memory init) public virtual {\n        if (init.yield >= 0) { // gain\n            uint gain = uint(init.yield);\n            try IMockERC20(_underlying_).mint(_vault_, gain) {} catch { vm.assume(false); } // this can be replaced by calling yield generating functions if provided by the vault\n        } else { // loss\n            vm.assume(init.yield > type(int).min); // avoid overflow in conversion\n            uint loss = uint(-1 * init.yield);\n            try IMockERC20(_underlying_).burn(_vault_, loss) {} catch { vm.assume(false); } // this can be replaced by calling yield generating functions if provided by the vault\n        }\n    }",
                    "start": "50",
                    "end": "59",
                    "class": "ERC4626Test",
                    "signature": " setUpYieldInit memory init",
                    "full_signature": "function setUpYield(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.setUpYieldInit memory init",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// setup initial yield\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_asset",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_asset(Init memory init) public virtual {\n        setUpVault(init);\n        address caller = init.user[0];\n        prop_asset(caller);\n    }",
                    "start": "65",
                    "end": "69",
                    "class": "ERC4626Test",
                    "signature": " test_assetInit memory init",
                    "full_signature": "function test_asset(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_assetInit memory init",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// asset\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_convertToShares",
                    "parameters": "Init memory init, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_convertToShares(Init memory init, uint assets) public virtual {\n        setUpVault(init);\n        address caller1 = init.user[0];\n        address caller2 = init.user[1];\n        prop_convertToShares(caller1, caller2, assets);\n    }",
                    "start": "81",
                    "end": "86",
                    "class": "ERC4626Test",
                    "signature": " test_convertToSharesInit memory init, uint assets",
                    "full_signature": "function test_convertToShares(Init memory init, uint assets) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_convertToSharesInit memory init, uint assets",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// convert\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_maxDeposit",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_maxDeposit(Init memory init) public virtual {\n        setUpVault(init);\n        address caller   = init.user[0];\n        address receiver = init.user[1];\n        prop_maxDeposit(caller, receiver);\n    }",
                    "start": "99",
                    "end": "104",
                    "class": "ERC4626Test",
                    "signature": " test_maxDepositInit memory init",
                    "full_signature": "function test_maxDeposit(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_maxDepositInit memory init",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// deposit\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_maxMint",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_maxMint(Init memory init) public virtual {\n        setUpVault(init);\n        address caller   = init.user[0];\n        address receiver = init.user[1];\n        prop_maxMint(caller, receiver);\n    }",
                    "start": "129",
                    "end": "134",
                    "class": "ERC4626Test",
                    "signature": " test_maxMintInit memory init",
                    "full_signature": "function test_maxMint(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_maxMintInit memory init",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// mint\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_maxWithdraw",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_maxWithdraw(Init memory init) public virtual {\n        setUpVault(init);\n        address caller = init.user[0];\n        address owner  = init.user[1];\n        prop_maxWithdraw(caller, owner);\n    }",
                    "start": "159",
                    "end": "164",
                    "class": "ERC4626Test",
                    "signature": " test_maxWithdrawInit memory init",
                    "full_signature": "function test_maxWithdraw(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_maxWithdrawInit memory init",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// withdraw\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_maxRedeem",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_maxRedeem(Init memory init) public virtual {\n        setUpVault(init);\n        address caller = init.user[0];\n        address owner  = init.user[1];\n        prop_maxRedeem(caller, owner);\n    }",
                    "start": "204",
                    "end": "209",
                    "class": "ERC4626Test",
                    "signature": " test_maxRedeemInit memory init",
                    "full_signature": "function test_maxRedeem(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_maxRedeemInit memory init",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// redeem\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_RT_deposit_redeem",
                    "parameters": "Init memory init, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_RT_deposit_redeem(Init memory init, uint assets) public virtual {\n        setUpVault(init);\n        address caller = init.user[0];\n        assets = bound(assets, 0, _max_deposit(caller));\n        _approve(_underlying_, caller, _vault_, type(uint).max);\n        prop_RT_deposit_redeem(caller, assets);\n    }",
                    "start": "248",
                    "end": "254",
                    "class": "ERC4626Test",
                    "signature": " test_RT_deposit_redeemInit memory init, uint assets",
                    "full_signature": "function test_RT_deposit_redeem(Init memory init, uint assets) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_RT_deposit_redeemInit memory init, uint assets",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// round trip tests\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_isContract",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isContract(address account) internal view returns (bool) { return account.code.length > 0; }",
                    "start": "316",
                    "end": "316",
                    "class": "ERC4626Test",
                    "signature": "returns (bool) _isContractaddress account",
                    "full_signature": "function _isContract(address account) internal  view returns (bool)",
                    "class_method_signature": "ERC4626Test._isContractaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// utils\n//\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/erc4626-tests/ERC4626.prop.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "prop_asset",
                    "parameters": "address caller",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_asset(address caller) public {\n        vm.prank(caller); IERC4626(_vault_).asset();\n    }",
                    "start": "57",
                    "end": "59",
                    "class": "ERC4626Prop",
                    "signature": " prop_assetaddress caller",
                    "full_signature": "function prop_asset(address caller) public   ",
                    "class_method_signature": "ERC4626Prop.prop_assetaddress caller",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// asset\n//\n// asset\n// \"MUST NOT revert.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_totalAssets",
                    "parameters": "address caller",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_totalAssets(address caller) public {\n        vm.prank(caller); IERC4626(_vault_).totalAssets();\n    }",
                    "start": "63",
                    "end": "65",
                    "class": "ERC4626Prop",
                    "signature": " prop_totalAssetsaddress caller",
                    "full_signature": "function prop_totalAssets(address caller) public   ",
                    "class_method_signature": "ERC4626Prop.prop_totalAssetsaddress caller",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// totalAssets\n// \"MUST NOT revert.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_convertToShares",
                    "parameters": "address caller1, address caller2, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_convertToShares(address caller1, address caller2, uint assets) public {\n        vm.prank(caller1); uint res1 = vault_convertToShares(assets); // \"MAY revert due to integer overflow caused by an unreasonably large input.\"\n        vm.prank(caller2); uint res2 = vault_convertToShares(assets); // \"MAY revert due to integer overflow caused by an unreasonably large input.\"\n        assertEq(res1, res2);\n    }",
                    "start": "73",
                    "end": "77",
                    "class": "ERC4626Prop",
                    "signature": " prop_convertToSharesaddress caller1, address caller2, uint assets",
                    "full_signature": "function prop_convertToShares(address caller1, address caller2, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_convertToSharesaddress caller1, address caller2, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// convert\n//\n// convertToShares\n// \"MUST NOT show any variations depending on the caller.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_convertToAssets",
                    "parameters": "address caller1, address caller2, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_convertToAssets(address caller1, address caller2, uint shares) public {\n        vm.prank(caller1); uint res1 = vault_convertToAssets(shares); // \"MAY revert due to integer overflow caused by an unreasonably large input.\"\n        vm.prank(caller2); uint res2 = vault_convertToAssets(shares); // \"MAY revert due to integer overflow caused by an unreasonably large input.\"\n        assertEq(res1, res2);\n    }",
                    "start": "81",
                    "end": "85",
                    "class": "ERC4626Prop",
                    "signature": " prop_convertToAssetsaddress caller1, address caller2, uint shares",
                    "full_signature": "function prop_convertToAssets(address caller1, address caller2, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_convertToAssetsaddress caller1, address caller2, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// convertToAssets\n// \"MUST NOT show any variations depending on the caller.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_maxDeposit",
                    "parameters": "address caller, address receiver",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_maxDeposit(address caller, address receiver) public {\n        vm.prank(caller); IERC4626(_vault_).maxDeposit(receiver);\n    }",
                    "start": "93",
                    "end": "95",
                    "class": "ERC4626Prop",
                    "signature": " prop_maxDepositaddress caller, address receiver",
                    "full_signature": "function prop_maxDeposit(address caller, address receiver) public   ",
                    "class_method_signature": "ERC4626Prop.prop_maxDepositaddress caller, address receiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// deposit\n//\n// maxDeposit\n// \"MUST NOT revert.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_previewDeposit",
                    "parameters": "address caller, address receiver, address other, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_previewDeposit(address caller, address receiver, address other, uint assets) public {\n        vm.prank(other); uint sharesPreview = vault_previewDeposit(assets); // \"MAY revert due to other conditions that would also cause deposit to revert.\"\n        vm.prank(caller); uint sharesActual = vault_deposit(assets, receiver);\n        assertApproxGeAbs(sharesActual, sharesPreview, _delta_);\n    }",
                    "start": "102",
                    "end": "106",
                    "class": "ERC4626Prop",
                    "signature": " prop_previewDepositaddress caller, address receiver, address other, uint assets",
                    "full_signature": "function prop_previewDeposit(address caller, address receiver, address other, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_previewDepositaddress caller, address receiver, address other, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// previewDeposit\n// \"MUST return as close to and no more than the exact amount of Vault\n// shares that would be minted in a deposit call in the same transaction.\n// I.e. deposit should return the same or more shares as previewDeposit if\n// called in the same transaction.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_deposit",
                    "parameters": "address caller, address receiver, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_deposit(address caller, address receiver, uint assets) public {\n        uint oldCallerAsset = IERC20(_underlying_).balanceOf(caller);\n        uint oldReceiverShare = IERC20(_vault_).balanceOf(receiver);\n        uint oldAllowance = IERC20(_underlying_).allowance(caller, _vault_);\n\n        vm.prank(caller); uint shares = vault_deposit(assets, receiver);\n\n        uint newCallerAsset = IERC20(_underlying_).balanceOf(caller);\n        uint newReceiverShare = IERC20(_vault_).balanceOf(receiver);\n        uint newAllowance = IERC20(_underlying_).allowance(caller, _vault_);\n\n        assertApproxEqAbs(newCallerAsset, oldCallerAsset - assets, _delta_, \"asset\"); // NOTE: this may fail if the caller is a contract in which the asset is stored\n        assertApproxEqAbs(newReceiverShare, oldReceiverShare + shares, _delta_, \"share\");\n        if (oldAllowance != type(uint).max) assertApproxEqAbs(newAllowance, oldAllowance - assets, _delta_, \"allowance\");\n    }",
                    "start": "109",
                    "end": "123",
                    "class": "ERC4626Prop",
                    "signature": " prop_depositaddress caller, address receiver, uint assets",
                    "full_signature": "function prop_deposit(address caller, address receiver, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_depositaddress caller, address receiver, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// deposit\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_maxMint",
                    "parameters": "address caller, address receiver",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_maxMint(address caller, address receiver) public {\n        vm.prank(caller); IERC4626(_vault_).maxMint(receiver);\n    }",
                    "start": "131",
                    "end": "133",
                    "class": "ERC4626Prop",
                    "signature": " prop_maxMintaddress caller, address receiver",
                    "full_signature": "function prop_maxMint(address caller, address receiver) public   ",
                    "class_method_signature": "ERC4626Prop.prop_maxMintaddress caller, address receiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// mint\n//\n// maxMint\n// \"MUST NOT revert.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_previewMint",
                    "parameters": "address caller, address receiver, address other, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_previewMint(address caller, address receiver, address other, uint shares) public {\n        vm.prank(other); uint assetsPreview = vault_previewMint(shares);\n        vm.prank(caller); uint assetsActual = vault_mint(shares, receiver);\n        assertApproxLeAbs(assetsActual, assetsPreview, _delta_);\n    }",
                    "start": "140",
                    "end": "144",
                    "class": "ERC4626Prop",
                    "signature": " prop_previewMintaddress caller, address receiver, address other, uint shares",
                    "full_signature": "function prop_previewMint(address caller, address receiver, address other, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_previewMintaddress caller, address receiver, address other, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// previewMint\n// \"MUST return as close to and no fewer than the exact amount of assets\n// that would be deposited in a mint call in the same transaction. I.e. mint\n// should return the same or fewer assets as previewMint if called in the\n// same transaction.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_mint",
                    "parameters": "address caller, address receiver, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_mint(address caller, address receiver, uint shares) public {\n        uint oldCallerAsset = IERC20(_underlying_).balanceOf(caller);\n        uint oldReceiverShare = IERC20(_vault_).balanceOf(receiver);\n        uint oldAllowance = IERC20(_underlying_).allowance(caller, _vault_);\n\n        vm.prank(caller); uint assets = vault_mint(shares, receiver);\n\n        uint newCallerAsset = IERC20(_underlying_).balanceOf(caller);\n        uint newReceiverShare = IERC20(_vault_).balanceOf(receiver);\n        uint newAllowance = IERC20(_underlying_).allowance(caller, _vault_);\n\n        assertApproxEqAbs(newCallerAsset, oldCallerAsset - assets, _delta_, \"asset\"); // NOTE: this may fail if the caller is a contract in which the asset is stored\n        assertApproxEqAbs(newReceiverShare, oldReceiverShare + shares, _delta_, \"share\");\n        if (oldAllowance != type(uint).max) assertApproxEqAbs(newAllowance, oldAllowance - assets, _delta_, \"allowance\");\n    }",
                    "start": "147",
                    "end": "161",
                    "class": "ERC4626Prop",
                    "signature": " prop_mintaddress caller, address receiver, uint shares",
                    "full_signature": "function prop_mint(address caller, address receiver, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_mintaddress caller, address receiver, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// mint\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_maxWithdraw",
                    "parameters": "address caller, address owner",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_maxWithdraw(address caller, address owner) public {\n        vm.prank(caller); IERC4626(_vault_).maxWithdraw(owner);\n    }",
                    "start": "170",
                    "end": "172",
                    "class": "ERC4626Prop",
                    "signature": " prop_maxWithdrawaddress caller, address owner",
                    "full_signature": "function prop_maxWithdraw(address caller, address owner) public   ",
                    "class_method_signature": "ERC4626Prop.prop_maxWithdrawaddress caller, address owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// withdraw\n//\n// maxWithdraw\n// \"MUST NOT revert.\"\n// NOTE: some implementations failed due to arithmetic overflow\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_previewWithdraw",
                    "parameters": "address caller, address receiver, address owner, address other, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_previewWithdraw(address caller, address receiver, address owner, address other, uint assets) public {\n        vm.prank(other); uint preview = vault_previewWithdraw(assets);\n        vm.prank(caller); uint actual = vault_withdraw(assets, receiver, owner);\n        assertApproxLeAbs(actual, preview, _delta_);\n    }",
                    "start": "179",
                    "end": "183",
                    "class": "ERC4626Prop",
                    "signature": " prop_previewWithdrawaddress caller, address receiver, address owner, address other, uint assets",
                    "full_signature": "function prop_previewWithdraw(address caller, address receiver, address owner, address other, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_previewWithdrawaddress caller, address receiver, address owner, address other, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// previewWithdraw\n// \"MUST return as close to and no fewer than the exact amount of Vault\n// shares that would be burned in a withdraw call in the same transaction.\n// I.e. withdraw should return the same or fewer shares as previewWithdraw\n// if called in the same transaction.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_withdraw",
                    "parameters": "address caller, address receiver, address owner, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_withdraw(address caller, address receiver, address owner, uint assets) public {\n        uint oldReceiverAsset = IERC20(_underlying_).balanceOf(receiver);\n        uint oldOwnerShare = IERC20(_vault_).balanceOf(owner);\n        uint oldAllowance = IERC20(_vault_).allowance(owner, caller);\n\n        vm.prank(caller); uint shares = vault_withdraw(assets, receiver, owner);\n\n        uint newReceiverAsset = IERC20(_underlying_).balanceOf(receiver);\n        uint newOwnerShare = IERC20(_vault_).balanceOf(owner);\n        uint newAllowance = IERC20(_vault_).allowance(owner, caller);\n\n        assertApproxEqAbs(newOwnerShare, oldOwnerShare - shares, _delta_, \"share\");\n        assertApproxEqAbs(newReceiverAsset, oldReceiverAsset + assets, _delta_, \"asset\"); // NOTE: this may fail if the receiver is a contract in which the asset is stored\n        if (caller != owner && oldAllowance != type(uint).max) assertApproxEqAbs(newAllowance, oldAllowance - shares, _delta_, \"allowance\");\n\n        assertTrue(caller == owner || oldAllowance != 0 || (shares == 0 && assets == 0), \"access control\");\n    }",
                    "start": "186",
                    "end": "202",
                    "class": "ERC4626Prop",
                    "signature": " prop_withdrawaddress caller, address receiver, address owner, uint assets",
                    "full_signature": "function prop_withdraw(address caller, address receiver, address owner, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_withdrawaddress caller, address receiver, address owner, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// withdraw\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_maxRedeem",
                    "parameters": "address caller, address owner",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_maxRedeem(address caller, address owner) public {\n        vm.prank(caller); IERC4626(_vault_).maxRedeem(owner);\n    }",
                    "start": "210",
                    "end": "212",
                    "class": "ERC4626Prop",
                    "signature": " prop_maxRedeemaddress caller, address owner",
                    "full_signature": "function prop_maxRedeem(address caller, address owner) public   ",
                    "class_method_signature": "ERC4626Prop.prop_maxRedeemaddress caller, address owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// redeem\n//\n// maxRedeem\n// \"MUST NOT revert.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_previewRedeem",
                    "parameters": "address caller, address receiver, address owner, address other, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_previewRedeem(address caller, address receiver, address owner, address other, uint shares) public {\n        vm.prank(other); uint preview = vault_previewRedeem(shares);\n        vm.prank(caller); uint actual = vault_redeem(shares, receiver, owner);\n        assertApproxGeAbs(actual, preview, _delta_);\n    }",
                    "start": "219",
                    "end": "223",
                    "class": "ERC4626Prop",
                    "signature": " prop_previewRedeemaddress caller, address receiver, address owner, address other, uint shares",
                    "full_signature": "function prop_previewRedeem(address caller, address receiver, address owner, address other, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_previewRedeemaddress caller, address receiver, address owner, address other, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// previewRedeem\n// \"MUST return as close to and no more than the exact amount of assets that\n// would be withdrawn in a redeem call in the same transaction. I.e. redeem\n// should return the same or more assets as previewRedeem if called in the\n// same transaction.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_redeem",
                    "parameters": "address caller, address receiver, address owner, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_redeem(address caller, address receiver, address owner, uint shares) public {\n        uint oldReceiverAsset = IERC20(_underlying_).balanceOf(receiver);\n        uint oldOwnerShare = IERC20(_vault_).balanceOf(owner);\n        uint oldAllowance = IERC20(_vault_).allowance(owner, caller);\n\n        vm.prank(caller); uint assets = vault_redeem(shares, receiver, owner);\n\n        uint newReceiverAsset = IERC20(_underlying_).balanceOf(receiver);\n        uint newOwnerShare = IERC20(_vault_).balanceOf(owner);\n        uint newAllowance = IERC20(_vault_).allowance(owner, caller);\n\n        assertApproxEqAbs(newOwnerShare, oldOwnerShare - shares, _delta_, \"share\");\n        assertApproxEqAbs(newReceiverAsset, oldReceiverAsset + assets, _delta_, \"asset\"); // NOTE: this may fail if the receiver is a contract in which the asset is stored\n        if (caller != owner && oldAllowance != type(uint).max) assertApproxEqAbs(newAllowance, oldAllowance - shares, _delta_, \"allowance\");\n\n        assertTrue(caller == owner || oldAllowance != 0 || (shares == 0 && assets == 0), \"access control\");\n    }",
                    "start": "226",
                    "end": "242",
                    "class": "ERC4626Prop",
                    "signature": " prop_redeemaddress caller, address receiver, address owner, uint shares",
                    "full_signature": "function prop_redeem(address caller, address receiver, address owner, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_redeemaddress caller, address receiver, address owner, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// redeem\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_deposit_redeem",
                    "parameters": "address caller, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_deposit_redeem(address caller, uint assets) public {\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint shares = vault_deposit(assets, caller);\n        vm.prank(caller); uint assets2 = vault_redeem(shares, caller, caller);\n        assertApproxLeAbs(assets2, assets, _delta_);\n    }",
                    "start": "249",
                    "end": "254",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_deposit_redeemaddress caller, uint assets",
                    "full_signature": "function prop_RT_deposit_redeem(address caller, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_deposit_redeemaddress caller, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// round trip properties\n//\n// redeem(deposit(a)) <= a\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_deposit_withdraw",
                    "parameters": "address caller, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_deposit_withdraw(address caller, uint assets) public {\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint shares1 = vault_deposit(assets, caller);\n        vm.prank(caller); uint shares2 = vault_withdraw(assets, caller, caller);\n        assertApproxGeAbs(shares2, shares1, _delta_);\n    }",
                    "start": "259",
                    "end": "264",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_deposit_withdrawaddress caller, uint assets",
                    "full_signature": "function prop_RT_deposit_withdraw(address caller, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_deposit_withdrawaddress caller, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// s = deposit(a)\n// s' = withdraw(a)\n// s' >= s\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_redeem_deposit",
                    "parameters": "address caller, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_redeem_deposit(address caller, uint shares) public {\n        vm.prank(caller); uint assets = vault_redeem(shares, caller, caller);\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint shares2 = vault_deposit(assets, caller);\n        assertApproxLeAbs(shares2, shares, _delta_);\n    }",
                    "start": "267",
                    "end": "272",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_redeem_depositaddress caller, uint shares",
                    "full_signature": "function prop_RT_redeem_deposit(address caller, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_redeem_depositaddress caller, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// deposit(redeem(s)) <= s\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_redeem_mint",
                    "parameters": "address caller, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_redeem_mint(address caller, uint shares) public {\n        vm.prank(caller); uint assets1 = vault_redeem(shares, caller, caller);\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint assets2 = vault_mint(shares, caller);\n        assertApproxGeAbs(assets2, assets1, _delta_);\n    }",
                    "start": "277",
                    "end": "282",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_redeem_mintaddress caller, uint shares",
                    "full_signature": "function prop_RT_redeem_mint(address caller, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_redeem_mintaddress caller, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// a = redeem(s)\n// a' = mint(s)\n// a' >= a\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_mint_withdraw",
                    "parameters": "address caller, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_mint_withdraw(address caller, uint shares) public {\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint assets = vault_mint(shares, caller);\n        vm.prank(caller); uint shares2 = vault_withdraw(assets, caller, caller);\n        assertApproxGeAbs(shares2, shares, _delta_);\n    }",
                    "start": "285",
                    "end": "290",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_mint_withdrawaddress caller, uint shares",
                    "full_signature": "function prop_RT_mint_withdraw(address caller, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_mint_withdrawaddress caller, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// withdraw(mint(s)) >= s\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_mint_redeem",
                    "parameters": "address caller, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_mint_redeem(address caller, uint shares) public {\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint assets1 = vault_mint(shares, caller);\n        vm.prank(caller); uint assets2 = vault_redeem(shares, caller, caller);\n        assertApproxLeAbs(assets2, assets1, _delta_);\n    }",
                    "start": "295",
                    "end": "300",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_mint_redeemaddress caller, uint shares",
                    "full_signature": "function prop_RT_mint_redeem(address caller, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_mint_redeemaddress caller, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// a = mint(s)\n// a' = redeem(s)\n// a' <= a\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_withdraw_mint",
                    "parameters": "address caller, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_withdraw_mint(address caller, uint assets) public {\n        vm.prank(caller); uint shares = vault_withdraw(assets, caller, caller);\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint assets2 = vault_mint(shares, caller);\n        assertApproxGeAbs(assets2, assets, _delta_);\n    }",
                    "start": "303",
                    "end": "308",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_withdraw_mintaddress caller, uint assets",
                    "full_signature": "function prop_RT_withdraw_mint(address caller, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_withdraw_mintaddress caller, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// mint(withdraw(a)) >= a\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_withdraw_deposit",
                    "parameters": "address caller, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_withdraw_deposit(address caller, uint assets) public {\n        vm.prank(caller); uint shares1 = vault_withdraw(assets, caller, caller);\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint shares2 = vault_deposit(assets, caller);\n        assertApproxLeAbs(shares2, shares1, _delta_);\n    }",
                    "start": "313",
                    "end": "318",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_withdraw_depositaddress caller, uint assets",
                    "full_signature": "function prop_RT_withdraw_deposit(address caller, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_withdraw_depositaddress caller, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// s = withdraw(a)\n// s' = deposit(a)\n// s' <= s\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "vault_convertToShares",
                    "parameters": "uint assets",
                    "modifiers": "",
                    "return": "returns (uint)",
                    "body": "function vault_convertToShares(uint assets) internal returns (uint) {\n        return _call_vault(abi.encodeWithSelector(IERC4626.convertToShares.selector, assets));\n    }",
                    "start": "324",
                    "end": "326",
                    "class": "ERC4626Prop",
                    "signature": "returns (uint) vault_convertToSharesuint assets",
                    "full_signature": "function vault_convertToShares(uint assets) internal   returns (uint)",
                    "class_method_signature": "ERC4626Prop.vault_convertToSharesuint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// utils\n//\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/SVM.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/SymTest.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/erc4626-tests/ERC4626.test.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "setUpVault",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function setUpVault(Init memory init) public virtual {\n        // setup initial shares and assets for individual users\n        for (uint i = 0; i < N; i++) {\n            address user = init.user[i];\n            vm.assume(_isEOA(user));\n            // shares\n            uint shares = init.share[i];\n            try IMockERC20(_underlying_).mint(user, shares) {} catch { vm.assume(false); }\n            _approve(_underlying_, user, _vault_, shares);\n            vm.prank(user); try IERC4626(_vault_).deposit(shares, user) {} catch { vm.assume(false); }\n            // assets\n            uint assets = init.asset[i];\n            try IMockERC20(_underlying_).mint(user, assets) {} catch { vm.assume(false); }\n        }\n\n        // setup initial yield for vault\n        setUpYield(init);\n    }",
                    "start": "30",
                    "end": "47",
                    "class": "ERC4626Test",
                    "signature": " setUpVaultInit memory init",
                    "full_signature": "function setUpVault(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.setUpVaultInit memory init",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// setup initial vault state as follows:\n//\n// totalAssets == sum(init.share) + init.yield\n// totalShares == sum(init.share)\n//\n// init.user[i]'s assets == init.asset[i]\n// init.user[i]'s shares == init.share[i]\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setUpYield",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function setUpYield(Init memory init) public virtual {\n        if (init.yield >= 0) { // gain\n            uint gain = uint(init.yield);\n            try IMockERC20(_underlying_).mint(_vault_, gain) {} catch { vm.assume(false); } // this can be replaced by calling yield generating functions if provided by the vault\n        } else { // loss\n            vm.assume(init.yield > type(int).min); // avoid overflow in conversion\n            uint loss = uint(-1 * init.yield);\n            try IMockERC20(_underlying_).burn(_vault_, loss) {} catch { vm.assume(false); } // this can be replaced by calling yield generating functions if provided by the vault\n        }\n    }",
                    "start": "50",
                    "end": "59",
                    "class": "ERC4626Test",
                    "signature": " setUpYieldInit memory init",
                    "full_signature": "function setUpYield(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.setUpYieldInit memory init",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// setup initial yield\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_asset",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_asset(Init memory init) public virtual {\n        setUpVault(init);\n        address caller = init.user[0];\n        prop_asset(caller);\n    }",
                    "start": "65",
                    "end": "69",
                    "class": "ERC4626Test",
                    "signature": " test_assetInit memory init",
                    "full_signature": "function test_asset(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_assetInit memory init",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// asset\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_convertToShares",
                    "parameters": "Init memory init, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_convertToShares(Init memory init, uint assets) public virtual {\n        setUpVault(init);\n        address caller1 = init.user[0];\n        address caller2 = init.user[1];\n        prop_convertToShares(caller1, caller2, assets);\n    }",
                    "start": "81",
                    "end": "86",
                    "class": "ERC4626Test",
                    "signature": " test_convertToSharesInit memory init, uint assets",
                    "full_signature": "function test_convertToShares(Init memory init, uint assets) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_convertToSharesInit memory init, uint assets",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// convert\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_maxDeposit",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_maxDeposit(Init memory init) public virtual {\n        setUpVault(init);\n        address caller   = init.user[0];\n        address receiver = init.user[1];\n        prop_maxDeposit(caller, receiver);\n    }",
                    "start": "99",
                    "end": "104",
                    "class": "ERC4626Test",
                    "signature": " test_maxDepositInit memory init",
                    "full_signature": "function test_maxDeposit(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_maxDepositInit memory init",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// deposit\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_maxMint",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_maxMint(Init memory init) public virtual {\n        setUpVault(init);\n        address caller   = init.user[0];\n        address receiver = init.user[1];\n        prop_maxMint(caller, receiver);\n    }",
                    "start": "129",
                    "end": "134",
                    "class": "ERC4626Test",
                    "signature": " test_maxMintInit memory init",
                    "full_signature": "function test_maxMint(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_maxMintInit memory init",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// mint\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_maxWithdraw",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_maxWithdraw(Init memory init) public virtual {\n        setUpVault(init);\n        address caller = init.user[0];\n        address owner  = init.user[1];\n        prop_maxWithdraw(caller, owner);\n    }",
                    "start": "159",
                    "end": "164",
                    "class": "ERC4626Test",
                    "signature": " test_maxWithdrawInit memory init",
                    "full_signature": "function test_maxWithdraw(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_maxWithdrawInit memory init",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// withdraw\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_maxRedeem",
                    "parameters": "Init memory init",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_maxRedeem(Init memory init) public virtual {\n        setUpVault(init);\n        address caller = init.user[0];\n        address owner  = init.user[1];\n        prop_maxRedeem(caller, owner);\n    }",
                    "start": "204",
                    "end": "209",
                    "class": "ERC4626Test",
                    "signature": " test_maxRedeemInit memory init",
                    "full_signature": "function test_maxRedeem(Init memory init) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_maxRedeemInit memory init",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// redeem\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_RT_deposit_redeem",
                    "parameters": "Init memory init, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_RT_deposit_redeem(Init memory init, uint assets) public virtual {\n        setUpVault(init);\n        address caller = init.user[0];\n        assets = bound(assets, 0, _max_deposit(caller));\n        _approve(_underlying_, caller, _vault_, type(uint).max);\n        prop_RT_deposit_redeem(caller, assets);\n    }",
                    "start": "248",
                    "end": "254",
                    "class": "ERC4626Test",
                    "signature": " test_RT_deposit_redeemInit memory init, uint assets",
                    "full_signature": "function test_RT_deposit_redeem(Init memory init, uint assets) public virtual  ",
                    "class_method_signature": "ERC4626Test.test_RT_deposit_redeemInit memory init, uint assets",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "//\n// round trip tests\n//\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_isContract",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isContract(address account) internal view returns (bool) { return account.code.length > 0; }",
                    "start": "316",
                    "end": "316",
                    "class": "ERC4626Test",
                    "signature": "returns (bool) _isContractaddress account",
                    "full_signature": "function _isContract(address account) internal  view returns (bool)",
                    "class_method_signature": "ERC4626Test._isContractaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// utils\n//\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/erc4626-tests/ERC4626.prop.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "prop_asset",
                    "parameters": "address caller",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_asset(address caller) public {\n        vm.prank(caller); IERC4626(_vault_).asset();\n    }",
                    "start": "57",
                    "end": "59",
                    "class": "ERC4626Prop",
                    "signature": " prop_assetaddress caller",
                    "full_signature": "function prop_asset(address caller) public   ",
                    "class_method_signature": "ERC4626Prop.prop_assetaddress caller",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// asset\n//\n// asset\n// \"MUST NOT revert.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_totalAssets",
                    "parameters": "address caller",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_totalAssets(address caller) public {\n        vm.prank(caller); IERC4626(_vault_).totalAssets();\n    }",
                    "start": "63",
                    "end": "65",
                    "class": "ERC4626Prop",
                    "signature": " prop_totalAssetsaddress caller",
                    "full_signature": "function prop_totalAssets(address caller) public   ",
                    "class_method_signature": "ERC4626Prop.prop_totalAssetsaddress caller",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// totalAssets\n// \"MUST NOT revert.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_convertToShares",
                    "parameters": "address caller1, address caller2, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_convertToShares(address caller1, address caller2, uint assets) public {\n        vm.prank(caller1); uint res1 = vault_convertToShares(assets); // \"MAY revert due to integer overflow caused by an unreasonably large input.\"\n        vm.prank(caller2); uint res2 = vault_convertToShares(assets); // \"MAY revert due to integer overflow caused by an unreasonably large input.\"\n        assertEq(res1, res2);\n    }",
                    "start": "73",
                    "end": "77",
                    "class": "ERC4626Prop",
                    "signature": " prop_convertToSharesaddress caller1, address caller2, uint assets",
                    "full_signature": "function prop_convertToShares(address caller1, address caller2, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_convertToSharesaddress caller1, address caller2, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// convert\n//\n// convertToShares\n// \"MUST NOT show any variations depending on the caller.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_convertToAssets",
                    "parameters": "address caller1, address caller2, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_convertToAssets(address caller1, address caller2, uint shares) public {\n        vm.prank(caller1); uint res1 = vault_convertToAssets(shares); // \"MAY revert due to integer overflow caused by an unreasonably large input.\"\n        vm.prank(caller2); uint res2 = vault_convertToAssets(shares); // \"MAY revert due to integer overflow caused by an unreasonably large input.\"\n        assertEq(res1, res2);\n    }",
                    "start": "81",
                    "end": "85",
                    "class": "ERC4626Prop",
                    "signature": " prop_convertToAssetsaddress caller1, address caller2, uint shares",
                    "full_signature": "function prop_convertToAssets(address caller1, address caller2, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_convertToAssetsaddress caller1, address caller2, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// convertToAssets\n// \"MUST NOT show any variations depending on the caller.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_maxDeposit",
                    "parameters": "address caller, address receiver",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_maxDeposit(address caller, address receiver) public {\n        vm.prank(caller); IERC4626(_vault_).maxDeposit(receiver);\n    }",
                    "start": "93",
                    "end": "95",
                    "class": "ERC4626Prop",
                    "signature": " prop_maxDepositaddress caller, address receiver",
                    "full_signature": "function prop_maxDeposit(address caller, address receiver) public   ",
                    "class_method_signature": "ERC4626Prop.prop_maxDepositaddress caller, address receiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// deposit\n//\n// maxDeposit\n// \"MUST NOT revert.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_previewDeposit",
                    "parameters": "address caller, address receiver, address other, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_previewDeposit(address caller, address receiver, address other, uint assets) public {\n        vm.prank(other); uint sharesPreview = vault_previewDeposit(assets); // \"MAY revert due to other conditions that would also cause deposit to revert.\"\n        vm.prank(caller); uint sharesActual = vault_deposit(assets, receiver);\n        assertApproxGeAbs(sharesActual, sharesPreview, _delta_);\n    }",
                    "start": "102",
                    "end": "106",
                    "class": "ERC4626Prop",
                    "signature": " prop_previewDepositaddress caller, address receiver, address other, uint assets",
                    "full_signature": "function prop_previewDeposit(address caller, address receiver, address other, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_previewDepositaddress caller, address receiver, address other, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// previewDeposit\n// \"MUST return as close to and no more than the exact amount of Vault\n// shares that would be minted in a deposit call in the same transaction.\n// I.e. deposit should return the same or more shares as previewDeposit if\n// called in the same transaction.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_deposit",
                    "parameters": "address caller, address receiver, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_deposit(address caller, address receiver, uint assets) public {\n        uint oldCallerAsset = IERC20(_underlying_).balanceOf(caller);\n        uint oldReceiverShare = IERC20(_vault_).balanceOf(receiver);\n        uint oldAllowance = IERC20(_underlying_).allowance(caller, _vault_);\n\n        vm.prank(caller); uint shares = vault_deposit(assets, receiver);\n\n        uint newCallerAsset = IERC20(_underlying_).balanceOf(caller);\n        uint newReceiverShare = IERC20(_vault_).balanceOf(receiver);\n        uint newAllowance = IERC20(_underlying_).allowance(caller, _vault_);\n\n        assertApproxEqAbs(newCallerAsset, oldCallerAsset - assets, _delta_, \"asset\"); // NOTE: this may fail if the caller is a contract in which the asset is stored\n        assertApproxEqAbs(newReceiverShare, oldReceiverShare + shares, _delta_, \"share\");\n        if (oldAllowance != type(uint).max) assertApproxEqAbs(newAllowance, oldAllowance - assets, _delta_, \"allowance\");\n    }",
                    "start": "109",
                    "end": "123",
                    "class": "ERC4626Prop",
                    "signature": " prop_depositaddress caller, address receiver, uint assets",
                    "full_signature": "function prop_deposit(address caller, address receiver, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_depositaddress caller, address receiver, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// deposit\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_maxMint",
                    "parameters": "address caller, address receiver",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_maxMint(address caller, address receiver) public {\n        vm.prank(caller); IERC4626(_vault_).maxMint(receiver);\n    }",
                    "start": "131",
                    "end": "133",
                    "class": "ERC4626Prop",
                    "signature": " prop_maxMintaddress caller, address receiver",
                    "full_signature": "function prop_maxMint(address caller, address receiver) public   ",
                    "class_method_signature": "ERC4626Prop.prop_maxMintaddress caller, address receiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// mint\n//\n// maxMint\n// \"MUST NOT revert.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_previewMint",
                    "parameters": "address caller, address receiver, address other, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_previewMint(address caller, address receiver, address other, uint shares) public {\n        vm.prank(other); uint assetsPreview = vault_previewMint(shares);\n        vm.prank(caller); uint assetsActual = vault_mint(shares, receiver);\n        assertApproxLeAbs(assetsActual, assetsPreview, _delta_);\n    }",
                    "start": "140",
                    "end": "144",
                    "class": "ERC4626Prop",
                    "signature": " prop_previewMintaddress caller, address receiver, address other, uint shares",
                    "full_signature": "function prop_previewMint(address caller, address receiver, address other, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_previewMintaddress caller, address receiver, address other, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// previewMint\n// \"MUST return as close to and no fewer than the exact amount of assets\n// that would be deposited in a mint call in the same transaction. I.e. mint\n// should return the same or fewer assets as previewMint if called in the\n// same transaction.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_mint",
                    "parameters": "address caller, address receiver, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_mint(address caller, address receiver, uint shares) public {\n        uint oldCallerAsset = IERC20(_underlying_).balanceOf(caller);\n        uint oldReceiverShare = IERC20(_vault_).balanceOf(receiver);\n        uint oldAllowance = IERC20(_underlying_).allowance(caller, _vault_);\n\n        vm.prank(caller); uint assets = vault_mint(shares, receiver);\n\n        uint newCallerAsset = IERC20(_underlying_).balanceOf(caller);\n        uint newReceiverShare = IERC20(_vault_).balanceOf(receiver);\n        uint newAllowance = IERC20(_underlying_).allowance(caller, _vault_);\n\n        assertApproxEqAbs(newCallerAsset, oldCallerAsset - assets, _delta_, \"asset\"); // NOTE: this may fail if the caller is a contract in which the asset is stored\n        assertApproxEqAbs(newReceiverShare, oldReceiverShare + shares, _delta_, \"share\");\n        if (oldAllowance != type(uint).max) assertApproxEqAbs(newAllowance, oldAllowance - assets, _delta_, \"allowance\");\n    }",
                    "start": "147",
                    "end": "161",
                    "class": "ERC4626Prop",
                    "signature": " prop_mintaddress caller, address receiver, uint shares",
                    "full_signature": "function prop_mint(address caller, address receiver, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_mintaddress caller, address receiver, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// mint\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_maxWithdraw",
                    "parameters": "address caller, address owner",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_maxWithdraw(address caller, address owner) public {\n        vm.prank(caller); IERC4626(_vault_).maxWithdraw(owner);\n    }",
                    "start": "170",
                    "end": "172",
                    "class": "ERC4626Prop",
                    "signature": " prop_maxWithdrawaddress caller, address owner",
                    "full_signature": "function prop_maxWithdraw(address caller, address owner) public   ",
                    "class_method_signature": "ERC4626Prop.prop_maxWithdrawaddress caller, address owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// withdraw\n//\n// maxWithdraw\n// \"MUST NOT revert.\"\n// NOTE: some implementations failed due to arithmetic overflow\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_previewWithdraw",
                    "parameters": "address caller, address receiver, address owner, address other, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_previewWithdraw(address caller, address receiver, address owner, address other, uint assets) public {\n        vm.prank(other); uint preview = vault_previewWithdraw(assets);\n        vm.prank(caller); uint actual = vault_withdraw(assets, receiver, owner);\n        assertApproxLeAbs(actual, preview, _delta_);\n    }",
                    "start": "179",
                    "end": "183",
                    "class": "ERC4626Prop",
                    "signature": " prop_previewWithdrawaddress caller, address receiver, address owner, address other, uint assets",
                    "full_signature": "function prop_previewWithdraw(address caller, address receiver, address owner, address other, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_previewWithdrawaddress caller, address receiver, address owner, address other, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// previewWithdraw\n// \"MUST return as close to and no fewer than the exact amount of Vault\n// shares that would be burned in a withdraw call in the same transaction.\n// I.e. withdraw should return the same or fewer shares as previewWithdraw\n// if called in the same transaction.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_withdraw",
                    "parameters": "address caller, address receiver, address owner, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_withdraw(address caller, address receiver, address owner, uint assets) public {\n        uint oldReceiverAsset = IERC20(_underlying_).balanceOf(receiver);\n        uint oldOwnerShare = IERC20(_vault_).balanceOf(owner);\n        uint oldAllowance = IERC20(_vault_).allowance(owner, caller);\n\n        vm.prank(caller); uint shares = vault_withdraw(assets, receiver, owner);\n\n        uint newReceiverAsset = IERC20(_underlying_).balanceOf(receiver);\n        uint newOwnerShare = IERC20(_vault_).balanceOf(owner);\n        uint newAllowance = IERC20(_vault_).allowance(owner, caller);\n\n        assertApproxEqAbs(newOwnerShare, oldOwnerShare - shares, _delta_, \"share\");\n        assertApproxEqAbs(newReceiverAsset, oldReceiverAsset + assets, _delta_, \"asset\"); // NOTE: this may fail if the receiver is a contract in which the asset is stored\n        if (caller != owner && oldAllowance != type(uint).max) assertApproxEqAbs(newAllowance, oldAllowance - shares, _delta_, \"allowance\");\n\n        assertTrue(caller == owner || oldAllowance != 0 || (shares == 0 && assets == 0), \"access control\");\n    }",
                    "start": "186",
                    "end": "202",
                    "class": "ERC4626Prop",
                    "signature": " prop_withdrawaddress caller, address receiver, address owner, uint assets",
                    "full_signature": "function prop_withdraw(address caller, address receiver, address owner, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_withdrawaddress caller, address receiver, address owner, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// withdraw\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_maxRedeem",
                    "parameters": "address caller, address owner",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_maxRedeem(address caller, address owner) public {\n        vm.prank(caller); IERC4626(_vault_).maxRedeem(owner);\n    }",
                    "start": "210",
                    "end": "212",
                    "class": "ERC4626Prop",
                    "signature": " prop_maxRedeemaddress caller, address owner",
                    "full_signature": "function prop_maxRedeem(address caller, address owner) public   ",
                    "class_method_signature": "ERC4626Prop.prop_maxRedeemaddress caller, address owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// redeem\n//\n// maxRedeem\n// \"MUST NOT revert.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_previewRedeem",
                    "parameters": "address caller, address receiver, address owner, address other, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_previewRedeem(address caller, address receiver, address owner, address other, uint shares) public {\n        vm.prank(other); uint preview = vault_previewRedeem(shares);\n        vm.prank(caller); uint actual = vault_redeem(shares, receiver, owner);\n        assertApproxGeAbs(actual, preview, _delta_);\n    }",
                    "start": "219",
                    "end": "223",
                    "class": "ERC4626Prop",
                    "signature": " prop_previewRedeemaddress caller, address receiver, address owner, address other, uint shares",
                    "full_signature": "function prop_previewRedeem(address caller, address receiver, address owner, address other, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_previewRedeemaddress caller, address receiver, address owner, address other, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// previewRedeem\n// \"MUST return as close to and no more than the exact amount of assets that\n// would be withdrawn in a redeem call in the same transaction. I.e. redeem\n// should return the same or more assets as previewRedeem if called in the\n// same transaction.\"\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_redeem",
                    "parameters": "address caller, address receiver, address owner, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_redeem(address caller, address receiver, address owner, uint shares) public {\n        uint oldReceiverAsset = IERC20(_underlying_).balanceOf(receiver);\n        uint oldOwnerShare = IERC20(_vault_).balanceOf(owner);\n        uint oldAllowance = IERC20(_vault_).allowance(owner, caller);\n\n        vm.prank(caller); uint assets = vault_redeem(shares, receiver, owner);\n\n        uint newReceiverAsset = IERC20(_underlying_).balanceOf(receiver);\n        uint newOwnerShare = IERC20(_vault_).balanceOf(owner);\n        uint newAllowance = IERC20(_vault_).allowance(owner, caller);\n\n        assertApproxEqAbs(newOwnerShare, oldOwnerShare - shares, _delta_, \"share\");\n        assertApproxEqAbs(newReceiverAsset, oldReceiverAsset + assets, _delta_, \"asset\"); // NOTE: this may fail if the receiver is a contract in which the asset is stored\n        if (caller != owner && oldAllowance != type(uint).max) assertApproxEqAbs(newAllowance, oldAllowance - shares, _delta_, \"allowance\");\n\n        assertTrue(caller == owner || oldAllowance != 0 || (shares == 0 && assets == 0), \"access control\");\n    }",
                    "start": "226",
                    "end": "242",
                    "class": "ERC4626Prop",
                    "signature": " prop_redeemaddress caller, address receiver, address owner, uint shares",
                    "full_signature": "function prop_redeem(address caller, address receiver, address owner, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_redeemaddress caller, address receiver, address owner, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// redeem\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_deposit_redeem",
                    "parameters": "address caller, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_deposit_redeem(address caller, uint assets) public {\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint shares = vault_deposit(assets, caller);\n        vm.prank(caller); uint assets2 = vault_redeem(shares, caller, caller);\n        assertApproxLeAbs(assets2, assets, _delta_);\n    }",
                    "start": "249",
                    "end": "254",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_deposit_redeemaddress caller, uint assets",
                    "full_signature": "function prop_RT_deposit_redeem(address caller, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_deposit_redeemaddress caller, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// round trip properties\n//\n// redeem(deposit(a)) <= a\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_deposit_withdraw",
                    "parameters": "address caller, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_deposit_withdraw(address caller, uint assets) public {\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint shares1 = vault_deposit(assets, caller);\n        vm.prank(caller); uint shares2 = vault_withdraw(assets, caller, caller);\n        assertApproxGeAbs(shares2, shares1, _delta_);\n    }",
                    "start": "259",
                    "end": "264",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_deposit_withdrawaddress caller, uint assets",
                    "full_signature": "function prop_RT_deposit_withdraw(address caller, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_deposit_withdrawaddress caller, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// s = deposit(a)\n// s' = withdraw(a)\n// s' >= s\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_redeem_deposit",
                    "parameters": "address caller, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_redeem_deposit(address caller, uint shares) public {\n        vm.prank(caller); uint assets = vault_redeem(shares, caller, caller);\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint shares2 = vault_deposit(assets, caller);\n        assertApproxLeAbs(shares2, shares, _delta_);\n    }",
                    "start": "267",
                    "end": "272",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_redeem_depositaddress caller, uint shares",
                    "full_signature": "function prop_RT_redeem_deposit(address caller, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_redeem_depositaddress caller, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// deposit(redeem(s)) <= s\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_redeem_mint",
                    "parameters": "address caller, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_redeem_mint(address caller, uint shares) public {\n        vm.prank(caller); uint assets1 = vault_redeem(shares, caller, caller);\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint assets2 = vault_mint(shares, caller);\n        assertApproxGeAbs(assets2, assets1, _delta_);\n    }",
                    "start": "277",
                    "end": "282",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_redeem_mintaddress caller, uint shares",
                    "full_signature": "function prop_RT_redeem_mint(address caller, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_redeem_mintaddress caller, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// a = redeem(s)\n// a' = mint(s)\n// a' >= a\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_mint_withdraw",
                    "parameters": "address caller, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_mint_withdraw(address caller, uint shares) public {\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint assets = vault_mint(shares, caller);\n        vm.prank(caller); uint shares2 = vault_withdraw(assets, caller, caller);\n        assertApproxGeAbs(shares2, shares, _delta_);\n    }",
                    "start": "285",
                    "end": "290",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_mint_withdrawaddress caller, uint shares",
                    "full_signature": "function prop_RT_mint_withdraw(address caller, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_mint_withdrawaddress caller, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// withdraw(mint(s)) >= s\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_mint_redeem",
                    "parameters": "address caller, uint shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_mint_redeem(address caller, uint shares) public {\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint assets1 = vault_mint(shares, caller);\n        vm.prank(caller); uint assets2 = vault_redeem(shares, caller, caller);\n        assertApproxLeAbs(assets2, assets1, _delta_);\n    }",
                    "start": "295",
                    "end": "300",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_mint_redeemaddress caller, uint shares",
                    "full_signature": "function prop_RT_mint_redeem(address caller, uint shares) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_mint_redeemaddress caller, uint shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// a = mint(s)\n// a' = redeem(s)\n// a' <= a\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_withdraw_mint",
                    "parameters": "address caller, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_withdraw_mint(address caller, uint assets) public {\n        vm.prank(caller); uint shares = vault_withdraw(assets, caller, caller);\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint assets2 = vault_mint(shares, caller);\n        assertApproxGeAbs(assets2, assets, _delta_);\n    }",
                    "start": "303",
                    "end": "308",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_withdraw_mintaddress caller, uint assets",
                    "full_signature": "function prop_RT_withdraw_mint(address caller, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_withdraw_mintaddress caller, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// mint(withdraw(a)) >= a\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "prop_RT_withdraw_deposit",
                    "parameters": "address caller, uint assets",
                    "modifiers": "",
                    "return": "",
                    "body": "function prop_RT_withdraw_deposit(address caller, uint assets) public {\n        vm.prank(caller); uint shares1 = vault_withdraw(assets, caller, caller);\n        if (!_vaultMayBeEmpty) vm.assume(IERC20(_vault_).totalSupply() > 0);\n        vm.prank(caller); uint shares2 = vault_deposit(assets, caller);\n        assertApproxLeAbs(shares2, shares1, _delta_);\n    }",
                    "start": "313",
                    "end": "318",
                    "class": "ERC4626Prop",
                    "signature": " prop_RT_withdraw_depositaddress caller, uint assets",
                    "full_signature": "function prop_RT_withdraw_deposit(address caller, uint assets) public   ",
                    "class_method_signature": "ERC4626Prop.prop_RT_withdraw_depositaddress caller, uint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// s = withdraw(a)\n// s' = deposit(a)\n// s' <= s\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "vault_convertToShares",
                    "parameters": "uint assets",
                    "modifiers": "",
                    "return": "returns (uint)",
                    "body": "function vault_convertToShares(uint assets) internal returns (uint) {\n        return _call_vault(abi.encodeWithSelector(IERC4626.convertToShares.selector, assets));\n    }",
                    "start": "324",
                    "end": "326",
                    "class": "ERC4626Prop",
                    "signature": "returns (uint) vault_convertToSharesuint assets",
                    "full_signature": "function vault_convertToShares(uint assets) internal   returns (uint)",
                    "class_method_signature": "ERC4626Prop.vault_convertToSharesuint assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "//\n// utils\n//\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/demo/demo.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/test.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/test.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "testAssertTrue",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertTrue() public {\n        assertTrue(true, \"msg\");\n        assertTrue(true);\n    }",
                    "start": "10",
                    "end": "13",
                    "class": "DemoTest",
                    "signature": " testAssertTrue",
                    "full_signature": "function testAssertTrue() public   ",
                    "class_method_signature": "DemoTest.testAssertTrue",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertTrue ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertEqAddr",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertEqAddr() public {\n        assertEq(address(0x0), address(0x0), \"msg\");\n        assertEq(address(0x0), address(0x0));\n    }",
                    "start": "23",
                    "end": "26",
                    "class": "DemoTest",
                    "signature": " testAssertEqAddr",
                    "full_signature": "function testAssertEqAddr() public   ",
                    "class_method_signature": "DemoTest.testAssertEqAddr",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertEq (Addr) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertEqBytes32",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertEqBytes32() public {\n        assertEq(bytes32(\"hi\"), bytes32(\"hi\"), \"msg\");\n        assertEq(bytes32(\"hi\"), bytes32(\"hi\"));\n    }",
                    "start": "36",
                    "end": "39",
                    "class": "DemoTest",
                    "signature": " testAssertEqBytes32",
                    "full_signature": "function testAssertEqBytes32() public   ",
                    "class_method_signature": "DemoTest.testAssertEqBytes32",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertEq (Bytes32) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertEqInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertEqInt() public {\n        assertEq(-1, -1, \"msg\");\n        assertEq(-1, -1);\n    }",
                    "start": "49",
                    "end": "52",
                    "class": "DemoTest",
                    "signature": " testAssertEqInt",
                    "full_signature": "function testAssertEqInt() public   ",
                    "class_method_signature": "DemoTest.testAssertEqInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertEq (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertEqUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertEqUInt() public {\n        assertEq(uint(1), uint(1), \"msg\");\n        assertEq(uint(1), uint(1));\n    }",
                    "start": "62",
                    "end": "65",
                    "class": "DemoTest",
                    "signature": " testAssertEqUInt",
                    "full_signature": "function testAssertEqUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertEqUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertEq (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertEqDecimalInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertEqDecimalInt() public {\n        assertEqDecimal(-1, -1, 18, \"msg\");\n        assertEqDecimal(-1, -1, 18);\n    }",
                    "start": "75",
                    "end": "78",
                    "class": "DemoTest",
                    "signature": " testAssertEqDecimalInt",
                    "full_signature": "function testAssertEqDecimalInt() public   ",
                    "class_method_signature": "DemoTest.testAssertEqDecimalInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertEqDecimal (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertEqDecimalUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertEqDecimalUInt() public {\n        assertEqDecimal(uint(1), uint(1), 18, \"msg\");\n        assertEqDecimal(uint(1), uint(1), 18);\n    }",
                    "start": "88",
                    "end": "91",
                    "class": "DemoTest",
                    "signature": " testAssertEqDecimalUInt",
                    "full_signature": "function testAssertEqDecimalUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertEqDecimalUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertEqDecimal (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertNotEqAddr",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertNotEqAddr() public {\n        assertNotEq(address(0x0), address(0x1), \"msg\");\n        assertNotEq(address(0x0), address(0x1));\n    }",
                    "start": "101",
                    "end": "104",
                    "class": "DemoTest",
                    "signature": " testAssertNotEqAddr",
                    "full_signature": "function testAssertNotEqAddr() public   ",
                    "class_method_signature": "DemoTest.testAssertNotEqAddr",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertNotEq (Addr) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertNotEqBytes32",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertNotEqBytes32() public {\n        assertNotEq(bytes32(\"hi\"), bytes32(\"ho\"), \"msg\");\n        assertNotEq(bytes32(\"hi\"), bytes32(\"ho\"));\n    }",
                    "start": "114",
                    "end": "117",
                    "class": "DemoTest",
                    "signature": " testAssertNotEqBytes32",
                    "full_signature": "function testAssertNotEqBytes32() public   ",
                    "class_method_signature": "DemoTest.testAssertNotEqBytes32",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertNotEq (Bytes32) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertNotEqInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertNotEqInt() public {\n        assertNotEq(-1, -2, \"msg\");\n        assertNotEq(-1, -2);\n    }",
                    "start": "127",
                    "end": "130",
                    "class": "DemoTest",
                    "signature": " testAssertNotEqInt",
                    "full_signature": "function testAssertNotEqInt() public   ",
                    "class_method_signature": "DemoTest.testAssertNotEqInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertNotEq (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertNotEqUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertNotEqUInt() public {\n        assertNotEq(uint(1), uint(2), \"msg\");\n        assertNotEq(uint(1), uint(2));\n    }",
                    "start": "140",
                    "end": "143",
                    "class": "DemoTest",
                    "signature": " testAssertNotEqUInt",
                    "full_signature": "function testAssertNotEqUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertNotEqUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertNotEq (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertNotEqDecimalInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertNotEqDecimalInt() public {\n        assertNotEqDecimal(-1, -2, 18, \"msg\");\n        assertNotEqDecimal(-1, -2, 18);\n    }",
                    "start": "153",
                    "end": "156",
                    "class": "DemoTest",
                    "signature": " testAssertNotEqDecimalInt",
                    "full_signature": "function testAssertNotEqDecimalInt() public   ",
                    "class_method_signature": "DemoTest.testAssertNotEqDecimalInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertNotEqDecimal (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertNotEqDecimalUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertNotEqDecimalUInt() public {\n        assertNotEqDecimal(uint(1), uint(2), 18, \"msg\");\n        assertNotEqDecimal(uint(1), uint(2), 18);\n    }",
                    "start": "166",
                    "end": "169",
                    "class": "DemoTest",
                    "signature": " testAssertNotEqDecimalUInt",
                    "full_signature": "function testAssertNotEqDecimalUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertNotEqDecimalUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertNotEqDecimal (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertGtUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertGtUInt() public {\n        assertGt(uint(2), uint(1), \"msg\");\n        assertGt(uint(3), uint(2));\n    }",
                    "start": "179",
                    "end": "182",
                    "class": "DemoTest",
                    "signature": " testAssertGtUInt",
                    "full_signature": "function testAssertGtUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertGtUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertGt (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertGtInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertGtInt() public {\n        assertGt(-1, -2, \"msg\");\n        assertGt(-1, -3);\n    }",
                    "start": "192",
                    "end": "195",
                    "class": "DemoTest",
                    "signature": " testAssertGtInt",
                    "full_signature": "function testAssertGtInt() public   ",
                    "class_method_signature": "DemoTest.testAssertGtInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertGt (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertGtDecimalUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertGtDecimalUInt() public {\n        assertGtDecimal(uint(2), uint(1), 18, \"msg\");\n        assertGtDecimal(uint(3), uint(2), 18);\n    }",
                    "start": "205",
                    "end": "208",
                    "class": "DemoTest",
                    "signature": " testAssertGtDecimalUInt",
                    "full_signature": "function testAssertGtDecimalUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertGtDecimalUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertGtDecimal (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertGtDecimalInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertGtDecimalInt() public {\n        assertGtDecimal(-1, -2, 18, \"msg\");\n        assertGtDecimal(-1, -3, 18);\n    }",
                    "start": "218",
                    "end": "221",
                    "class": "DemoTest",
                    "signature": " testAssertGtDecimalInt",
                    "full_signature": "function testAssertGtDecimalInt() public   ",
                    "class_method_signature": "DemoTest.testAssertGtDecimalInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertGtDecimal (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertGeUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertGeUInt() public {\n        assertGe(uint(2), uint(1), \"msg\");\n        assertGe(uint(2), uint(2));\n    }",
                    "start": "231",
                    "end": "234",
                    "class": "DemoTest",
                    "signature": " testAssertGeUInt",
                    "full_signature": "function testAssertGeUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertGeUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertGe (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertGeInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertGeInt() public {\n        assertGe(-1, -2, \"msg\");\n        assertGe(-1, -1);\n    }",
                    "start": "244",
                    "end": "247",
                    "class": "DemoTest",
                    "signature": " testAssertGeInt",
                    "full_signature": "function testAssertGeInt() public   ",
                    "class_method_signature": "DemoTest.testAssertGeInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertGe (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertGeDecimalUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertGeDecimalUInt() public {\n        assertGeDecimal(uint(2), uint(1), 18, \"msg\");\n        assertGeDecimal(uint(2), uint(2), 18);\n    }",
                    "start": "257",
                    "end": "260",
                    "class": "DemoTest",
                    "signature": " testAssertGeDecimalUInt",
                    "full_signature": "function testAssertGeDecimalUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertGeDecimalUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertGeDecimal (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertGeDecimalInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertGeDecimalInt() public {\n        assertGeDecimal(-1, -2, 18, \"msg\");\n        assertGeDecimal(-1, -2, 18);\n    }",
                    "start": "270",
                    "end": "273",
                    "class": "DemoTest",
                    "signature": " testAssertGeDecimalInt",
                    "full_signature": "function testAssertGeDecimalInt() public   ",
                    "class_method_signature": "DemoTest.testAssertGeDecimalInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertGeDecimal (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertLtUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertLtUInt() public {\n        assertLt(uint(1), uint(2), \"msg\");\n        assertLt(uint(1), uint(3));\n    }",
                    "start": "283",
                    "end": "286",
                    "class": "DemoTest",
                    "signature": " testAssertLtUInt",
                    "full_signature": "function testAssertLtUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertLtUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertLt (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertLtInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertLtInt() public {\n        assertLt(-2, -1, \"msg\");\n        assertLt(-1, 0);\n    }",
                    "start": "296",
                    "end": "299",
                    "class": "DemoTest",
                    "signature": " testAssertLtInt",
                    "full_signature": "function testAssertLtInt() public   ",
                    "class_method_signature": "DemoTest.testAssertLtInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertLt (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertLtDecimalUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertLtDecimalUInt() public {\n        assertLtDecimal(uint(1), uint(2), 18, \"msg\");\n        assertLtDecimal(uint(2), uint(3), 18);\n    }",
                    "start": "309",
                    "end": "312",
                    "class": "DemoTest",
                    "signature": " testAssertLtDecimalUInt",
                    "full_signature": "function testAssertLtDecimalUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertLtDecimalUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertLtDecimal (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertLtDecimalInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertLtDecimalInt() public {\n        assertLtDecimal(-2, -1, 18, \"msg\");\n        assertLtDecimal(-2, -1, 18);\n    }",
                    "start": "322",
                    "end": "325",
                    "class": "DemoTest",
                    "signature": " testAssertLtDecimalInt",
                    "full_signature": "function testAssertLtDecimalInt() public   ",
                    "class_method_signature": "DemoTest.testAssertLtDecimalInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertLtDecimal (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertLeUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertLeUInt() public {\n        assertLe(uint(1), uint(2), \"msg\");\n        assertLe(uint(1), uint(1));\n    }",
                    "start": "335",
                    "end": "338",
                    "class": "DemoTest",
                    "signature": " testAssertLeUInt",
                    "full_signature": "function testAssertLeUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertLeUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertLe (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertLeInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertLeInt() public {\n        assertLe(-2, -1, \"msg\");\n        assertLe(-1, -1);\n    }",
                    "start": "348",
                    "end": "351",
                    "class": "DemoTest",
                    "signature": " testAssertLeInt",
                    "full_signature": "function testAssertLeInt() public   ",
                    "class_method_signature": "DemoTest.testAssertLeInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertLe (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertLeDecimalUInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertLeDecimalUInt() public {\n        assertLeDecimal(uint(1), uint(2), 18, \"msg\");\n        assertLeDecimal(uint(2), uint(2), 18);\n    }",
                    "start": "361",
                    "end": "364",
                    "class": "DemoTest",
                    "signature": " testAssertLeDecimalUInt",
                    "full_signature": "function testAssertLeDecimalUInt() public   ",
                    "class_method_signature": "DemoTest.testAssertLeDecimalUInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertLeDecimal (UInt) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertLeDecimalInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertLeDecimalInt() public {\n        assertLeDecimal(-2, -1, 18, \"msg\");\n        assertLeDecimal(-2, -2, 18);\n    }",
                    "start": "374",
                    "end": "377",
                    "class": "DemoTest",
                    "signature": " testAssertLeDecimalInt",
                    "full_signature": "function testAssertLeDecimalInt() public   ",
                    "class_method_signature": "DemoTest.testAssertLeDecimalInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertLeDecimal (Int) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertNotEqString",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertNotEqString() public {\n        assertNotEq(new string(1), new string(2), \"msg\");\n        assertNotEq(new string(1), new string(2));\n    }",
                    "start": "387",
                    "end": "390",
                    "class": "DemoTest",
                    "signature": " testAssertNotEqString",
                    "full_signature": "function testAssertNotEqString() public   ",
                    "class_method_signature": "DemoTest.testAssertNotEqString",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertNotEq (String) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAssertNotEq0Bytes",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertNotEq0Bytes() public {\n        assertNotEq0(bytes(\"hi\"), bytes(\"ho\"), \"msg\");\n        assertNotEq0(bytes(\"hi\"), bytes(\"ho\"));\n    }",
                    "start": "400",
                    "end": "403",
                    "class": "DemoTest",
                    "signature": " testAssertNotEq0Bytes",
                    "full_signature": "function testAssertNotEq0Bytes() public   ",
                    "class_method_signature": "DemoTest.testAssertNotEq0Bytes",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// --- assertNotEq0 (Bytes) ---\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "fail",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "",
                    "body": "function fail() internal override {\n        super.fail();\n    }",
                    "start": "414",
                    "end": "416",
                    "class": "DemoTest",
                    "signature": " fail",
                    "full_signature": "function fail() internal  override ",
                    "class_method_signature": "DemoTest.fail",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// --- fail override ---\n// ensure that fail can be overridden\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/StdChains.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "test_ChainNoDefault",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_ChainNoDefault() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        vm.expectRevert(\"StdChains getChain(string): Chain with alias \\\"does_not_exist\\\" not found.\");\n        stdChainsMock.exposed_getChain(\"does_not_exist\");\n    }",
                    "start": "75",
                    "end": "81",
                    "class": "StdChainsTest",
                    "signature": " test_ChainNoDefault",
                    "full_signature": "function test_ChainNoDefault() public   ",
                    "class_method_signature": "StdChainsTest.test_ChainNoDefault",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// Ensure we can connect to the default RPC URL for each chain.\n// function testRpcs() public {\n//     testRpc(\"mainnet\");\n//     testRpc(\"goerli\");\n//     testRpc(\"sepolia\");\n//     testRpc(\"optimism\");\n//     testRpc(\"optimism_goerli\");\n//     testRpc(\"arbitrum_one\");\n//     testRpc(\"arbitrum_one_goerli\");\n//     testRpc(\"arbitrum_nova\");\n//     testRpc(\"polygon\");\n//     testRpc(\"polygon_mumbai\");\n//     testRpc(\"avalanche\");\n//     testRpc(\"avalanche_fuji\");\n//     testRpc(\"bnb_smart_chain\");\n//     testRpc(\"bnb_smart_chain_testnet\");\n//     testRpc(\"gnosis_chain\");\n//     testRpc(\"moonbeam\");\n//     testRpc(\"moonriver\");\n//     testRpc(\"moonbase\");\n//     testRpc(\"base_goerli\");\n//     testRpc(\"base\");\n// }\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/StdStyle.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/StdStorage.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/Vm.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "test_interfaceId",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_interfaceId() public {\n        assertEq(type(VmSafe).interfaceId, bytes4(0x01ec102d), \"VmSafe\");\n        assertEq(type(Vm).interfaceId, bytes4(0xa63eed6b), \"Vm\");\n    }",
                    "start": "11",
                    "end": "14",
                    "class": "VmTest",
                    "signature": " test_interfaceId",
                    "full_signature": "function test_interfaceId() public   ",
                    "class_method_signature": "VmTest.test_interfaceId",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// This test ensures that functions are never accidentally removed from a Vm interface, or\n// inadvertently moved between Vm and VmSafe. This test must be updated each time a function is\n// added to or removed from Vm or VmSafe.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/StdMath.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "getAbs",
                    "parameters": "int256 a",
                    "modifiers": "pure",
                    "return": "returns (uint256)",
                    "body": "function getAbs(int256 a) private pure returns (uint256) {\n        if (a < 0) {\n            return a == type(int256).min ? uint256(type(int256).max) + 1 : uint256(-a);\n        }\n\n        return uint256(a);\n    }",
                    "start": "205",
                    "end": "211",
                    "class": "StdMathTest",
                    "signature": "returns (uint256) getAbsint256 a",
                    "full_signature": "function getAbs(int256 a) private  pure returns (uint256)",
                    "class_method_signature": "StdMathTest.getAbsint256 a",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                   HELPERS\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/StdAssertions.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "test_ShouldFail",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_ShouldFail() external {\n        vm.expectEmit(false, false, false, true);\n        emit log_named_string(\"Error\", CUSTOM_ERROR);\n        t._fail(CUSTOM_ERROR);\n    }",
                    "start": "24",
                    "end": "28",
                    "class": "StdAssertionsTest",
                    "signature": " test_ShouldFail",
                    "full_signature": "function test_ShouldFail() external   ",
                    "class_method_signature": "StdAssertionsTest.test_ShouldFail",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    FAIL(STRING)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "test_AssertFalse_Pass",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_AssertFalse_Pass() external {\n        t._assertFalse(false, EXPECT_PASS);\n    }",
                    "start": "34",
                    "end": "36",
                    "class": "StdAssertionsTest",
                    "signature": " test_AssertFalse_Pass",
                    "full_signature": "function test_AssertFalse_Pass() external   ",
                    "class_method_signature": "StdAssertionsTest.test_AssertFalse_Pass",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    ASSERT_FALSE\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testFuzz_AssertEq_Bool_Pass",
                    "parameters": "bool a",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertEq_Bool_Pass(bool a) external {\n        t._assertEq(a, a, EXPECT_PASS);\n    }",
                    "start": "58",
                    "end": "60",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertEq_Bool_Passbool a",
                    "full_signature": "function testFuzz_AssertEq_Bool_Pass(bool a) external   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertEq_Bool_Passbool a",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    ASSERT_EQ(BOOL)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testFuzz_AssertEq_Bytes_Pass",
                    "parameters": "bytes calldata a",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertEq_Bytes_Pass(bytes calldata a) external {\n        t._assertEq(a, a, EXPECT_PASS);\n    }",
                    "start": "86",
                    "end": "88",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertEq_Bytes_Passbytes calldata a",
                    "full_signature": "function testFuzz_AssertEq_Bytes_Pass(bytes calldata a) external   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertEq_Bytes_Passbytes calldata a",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    ASSERT_EQ(BYTES)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testFuzz_AssertEq_UintArr_Pass",
                    "parameters": "uint256 e0, uint256 e1, uint256 e2",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertEq_UintArr_Pass(uint256 e0, uint256 e1, uint256 e2) public {\n        uint256[] memory a = new uint256[](3);\n        a[0] = e0;\n        a[1] = e1;\n        a[2] = e2;\n        uint256[] memory b = new uint256[](3);\n        b[0] = e0;\n        b[1] = e1;\n        b[2] = e2;\n\n        t._assertEq(a, b, EXPECT_PASS);\n    }",
                    "start": "114",
                    "end": "125",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertEq_UintArr_Passuint256 e0, uint256 e1, uint256 e2",
                    "full_signature": "function testFuzz_AssertEq_UintArr_Pass(uint256 e0, uint256 e1, uint256 e2) public   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertEq_UintArr_Passuint256 e0, uint256 e1, uint256 e2",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    ASSERT_EQ(ARRAY)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_AssertEqUint",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_AssertEqUint() public {\n        assertEqUint(uint8(1), uint128(1));\n        assertEqUint(uint64(2), uint64(2));\n    }",
                    "start": "307",
                    "end": "310",
                    "class": "StdAssertionsTest",
                    "signature": " test_AssertEqUint",
                    "full_signature": "function test_AssertEqUint() public   ",
                    "class_method_signature": "StdAssertionsTest.test_AssertEqUint",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    ASSERT_EQ(UINT)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testFuzz_AssertApproxEqAbs_Uint_Pass",
                    "parameters": "uint256 a, uint256 b, uint256 maxDelta",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertApproxEqAbs_Uint_Pass(uint256 a, uint256 b, uint256 maxDelta) external {\n        vm.assume(stdMath.delta(a, b) <= maxDelta);\n\n        t._assertApproxEqAbs(a, b, maxDelta, EXPECT_PASS);\n    }",
                    "start": "321",
                    "end": "325",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertApproxEqAbs_Uint_Passuint256 a, uint256 b, uint256 maxDelta",
                    "full_signature": "function testFuzz_AssertApproxEqAbs_Uint_Pass(uint256 a, uint256 b, uint256 maxDelta) external   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertApproxEqAbs_Uint_Passuint256 a, uint256 b, uint256 maxDelta",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    APPROX_EQ_ABS(UINT)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testFuzz_AssertApproxEqAbsDecimal_Uint_Pass",
                    "parameters": "uint256 a, uint256 b, uint256 maxDelta, uint256 decimals",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertApproxEqAbsDecimal_Uint_Pass(uint256 a, uint256 b, uint256 maxDelta, uint256 decimals)\n        external\n    {\n        vm.assume(stdMath.delta(a, b) <= maxDelta);\n\n        t._assertApproxEqAbsDecimal(a, b, maxDelta, decimals, EXPECT_PASS);\n    }",
                    "start": "353",
                    "end": "359",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertApproxEqAbsDecimal_Uint_Passuint256 a, uint256 b, uint256 maxDelta, uint256 decimals",
                    "full_signature": "function testFuzz_AssertApproxEqAbsDecimal_Uint_Pass(uint256 a, uint256 b, uint256 maxDelta, uint256 decimals) external   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertApproxEqAbsDecimal_Uint_Passuint256 a, uint256 b, uint256 maxDelta, uint256 decimals",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    APPROX_EQ_ABS_DECIMAL(UINT)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testFuzz_AssertApproxEqAbs_Int_Pass",
                    "parameters": "int256 a, int256 b, uint256 maxDelta",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertApproxEqAbs_Int_Pass(int256 a, int256 b, uint256 maxDelta) external {\n        vm.assume(stdMath.delta(a, b) <= maxDelta);\n\n        t._assertApproxEqAbs(a, b, maxDelta, EXPECT_PASS);\n    }",
                    "start": "393",
                    "end": "397",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertApproxEqAbs_Int_Passint256 a, int256 b, uint256 maxDelta",
                    "full_signature": "function testFuzz_AssertApproxEqAbs_Int_Pass(int256 a, int256 b, uint256 maxDelta) external   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertApproxEqAbs_Int_Passint256 a, int256 b, uint256 maxDelta",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    APPROX_EQ_ABS(INT)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testFuzz_AssertApproxEqAbsDecimal_Int_Pass",
                    "parameters": "int256 a, int256 b, uint256 maxDelta, uint256 decimals",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertApproxEqAbsDecimal_Int_Pass(int256 a, int256 b, uint256 maxDelta, uint256 decimals)\n        external\n    {\n        vm.assume(stdMath.delta(a, b) <= maxDelta);\n\n        t._assertApproxEqAbsDecimal(a, b, maxDelta, decimals, EXPECT_PASS);\n    }",
                    "start": "425",
                    "end": "431",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertApproxEqAbsDecimal_Int_Passint256 a, int256 b, uint256 maxDelta, uint256 decimals",
                    "full_signature": "function testFuzz_AssertApproxEqAbsDecimal_Int_Pass(int256 a, int256 b, uint256 maxDelta, uint256 decimals) external   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertApproxEqAbsDecimal_Int_Passint256 a, int256 b, uint256 maxDelta, uint256 decimals",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    APPROX_EQ_ABS_DECIMAL(INT)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testFuzz_AssertApproxEqRel_Uint_Pass",
                    "parameters": "uint256 a, uint256 b, uint256 maxPercentDelta",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertApproxEqRel_Uint_Pass(uint256 a, uint256 b, uint256 maxPercentDelta) external {\n        vm.assume(a < type(uint128).max && b < type(uint128).max && b != 0);\n        vm.assume(stdMath.percentDelta(a, b) <= maxPercentDelta);\n\n        t._assertApproxEqRel(a, b, maxPercentDelta, EXPECT_PASS);\n    }",
                    "start": "465",
                    "end": "470",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertApproxEqRel_Uint_Passuint256 a, uint256 b, uint256 maxPercentDelta",
                    "full_signature": "function testFuzz_AssertApproxEqRel_Uint_Pass(uint256 a, uint256 b, uint256 maxPercentDelta) external   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertApproxEqRel_Uint_Passuint256 a, uint256 b, uint256 maxPercentDelta",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    APPROX_EQ_REL(UINT)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testFuzz_AssertApproxEqRelDecimal_Uint_Pass",
                    "parameters": "uint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertApproxEqRelDecimal_Uint_Pass(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta,\n        uint256 decimals\n    ) external {\n        vm.assume(a < type(uint128).max && b < type(uint128).max && b != 0);\n        vm.assume(stdMath.percentDelta(a, b) <= maxPercentDelta);\n\n        t._assertApproxEqRelDecimal(a, b, maxPercentDelta, decimals, EXPECT_PASS);\n    }",
                    "start": "501",
                    "end": "511",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertApproxEqRelDecimal_Uint_Passuint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals",
                    "full_signature": "function testFuzz_AssertApproxEqRelDecimal_Uint_Pass(uint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals) external   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertApproxEqRelDecimal_Uint_Passuint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    APPROX_EQ_REL_DECIMAL(UINT)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testFuzz_AssertApproxEqRel_Int_Pass",
                    "parameters": "int128 a, int128 b, uint128 maxPercentDelta",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertApproxEqRel_Int_Pass(int128 a, int128 b, uint128 maxPercentDelta) external {\n        vm.assume(b != 0);\n        vm.assume(stdMath.percentDelta(a, b) <= maxPercentDelta);\n\n        t._assertApproxEqRel(a, b, maxPercentDelta, EXPECT_PASS);\n    }",
                    "start": "557",
                    "end": "562",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertApproxEqRel_Int_Passint128 a, int128 b, uint128 maxPercentDelta",
                    "full_signature": "function testFuzz_AssertApproxEqRel_Int_Pass(int128 a, int128 b, uint128 maxPercentDelta) external   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertApproxEqRel_Int_Passint128 a, int128 b, uint128 maxPercentDelta",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    APPROX_EQ_REL(INT)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testAssertApproxEqRelDecimal_Int_Pass",
                    "parameters": "int128 a, int128 b, uint128 maxPercentDelta, uint128 decimals",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAssertApproxEqRelDecimal_Int_Pass(int128 a, int128 b, uint128 maxPercentDelta, uint128 decimals)\n        external\n    {\n        vm.assume(b != 0);\n        vm.assume(stdMath.percentDelta(a, b) <= maxPercentDelta);\n\n        t._assertApproxEqRelDecimal(a, b, maxPercentDelta, decimals, EXPECT_PASS);\n    }",
                    "start": "593",
                    "end": "600",
                    "class": "StdAssertionsTest",
                    "signature": " testAssertApproxEqRelDecimal_Int_Passint128 a, int128 b, uint128 maxPercentDelta, uint128 decimals",
                    "full_signature": "function testAssertApproxEqRelDecimal_Int_Pass(int128 a, int128 b, uint128 maxPercentDelta, uint128 decimals) external   ",
                    "class_method_signature": "StdAssertionsTest.testAssertApproxEqRelDecimal_Int_Passint128 a, int128 b, uint128 maxPercentDelta, uint128 decimals",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    APPROX_EQ_REL_DECIMAL(INT)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testFuzz_AssertEqCall_Return_Pass",
                    "parameters": "bytes memory callDataA, bytes memory callDataB, bytes memory returnData, bool strictRevertData",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertEqCall_Return_Pass(\n        bytes memory callDataA,\n        bytes memory callDataB,\n        bytes memory returnData,\n        bool strictRevertData\n    ) external {\n        address targetA = address(new TestMockCall(returnData, SHOULD_RETURN));\n        address targetB = address(new TestMockCall(returnData, SHOULD_RETURN));\n\n        t._assertEqCall(targetA, callDataA, targetB, callDataB, strictRevertData, EXPECT_PASS);\n    }",
                    "start": "637",
                    "end": "647",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertEqCall_Return_Passbytes memory callDataA, bytes memory callDataB, bytes memory returnData, bool strictRevertData",
                    "full_signature": "function testFuzz_AssertEqCall_Return_Pass(bytes memory callDataA, bytes memory callDataB, bytes memory returnData, bool strictRevertData) external   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertEqCall_Return_Passbytes memory callDataA, bytes memory callDataB, bytes memory returnData, bool strictRevertData",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                    ASSERT_EQ_CALL\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "testFuzz_AssertNotEq_Bytes_Pass",
                    "parameters": "bytes32 a, bytes32 b",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzz_AssertNotEq_Bytes_Pass(bytes32 a, bytes32 b) external {\n        vm.assume(a != b);\n        t._assertNotEq(a, b, EXPECT_PASS);\n    }",
                    "start": "721",
                    "end": "724",
                    "class": "StdAssertionsTest",
                    "signature": " testFuzz_AssertNotEq_Bytes_Passbytes32 a, bytes32 b",
                    "full_signature": "function testFuzz_AssertNotEq_Bytes_Pass(bytes32 a, bytes32 b) external   ",
                    "class_method_signature": "StdAssertionsTest.testFuzz_AssertNotEq_Bytes_Passbytes32 a, bytes32 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                ASSERT_NOT_EQ(BYTES)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "test_AssertNotEqUint",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_AssertNotEqUint() public {\n        assertNotEq(uint8(1), uint128(2));\n        assertNotEq(uint64(3), uint64(4));\n    }",
                    "start": "747",
                    "end": "750",
                    "class": "StdAssertionsTest",
                    "signature": " test_AssertNotEqUint",
                    "full_signature": "function test_AssertNotEqUint() public   ",
                    "class_method_signature": "StdAssertionsTest.test_AssertNotEqUint",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                ASSERT_NOT_EQ(UINT)\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/StdUtils.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "exposed_getTokenBalances",
                    "parameters": "address token, address[] memory addresses",
                    "modifiers": "",
                    "return": "returns (uint256[] memory balances)",
                    "body": "function exposed_getTokenBalances(address token, address[] memory addresses)\n        external\n        returns (uint256[] memory balances)\n    {\n        return getTokenBalances(token, addresses);\n    }",
                    "start": "8",
                    "end": "13",
                    "class": "StdUtilsMock",
                    "signature": "returns (uint256[] memory balances) exposed_getTokenBalancesaddress token, address[] memory addresses",
                    "full_signature": "function exposed_getTokenBalances(address token, address[] memory addresses) external   returns (uint256[] memory balances)",
                    "class_method_signature": "StdUtilsMock.exposed_getTokenBalancesaddress token, address[] memory addresses",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// We deploy a mock version so we can properly test expected reverts.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "test_Bound",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_Bound() public {\n        assertEq(bound(uint256(5), 0, 4), 0);\n        assertEq(bound(uint256(0), 69, 69), 69);\n        assertEq(bound(uint256(0), 68, 69), 68);\n        assertEq(bound(uint256(10), 150, 190), 174);\n        assertEq(bound(uint256(300), 2800, 3200), 3107);\n        assertEq(bound(uint256(9999), 1337, 6666), 4669);\n    }",
                    "start": "33",
                    "end": "40",
                    "class": "StdUtilsTest",
                    "signature": " test_Bound",
                    "full_signature": "function test_Bound() public   ",
                    "class_method_signature": "StdUtilsTest.test_Bound",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                     BOUND UINT\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_BoundInt",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_BoundInt() public {\n        assertEq(bound(-3, 0, 4), 2);\n        assertEq(bound(0, -69, -69), -69);\n        assertEq(bound(0, -69, -68), -68);\n        assertEq(bound(-10, 150, 190), 154);\n        assertEq(bound(-300, 2800, 3200), 2908);\n        assertEq(bound(9999, -1337, 6666), 1995);\n    }",
                    "start": "113",
                    "end": "120",
                    "class": "StdUtilsTest",
                    "signature": " test_BoundInt",
                    "full_signature": "function test_BoundInt() public   ",
                    "class_method_signature": "StdUtilsTest.test_BoundInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                     BOUND INT\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_BoundPrivateKey",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_BoundPrivateKey() public {\n        assertEq(boundPrivateKey(0), 1);\n        assertEq(boundPrivateKey(1), 1);\n        assertEq(boundPrivateKey(300), 300);\n        assertEq(boundPrivateKey(9999), 9999);\n        assertEq(boundPrivateKey(SECP256K1_ORDER - 1), SECP256K1_ORDER - 1);\n        assertEq(boundPrivateKey(SECP256K1_ORDER), 1);\n        assertEq(boundPrivateKey(SECP256K1_ORDER + 1), 2);\n        assertEq(boundPrivateKey(UINT256_MAX), UINT256_MAX & SECP256K1_ORDER - 1); // x&y is equivalent to x-x%y\n    }",
                    "start": "207",
                    "end": "216",
                    "class": "StdUtilsTest",
                    "signature": " test_BoundPrivateKey",
                    "full_signature": "function test_BoundPrivateKey() public   ",
                    "class_method_signature": "StdUtilsTest.test_BoundPrivateKey",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                BOUND PRIVATE KEY\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_BytesToUint",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_BytesToUint() external {\n        bytes memory maxUint = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n        bytes memory two = hex\"02\";\n        bytes memory millionEther = hex\"d3c21bcecceda1000000\";\n\n        assertEq(bytesToUint(maxUint), type(uint256).max);\n        assertEq(bytesToUint(two), 2);\n        assertEq(bytesToUint(millionEther), 1_000_000 ether);\n    }",
                    "start": "222",
                    "end": "230",
                    "class": "StdUtilsTest",
                    "signature": " test_BytesToUint",
                    "full_signature": "function test_BytesToUint() external   ",
                    "class_method_signature": "StdUtilsTest.test_BytesToUint",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                   BYTES TO UINT\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "test_ComputeCreateAddress",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_ComputeCreateAddress() external {\n        address deployer = 0x6C9FC64A53c1b71FB3f9Af64d1ae3A4931A5f4E9;\n        uint256 nonce = 14;\n        address createAddress = computeCreateAddress(deployer, nonce);\n        assertEq(createAddress, 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\n    }",
                    "start": "245",
                    "end": "250",
                    "class": "StdUtilsTest",
                    "signature": " test_ComputeCreateAddress",
                    "full_signature": "function test_ComputeCreateAddress() external   ",
                    "class_method_signature": "StdUtilsTest.test_ComputeCreateAddress",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                               COMPUTE CREATE ADDRESS\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "test_ComputeCreate2Address",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_ComputeCreate2Address() external {\n        bytes32 salt = bytes32(uint256(31415));\n        bytes32 initcodeHash = keccak256(abi.encode(0x6080));\n        address deployer = 0x6C9FC64A53c1b71FB3f9Af64d1ae3A4931A5f4E9;\n        address create2Address = computeCreate2Address(salt, initcodeHash, deployer);\n        assertEq(create2Address, 0xB147a5d25748fda14b463EB04B111027C290f4d3);\n    }",
                    "start": "256",
                    "end": "262",
                    "class": "StdUtilsTest",
                    "signature": " test_ComputeCreate2Address",
                    "full_signature": "function test_ComputeCreate2Address() external   ",
                    "class_method_signature": "StdUtilsTest.test_ComputeCreate2Address",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                              COMPUTE CREATE2 ADDRESS\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "setUp",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function setUp() public {\n        // All tests of the `getTokenBalances` method are fork tests using live contracts.\n        vm.createSelectFork({urlOrAlias: \"mainnet\", blockNumber: 16_428_900});\n    }",
                    "start": "287",
                    "end": "290",
                    "class": "StdUtilsForkTest",
                    "signature": " setUp",
                    "full_signature": "function setUp() public   ",
                    "class_method_signature": "StdUtilsForkTest.setUp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                  GET TOKEN BALANCES\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/StdCheats.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "deployCodeHelper",
                    "parameters": "string memory what",
                    "modifiers": "",
                    "return": "",
                    "body": "function deployCodeHelper(string memory what) external {\n        deployCode(what);\n    }",
                    "start": "202",
                    "end": "204",
                    "class": "StdCheatsTest",
                    "signature": " deployCodeHelperstring memory what",
                    "full_signature": "function deployCodeHelper(string memory what) external   ",
                    "class_method_signature": "StdCheatsTest.deployCodeHelperstring memory what",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// We need this so we can call \"this.deployCode\" rather than \"deployCode\" directly\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "exposed_assumeNotBlacklisted",
                    "parameters": "address token, address addr",
                    "modifiers": "view",
                    "return": "",
                    "body": "function exposed_assumeNotBlacklisted(address token, address addr) external view {\n        return assumeNotBlacklisted(token, addr);\n    }",
                    "start": "457",
                    "end": "459",
                    "class": "StdCheatsMock",
                    "signature": " exposed_assumeNotBlacklistedaddress token, address addr",
                    "full_signature": "function exposed_assumeNotBlacklisted(address token, address addr) external  view ",
                    "class_method_signature": "StdCheatsMock.exposed_assumeNotBlacklistedaddress token, address addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// We deploy a mock version so we can properly test expected reverts.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "bar",
                    "parameters": "address expectedSender",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function bar(address expectedSender) public payable {\n        require(msg.sender == expectedSender, \"!prank\");\n    }",
                    "start": "520",
                    "end": "522",
                    "class": "Bar",
                    "signature": " baraddress expectedSender",
                    "full_signature": "function bar(address expectedSender) public  payable ",
                    "class_method_signature": "Bar.baraddress expectedSender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// `HOAX` and `CHANGEPRANK` STDCHEATS\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/StdError.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/mocks/MockERC20.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/mocks/MockERC721.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/compilation/CompilationTestBase.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/compilation/CompilationScript.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/compilation/CompilationScriptBase.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/test/compilation/CompilationTest.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/Test.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/StdCheats.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "assumeNotBlacklisted",
                    "parameters": "address token, address addr",
                    "modifiers": "view",
                    "return": "",
                    "body": "function assumeNotBlacklisted(address token, address addr) internal view virtual {\n        // Nothing to check if `token` is not a contract.\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\");\n\n        bool success;\n        bytes memory returnData;\n\n        // 4-byte selector for `isBlacklisted(address)`, used by USDC.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n\n        // 4-byte selector for `isBlackListed(address)`, used by USDT.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n    }",
                    "start": "209",
                    "end": "227",
                    "class": "StdCheatsSafe",
                    "signature": " assumeNotBlacklistedaddress token, address addr",
                    "full_signature": "function assumeNotBlacklisted(address token, address addr) internal virtual view ",
                    "class_method_signature": "StdCheatsSafe.assumeNotBlacklistedaddress token, address addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Data structures to parse Transaction objects from the broadcast artifact\n// that conform to EIP1559. The Raw structs is what is parsed from the JSON\n// and then converted to the one that is used by the user for better UX.\n// Data structures to parse Transaction objects from the broadcast artifact\n// that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\n// and then converted to the one that is used by the user for better UX.\n// Data structures to parse Receipt objects from the broadcast artifact.\n// The Raw structs is what is parsed from the JSON\n// and then converted to the one that is used by the user for better UX.\n// Data structures to parse the entire broadcast artifact, assuming the\n// transactions conform to EIP1559.\n// Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assumeNoBlacklisted",
                    "parameters": "address token, address addr",
                    "modifiers": "view",
                    "return": "",
                    "body": "function assumeNoBlacklisted(address token, address addr) internal view virtual {\n        assumeNotBlacklisted(token, addr);\n    }",
                    "start": "233",
                    "end": "235",
                    "class": "StdCheatsSafe",
                    "signature": " assumeNoBlacklistedaddress token, address addr",
                    "full_signature": "function assumeNoBlacklisted(address token, address addr) internal virtual view ",
                    "class_method_signature": "StdCheatsSafe.assumeNoBlacklistedaddress token, address addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n// This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for\n// backwards compatibility, since this name was used in the original PR which has already has\n// a release. This function can be removed in a future release once we want a breaking change.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_isPayable",
                    "parameters": "address addr",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function _isPayable(address addr) private returns (bool) {\n        require(\n            addr.balance < UINT256_MAX,\n            \"StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds\"\n        );\n        uint256 origBalanceTest = address(this).balance;\n        uint256 origBalanceAddr = address(addr).balance;\n\n        vm.deal(address(this), 1);\n        (bool success,) = payable(addr).call{value: 1}(\"\");\n\n        // reset balances\n        vm.deal(address(this), origBalanceTest);\n        vm.deal(addr, origBalanceAddr);\n\n        return success;\n    }",
                    "start": "284",
                    "end": "300",
                    "class": "StdCheatsSafe",
                    "signature": "returns (bool) _isPayableaddress addr",
                    "full_signature": "function _isPayable(address addr) private   returns (bool)",
                    "class_method_signature": "StdCheatsSafe._isPayableaddress addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// This function checks whether an address, `addr`, is payable. It works by sending 1 wei to\n// `addr` and checking the `success` return value.\n// NOTE: This function may result in state changes depending on the fallback/receive logic\n// implemented by `addr`, which should be taken into account when this function is used.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "assumePayable",
                    "parameters": "address addr",
                    "modifiers": "",
                    "return": "",
                    "body": "function assumePayable(address addr) internal virtual {\n        vm.assume(_isPayable(addr));\n    }",
                    "start": "305",
                    "end": "307",
                    "class": "StdCheatsSafe",
                    "signature": " assumePayableaddress addr",
                    "full_signature": "function assumePayable(address addr) internal virtual  ",
                    "class_method_signature": "StdCheatsSafe.assumePayableaddress addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// NOTE: This function may result in state changes depending on the fallback/receive logic\n// implemented by `addr`, which should be taken into account when this function is used. See the\n// `_isPayable` method for more information.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "readReceipts",
                    "parameters": "string memory path",
                    "modifiers": "view",
                    "return": "returns (Receipt[] memory)",
                    "body": "function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\n        return rawToConvertedReceipts(rawReceipts);\n    }",
                    "start": "425",
                    "end": "430",
                    "class": "StdCheatsSafe",
                    "signature": "returns (Receipt[] memory) readReceiptsstring memory path",
                    "full_signature": "function readReceipts(string memory path) internal virtual view returns (Receipt[] memory)",
                    "class_method_signature": "StdCheatsSafe.readReceiptsstring memory path",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Analogous to readTransactions, but for receipts.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deployCode",
                    "parameters": "string memory what, bytes memory args",
                    "modifiers": "",
                    "return": "returns (address addr)",
                    "body": "function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes): Deployment failed.\");\n    }",
                    "start": "490",
                    "end": "498",
                    "class": "StdCheatsSafe",
                    "signature": "returns (address addr) deployCodestring memory what, bytes memory args",
                    "full_signature": "function deployCode(string memory what, bytes memory args) internal virtual  returns (address addr)",
                    "class_method_signature": "StdCheatsSafe.deployCodestring memory what, bytes memory args",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Deploy a contract by fetching the contract bytecode from\n// the artifacts directory\n// e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deployCode",
                    "parameters": "string memory what, bytes memory args, uint256 val",
                    "modifiers": "",
                    "return": "returns (address addr)",
                    "body": "function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes,uint256): Deployment failed.\");\n    }",
                    "start": "511",
                    "end": "519",
                    "class": "StdCheatsSafe",
                    "signature": "returns (address addr) deployCodestring memory what, bytes memory args, uint256 val",
                    "full_signature": "function deployCode(string memory what, bytes memory args, uint256 val) internal virtual  returns (address addr)",
                    "class_method_signature": "StdCheatsSafe.deployCodestring memory what, bytes memory args, uint256 val",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev deploy contract with value on construction\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "makeAddrAndKey",
                    "parameters": "string memory name",
                    "modifiers": "",
                    "return": "returns (address addr, uint256 privateKey)",
                    "body": "function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\n        addr = vm.addr(privateKey);\n        vm.label(addr, name);\n    }",
                    "start": "532",
                    "end": "536",
                    "class": "StdCheatsSafe",
                    "signature": "returns (address addr, uint256 privateKey) makeAddrAndKeystring memory name",
                    "full_signature": "function makeAddrAndKey(string memory name) internal virtual  returns (address addr, uint256 privateKey)",
                    "class_method_signature": "StdCheatsSafe.makeAddrAndKeystring memory name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// creates a labeled address and the corresponding private key\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "makeAddr",
                    "parameters": "string memory name",
                    "modifiers": "",
                    "return": "returns (address addr)",
                    "body": "function makeAddr(string memory name) internal virtual returns (address addr) {\n        (addr,) = makeAddrAndKey(name);\n    }",
                    "start": "539",
                    "end": "541",
                    "class": "StdCheatsSafe",
                    "signature": "returns (address addr) makeAddrstring memory name",
                    "full_signature": "function makeAddr(string memory name) internal virtual  returns (address addr)",
                    "class_method_signature": "StdCheatsSafe.makeAddrstring memory name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// creates a labeled address\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "destroyAccount",
                    "parameters": "address who, address beneficiary",
                    "modifiers": "",
                    "return": "",
                    "body": "function destroyAccount(address who, address beneficiary) internal virtual {\n        uint256 currBalance = who.balance;\n        vm.etch(who, abi.encode());\n        vm.deal(who, 0);\n        vm.resetNonce(who);\n\n        uint256 beneficiaryBalance = beneficiary.balance;\n        vm.deal(beneficiary, currBalance + beneficiaryBalance);\n    }",
                    "start": "547",
                    "end": "555",
                    "class": "StdCheatsSafe",
                    "signature": " destroyAccountaddress who, address beneficiary",
                    "full_signature": "function destroyAccount(address who, address beneficiary) internal virtual  ",
                    "class_method_signature": "StdCheatsSafe.destroyAccountaddress who, address beneficiary",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Destroys an account immediately, sending the balance to beneficiary.\n// Destroying means: balance will be zero, code will be empty, and nonce will be 0\n// This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce\n// only after tx ends, this will run immediately.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "makeAccount",
                    "parameters": "string memory name",
                    "modifiers": "",
                    "return": "returns (Account memory account)",
                    "body": "function makeAccount(string memory name) internal virtual returns (Account memory account) {\n        (account.addr, account.key) = makeAddrAndKey(name);\n    }",
                    "start": "558",
                    "end": "560",
                    "class": "StdCheatsSafe",
                    "signature": "returns (Account memory account) makeAccountstring memory name",
                    "full_signature": "function makeAccount(string memory name) internal virtual  returns (Account memory account)",
                    "class_method_signature": "StdCheatsSafe.makeAccountstring memory name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// creates a struct containing both a labeled address and the corresponding private key\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_viewChainId",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256 chainId)",
                    "body": "function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }",
                    "start": "619",
                    "end": "626",
                    "class": "StdCheatsSafe",
                    "signature": "returns (uint256 chainId) _viewChainId",
                    "full_signature": "function _viewChainId() private  view returns (uint256 chainId)",
                    "class_method_signature": "StdCheatsSafe._viewChainId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n// compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n// can't simply access the chain ID in a normal view or pure function because the solc View Pure\n// Checker changed `chainid` from pure to view in 0.8.0.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "skip",
                    "parameters": "uint256 time",
                    "modifiers": "",
                    "return": "",
                    "body": "function skip(uint256 time) internal virtual {\n        vm.warp(block.timestamp + time);\n    }",
                    "start": "647",
                    "end": "649",
                    "class": "StdCheats",
                    "signature": " skipuint256 time",
                    "full_signature": "function skip(uint256 time) internal virtual  ",
                    "class_method_signature": "StdCheats.skipuint256 time",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Skip forward or rewind time by the specified number of seconds\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "hoax",
                    "parameters": "address msgSender",
                    "modifiers": "",
                    "return": "",
                    "body": "function hoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender);\n    }",
                    "start": "656",
                    "end": "659",
                    "class": "StdCheats",
                    "signature": " hoaxaddress msgSender",
                    "full_signature": "function hoax(address msgSender) internal virtual  ",
                    "class_method_signature": "StdCheats.hoaxaddress msgSender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Setup a prank from an address that has some ether\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "startHoax",
                    "parameters": "address msgSender",
                    "modifiers": "",
                    "return": "",
                    "body": "function startHoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender);\n    }",
                    "start": "677",
                    "end": "680",
                    "class": "StdCheats",
                    "signature": " startHoaxaddress msgSender",
                    "full_signature": "function startHoax(address msgSender) internal virtual  ",
                    "class_method_signature": "StdCheats.startHoaxaddress msgSender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Start perpetual prank from an address that has some ether\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "startHoax",
                    "parameters": "address msgSender, address origin",
                    "modifiers": "",
                    "return": "",
                    "body": "function startHoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender, origin);\n    }",
                    "start": "689",
                    "end": "692",
                    "class": "StdCheats",
                    "signature": " startHoaxaddress msgSender, address origin",
                    "full_signature": "function startHoax(address msgSender, address origin) internal virtual  ",
                    "class_method_signature": "StdCheats.startHoaxaddress msgSender, address origin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Start perpetual prank from an address that has some ether\n// tx.origin is set to the origin parameter\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deal",
                    "parameters": "address to, uint256 give",
                    "modifiers": "",
                    "return": "",
                    "body": "function deal(address to, uint256 give) internal virtual {\n        vm.deal(to, give);\n    }",
                    "start": "712",
                    "end": "714",
                    "class": "StdCheats",
                    "signature": " dealaddress to, uint256 give",
                    "full_signature": "function deal(address to, uint256 give) internal virtual  ",
                    "class_method_signature": "StdCheats.dealaddress to, uint256 give",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// The same as Vm's `deal`\n// Use the alternative signature for ERC20 tokens\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deal",
                    "parameters": "address token, address to, uint256 give",
                    "modifiers": "",
                    "return": "",
                    "body": "function deal(address token, address to, uint256 give) internal virtual {\n        deal(token, to, give, false);\n    }",
                    "start": "718",
                    "end": "720",
                    "class": "StdCheats",
                    "signature": " dealaddress token, address to, uint256 give",
                    "full_signature": "function deal(address token, address to, uint256 give) internal virtual  ",
                    "class_method_signature": "StdCheats.dealaddress token, address to, uint256 give",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Set the balance of an account for any ERC20 token\n// Use the alternative signature to update `totalSupply`\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "dealERC1155",
                    "parameters": "address token, address to, uint256 id, uint256 give",
                    "modifiers": "",
                    "return": "",
                    "body": "function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\n        dealERC1155(token, to, id, give, false);\n    }",
                    "start": "724",
                    "end": "726",
                    "class": "StdCheats",
                    "signature": " dealERC1155address token, address to, uint256 id, uint256 give",
                    "full_signature": "function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual  ",
                    "class_method_signature": "StdCheats.dealERC1155address token, address to, uint256 id, uint256 give",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Set the balance of an account for any ERC1155 token\n// Use the alternative signature to update `totalSupply`\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "console2_log_StdCheats",
                    "parameters": "string memory p0",
                    "modifiers": "view",
                    "return": "",
                    "body": "function console2_log_StdCheats(string memory p0) private view {\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string)\", p0));\n        status;\n    }",
                    "start": "813",
                    "end": "816",
                    "class": "StdCheats",
                    "signature": " console2_log_StdCheatsstring memory p0",
                    "full_signature": "function console2_log_StdCheats(string memory p0) private  view ",
                    "class_method_signature": "StdCheats.console2_log_StdCheatsstring memory p0",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/StdJson.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/safeconsole.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/Script.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/StdStyle.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/Vm.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/StdUtils.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_bound",
                    "parameters": "uint256 x, uint256 min, uint256 max",
                    "modifiers": "pure",
                    "return": "returns (uint256 result)",
                    "body": "function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\n        if (x >= min && x <= max) return x;\n\n        uint256 size = max - min + 1;\n\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\n        // This helps ensure coverage of the min/max values.\n        if (x <= 3 && size > x) return min + x;\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\n\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\n        if (x > max) {\n            uint256 diff = x - max;\n            uint256 rem = diff % size;\n            if (rem == 0) return max;\n            result = min + rem - 1;\n        } else if (x < min) {\n            uint256 diff = min - x;\n            uint256 rem = diff % size;\n            if (rem == 0) return min;\n            result = max - rem + 1;\n        }\n    }",
                    "start": "33",
                    "end": "58",
                    "class": "StdUtils",
                    "signature": "returns (uint256 result) _bounduint256 x, uint256 min, uint256 max",
                    "full_signature": "function _bound(uint256 x, uint256 min, uint256 max) internal virtual pure returns (uint256 result)",
                    "class_method_signature": "StdUtils._bounduint256 x, uint256 min, uint256 max",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n// Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n/*//////////////////////////////////////////////////////////////////////////\n                                 INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "computeCreateAddress",
                    "parameters": "address deployer, uint256 nonce",
                    "modifiers": "pure",
                    "return": "returns (address)",
                    "body": "function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\n        console2_log_StdUtils(\"computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.\");\n        return vm.computeCreateAddress(deployer, nonce);\n    }",
                    "start": "101",
                    "end": "104",
                    "class": "StdUtils",
                    "signature": "returns (address) computeCreateAddressaddress deployer, uint256 nonce",
                    "full_signature": "function computeCreateAddress(address deployer, uint256 nonce) internal virtual pure returns (address)",
                    "class_method_signature": "StdUtils.computeCreateAddressaddress deployer, uint256 nonce",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\n/// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "computeCreate2Address",
                    "parameters": "bytes32 salt, bytes32 initCodeHash",
                    "modifiers": "pure",
                    "return": "returns (address)",
                    "body": "function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initCodeHash);\n    }",
                    "start": "117",
                    "end": "120",
                    "class": "StdUtils",
                    "signature": "returns (address) computeCreate2Addressbytes32 salt, bytes32 initCodeHash",
                    "full_signature": "function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal  pure returns (address)",
                    "class_method_signature": "StdUtils.computeCreate2Addressbytes32 salt, bytes32 initCodeHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deployMockERC20",
                    "parameters": "string memory name, string memory symbol, uint8 decimals",
                    "modifiers": "",
                    "return": "returns (MockERC20 mock)",
                    "body": "function deployMockERC20(string memory name, string memory symbol, uint8 decimals)\n        internal\n        returns (MockERC20 mock)\n    {\n        mock = new MockERC20();\n        mock.initialize(name, symbol, decimals);\n    }",
                    "start": "123",
                    "end": "129",
                    "class": "StdUtils",
                    "signature": "returns (MockERC20 mock) deployMockERC20string memory name, string memory symbol, uint8 decimals",
                    "full_signature": "function deployMockERC20(string memory name, string memory symbol, uint8 decimals) internal   returns (MockERC20 mock)",
                    "class_method_signature": "StdUtils.deployMockERC20string memory name, string memory symbol, uint8 decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev returns an initialized mock ERC20 contract\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deployMockERC721",
                    "parameters": "string memory name, string memory symbol",
                    "modifiers": "",
                    "return": "returns (MockERC721 mock)",
                    "body": "function deployMockERC721(string memory name, string memory symbol) internal returns (MockERC721 mock) {\n        mock = new MockERC721();\n        mock.initialize(name, symbol);\n    }",
                    "start": "132",
                    "end": "135",
                    "class": "StdUtils",
                    "signature": "returns (MockERC721 mock) deployMockERC721string memory name, string memory symbol",
                    "full_signature": "function deployMockERC721(string memory name, string memory symbol) internal   returns (MockERC721 mock)",
                    "class_method_signature": "StdUtils.deployMockERC721string memory name, string memory symbol",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev returns an initialized mock ERC721 contract\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "hashInitCode",
                    "parameters": "bytes memory creationCode",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\n        return hashInitCode(creationCode, \"\");\n    }",
                    "start": "139",
                    "end": "141",
                    "class": "StdUtils",
                    "signature": "returns (bytes32) hashInitCodebytes memory creationCode",
                    "full_signature": "function hashInitCode(bytes memory creationCode) internal  pure returns (bytes32)",
                    "class_method_signature": "StdUtils.hashInitCodebytes memory creationCode",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\n/// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "hashInitCode",
                    "parameters": "bytes memory creationCode, bytes memory args",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creationCode, args));\n    }",
                    "start": "146",
                    "end": "148",
                    "class": "StdUtils",
                    "signature": "returns (bytes32) hashInitCodebytes memory creationCode, bytes memory args",
                    "full_signature": "function hashInitCode(bytes memory creationCode, bytes memory args) internal  pure returns (bytes32)",
                    "class_method_signature": "StdUtils.hashInitCodebytes memory creationCode, bytes memory args",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\n/// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n/// @param args the ABI-encoded arguments to the constructor of C\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "getTokenBalances",
                    "parameters": "address token, address[] memory addresses",
                    "modifiers": "",
                    "return": "returns (uint256[] memory balances)",
                    "body": "function getTokenBalances(address token, address[] memory addresses)\n        internal\n        virtual\n        returns (uint256[] memory balances)\n    {\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\n\n        // ABI encode the aggregate call to Multicall3.\n        uint256 length = addresses.length;\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\n        }\n\n        // Make the aggregate call.\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\n\n        // ABI decode the return data and return the balances.\n        balances = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            balances[i] = abi.decode(returnData[i], (uint256));\n        }\n    }",
                    "start": "151",
                    "end": "178",
                    "class": "StdUtils",
                    "signature": "returns (uint256[] memory balances) getTokenBalancesaddress token, address[] memory addresses",
                    "full_signature": "function getTokenBalances(address token, address[] memory addresses) internal virtual  returns (uint256[] memory balances)",
                    "class_method_signature": "StdUtils.getTokenBalancesaddress token, address[] memory addresses",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "addressFromLast20Bytes",
                    "parameters": "bytes32 bytesValue",
                    "modifiers": "pure",
                    "return": "returns (address)",
                    "body": "function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }",
                    "start": "184",
                    "end": "186",
                    "class": "StdUtils",
                    "signature": "returns (address) addressFromLast20Bytesbytes32 bytesValue",
                    "full_signature": "function addressFromLast20Bytes(bytes32 bytesValue) private  pure returns (address)",
                    "class_method_signature": "StdUtils.addressFromLast20Bytesbytes32 bytesValue",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                 PRIVATE FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_castLogPayloadViewToPure",
                    "parameters": "function(bytes memory) internal view fnIn",
                    "modifiers": "pure",
                    "return": "returns (function(bytes memory) internal pure fnOut)",
                    "body": "function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)\n        internal\n        pure\n        returns (function(bytes memory) internal pure fnOut)\n    {\n        assembly {\n            fnOut := fnIn\n        }\n    }",
                    "start": "191",
                    "end": "199",
                    "class": "StdUtils",
                    "signature": "returns (function(bytes memory) internal pure fnOut) _castLogPayloadViewToPurefunction(bytes memory) internal view fnIn",
                    "full_signature": "function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn) internal  pure returns (function(bytes memory) internal pure fnOut)",
                    "class_method_signature": "StdUtils._castLogPayloadViewToPurefunction(bytes memory) internal view fnIn",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// This section is used to prevent the compilation of console, which shortens the compilation time when console is\n// not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid\n// any breaking changes to function signatures.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/StdStorage.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/StdInvariant.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "excludeContract",
                    "parameters": "address newExcludedContract_",
                    "modifiers": "",
                    "return": "",
                    "body": "function excludeContract(address newExcludedContract_) internal {\n        _excludedContracts.push(newExcludedContract_);\n    }",
                    "start": "33",
                    "end": "35",
                    "class": "StdInvariant",
                    "signature": " excludeContractaddress newExcludedContract_",
                    "full_signature": "function excludeContract(address newExcludedContract_) internal   ",
                    "class_method_signature": "StdInvariant.excludeContractaddress newExcludedContract_",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Functions for users:\n// These are intended to be called in tests.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "excludeArtifacts",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string[] memory excludedArtifacts_)",
                    "body": "function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }",
                    "start": "72",
                    "end": "74",
                    "class": "StdInvariant",
                    "signature": "returns (string[] memory excludedArtifacts_) excludeArtifacts",
                    "full_signature": "function excludeArtifacts() public  view returns (string[] memory excludedArtifacts_)",
                    "class_method_signature": "StdInvariant.excludeArtifacts",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Functions for forge:\n// These are called by forge to run invariant tests and don't need to be called in tests.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/StdChains.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "getChain",
                    "parameters": "string memory chainAlias",
                    "modifiers": "",
                    "return": "returns (Chain memory chain)",
                    "body": "function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\n        require(bytes(chainAlias).length != 0, \"StdChains getChain(string): Chain alias cannot be the empty string.\");\n\n        initializeStdChains();\n        chain = chains[chainAlias];\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(string): Chain with alias \\\"\", chainAlias, \"\\\" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }",
                    "start": "69",
                    "end": "80",
                    "class": "StdChains",
                    "signature": "returns (Chain memory chain) getChainstring memory chainAlias",
                    "full_signature": "function getChain(string memory chainAlias) internal virtual  returns (Chain memory chain)",
                    "class_method_signature": "StdChains.getChainstring memory chainAlias",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\n// Maps from the chain's alias to it's default RPC URL.\n// Maps from a chain ID to it's alias.\n// The RPC URL will be fetched from config or defaultRpcUrls if possible.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "setChain",
                    "parameters": "string memory chainAlias, ChainData memory chain",
                    "modifiers": "",
                    "return": "",
                    "body": "function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\n        require(\n            bytes(chainAlias).length != 0,\n            \"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\"\n        );\n\n        require(chain.chainId != 0, \"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\n\n        initializeStdChains();\n        string memory foundAlias = idToAlias[chain.chainId];\n\n        require(\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\n            string(\n                abi.encodePacked(\n                    \"StdChains setChain(string,ChainData): Chain ID \",\n                    vm.toString(chain.chainId),\n                    \" already used by \\\"\",\n                    foundAlias,\n                    \"\\\".\"\n                )\n            )\n        );\n\n        uint256 oldChainId = chains[chainAlias].chainId;\n        delete idToAlias[oldChainId];\n\n        chains[chainAlias] =\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\n        idToAlias[chain.chainId] = chainAlias;\n    }",
                    "start": "98",
                    "end": "128",
                    "class": "StdChains",
                    "signature": " setChainstring memory chainAlias, ChainData memory chain",
                    "full_signature": "function setChain(string memory chainAlias, ChainData memory chain) internal virtual  ",
                    "class_method_signature": "StdChains.setChainstring memory chainAlias, ChainData memory chain",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// set chain info, with priority to argument's rpcUrl field.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "setChain",
                    "parameters": "string memory chainAlias, Chain memory chain",
                    "modifiers": "",
                    "return": "",
                    "body": "function setChain(string memory chainAlias, Chain memory chain) internal virtual {\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\n    }",
                    "start": "131",
                    "end": "133",
                    "class": "StdChains",
                    "signature": " setChainstring memory chainAlias, Chain memory chain",
                    "full_signature": "function setChain(string memory chainAlias, Chain memory chain) internal virtual  ",
                    "class_method_signature": "StdChains.setChainstring memory chainAlias, Chain memory chain",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// set chain info, with priority to argument's rpcUrl field.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "getChainWithUpdatedRpcUrl",
                    "parameters": "string memory chainAlias, Chain memory chain",
                    "modifiers": "view",
                    "return": "returns (Chain memory)",
                    "body": "function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain)\n        private\n        view\n        returns (Chain memory)\n    {\n        if (bytes(chain.rpcUrl).length == 0) {\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\n                chain.rpcUrl = configRpcUrl;\n            } catch (bytes memory err) {\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \"_RPC_URL\"));\n                if (fallbackToDefaultRpcUrls) {\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\n                } else {\n                    chain.rpcUrl = vm.envString(envName);\n                }\n                // Distinguish 'not found' from 'cannot read'\n                // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions\n                bytes memory oldNotFoundError =\n                    abi.encodeWithSignature(\"CheatCodeError\", string(abi.encodePacked(\"invalid rpc url \", chainAlias)));\n                bytes memory newNotFoundError = abi.encodeWithSignature(\n                    \"CheatcodeError(string)\", string(abi.encodePacked(\"invalid rpc url: \", chainAlias))\n                );\n                bytes32 errHash = keccak256(err);\n                if (\n                    (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))\n                        || bytes(chain.rpcUrl).length == 0\n                ) {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, err), mload(err))\n                    }\n                }\n            }\n        }\n        return chain;\n    }",
                    "start": "151",
                    "end": "186",
                    "class": "StdChains",
                    "signature": "returns (Chain memory) getChainWithUpdatedRpcUrlstring memory chainAlias, Chain memory chain",
                    "full_signature": "function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain) private  view returns (Chain memory)",
                    "class_method_signature": "StdChains.getChainWithUpdatedRpcUrlstring memory chainAlias, Chain memory chain",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// lookup rpcUrl, in descending order of priority:\n// current -> config (foundry.toml) -> environment variable -> default\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "setChainWithDefaultRpcUrl",
                    "parameters": "string memory chainAlias, ChainData memory chain",
                    "modifiers": "",
                    "return": "",
                    "body": "function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\n        string memory rpcUrl = chain.rpcUrl;\n        defaultRpcUrls[chainAlias] = rpcUrl;\n        chain.rpcUrl = \"\";\n        setChain(chainAlias, chain);\n        chain.rpcUrl = rpcUrl; // restore argument\n    }",
                    "start": "241",
                    "end": "247",
                    "class": "StdChains",
                    "signature": " setChainWithDefaultRpcUrlstring memory chainAlias, ChainData memory chain",
                    "full_signature": "function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private   ",
                    "class_method_signature": "StdChains.setChainWithDefaultRpcUrlstring memory chainAlias, ChainData memory chain",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// set chain info, with priority to chainAlias' rpc url in foundry.toml\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/console.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/console2.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/StdMath.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/StdError.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/Base.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/StdAssertions.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "assertEqUint",
                    "parameters": "uint256 a, uint256 b",
                    "modifiers": "",
                    "return": "",
                    "body": "function assertEqUint(uint256 a, uint256 b) internal virtual {\n        assertEq(uint256(a), uint256(b));\n    }",
                    "start": "101",
                    "end": "103",
                    "class": "StdAssertions",
                    "signature": " assertEqUintuint256 a, uint256 b",
                    "full_signature": "function assertEqUint(uint256 a, uint256 b) internal virtual  ",
                    "class_method_signature": "StdAssertions.assertEqUintuint256 a, uint256 b",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Legacy helper\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assertApproxEqRel",
                    "parameters": "uint256 a, uint256 b, uint256 maxPercentDelta",
                    "modifiers": "",
                    "return": "",
                    "body": "function assertApproxEqRel(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log(\"Error: a ~= b not satisfied [uint]\");\n            emit log_named_uint(\"        Left\", a);\n            emit log_named_uint(\"       Right\", b);\n            emit log_named_decimal_uint(\" Max % Delta\", maxPercentDelta * 100, 18);\n            emit log_named_decimal_uint(\"     % Delta\", percentDelta * 100, 18);\n            fail();\n        }\n    }",
                    "start": "199",
                    "end": "216",
                    "class": "StdAssertions",
                    "signature": " assertApproxEqReluint256 a, uint256 b, uint256 maxPercentDelta",
                    "full_signature": "function assertApproxEqRel(uint256 a, uint256 b, uint256 maxPercentDelta) internal virtual  ",
                    "class_method_signature": "StdAssertions.assertApproxEqReluint256 a, uint256 b, uint256 maxPercentDelta",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'// An 18 decimal fixed point number, where 1e18 == 100%'",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assertApproxEqRel",
                    "parameters": "uint256 a, uint256 b, uint256 maxPercentDelta, string memory err",
                    "modifiers": "",
                    "return": "",
                    "body": "function assertApproxEqRel(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        string memory err\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log_named_string(\"Error\", err);\n            assertApproxEqRel(a, b, maxPercentDelta);\n        }\n    }",
                    "start": "218",
                    "end": "232",
                    "class": "StdAssertions",
                    "signature": " assertApproxEqReluint256 a, uint256 b, uint256 maxPercentDelta, string memory err",
                    "full_signature": "function assertApproxEqRel(uint256 a, uint256 b, uint256 maxPercentDelta, string memory err) internal virtual  ",
                    "class_method_signature": "StdAssertions.assertApproxEqReluint256 a, uint256 b, uint256 maxPercentDelta, string memory err",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'// An 18 decimal fixed point number, where 1e18 == 100%'",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assertApproxEqRelDecimal",
                    "parameters": "uint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals",
                    "modifiers": "",
                    "return": "",
                    "body": "function assertApproxEqRelDecimal(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log(\"Error: a ~= b not satisfied [uint]\");\n            emit log_named_decimal_uint(\"        Left\", a, decimals);\n            emit log_named_decimal_uint(\"       Right\", b, decimals);\n            emit log_named_decimal_uint(\" Max % Delta\", maxPercentDelta * 100, 18);\n            emit log_named_decimal_uint(\"     % Delta\", percentDelta * 100, 18);\n            fail();\n        }\n    }",
                    "start": "234",
                    "end": "252",
                    "class": "StdAssertions",
                    "signature": " assertApproxEqRelDecimaluint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals",
                    "full_signature": "function assertApproxEqRelDecimal(uint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals) internal virtual  ",
                    "class_method_signature": "StdAssertions.assertApproxEqRelDecimaluint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'// An 18 decimal fixed point number, where 1e18 == 100%'",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assertApproxEqRelDecimal",
                    "parameters": "uint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals, string memory err",
                    "modifiers": "",
                    "return": "",
                    "body": "function assertApproxEqRelDecimal(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals,\n        string memory err\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log_named_string(\"Error\", err);\n            assertApproxEqRelDecimal(a, b, maxPercentDelta, decimals);\n        }\n    }",
                    "start": "254",
                    "end": "269",
                    "class": "StdAssertions",
                    "signature": " assertApproxEqRelDecimaluint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals, string memory err",
                    "full_signature": "function assertApproxEqRelDecimal(uint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals, string memory err) internal virtual  ",
                    "class_method_signature": "StdAssertions.assertApproxEqRelDecimaluint256 a, uint256 b, uint256 maxPercentDelta, uint256 decimals, string memory err",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'// An 18 decimal fixed point number, where 1e18 == 100%'",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/interfaces/IERC165.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/interfaces/IERC20.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/interfaces/IERC721.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/interfaces/IERC4626.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/interfaces/IERC1155.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/interfaces/IMulticall3.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/mocks/MockERC20.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "initialize",
                    "parameters": "string memory _name, string memory _symbol, uint8 _decimals",
                    "modifiers": "",
                    "return": "",
                    "body": "function initialize(string memory _name, string memory _symbol, uint8 _decimals) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = _pureChainId();\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n\n        initialized = true;\n    }",
                    "start": "54",
                    "end": "65",
                    "class": "MockERC20",
                    "signature": " initializestring memory _name, string memory _symbol, uint8 _decimals",
                    "full_signature": "function initialize(string memory _name, string memory _symbol, uint8 _decimals) public   ",
                    "class_method_signature": "MockERC20.initializestring memory _name, string memory _symbol, uint8 _decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n/*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n/*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n/*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n/*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n/// @dev A bool to track whether the contract has been initialized.\n/// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n/// syntaxes, we add an initialization function that can be called only once.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "approve",
                    "parameters": "address spender, uint256 amount",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }",
                    "start": "71",
                    "end": "77",
                    "class": "MockERC20",
                    "signature": "returns (bool) approveaddress spender, uint256 amount",
                    "full_signature": "function approve(address spender, uint256 amount) public virtual  returns (bool)",
                    "class_method_signature": "MockERC20.approveaddress spender, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "permit",
                    "parameters": "address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "modifiers": "",
                    "return": "",
                    "body": "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        public\n        virtual\n    {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        address recoveredAddress = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                            ),\n                            owner,\n                            spender,\n                            value,\n                            nonces[owner]++,\n                            deadline\n                        )\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n        allowance[recoveredAddress][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }",
                    "start": "105",
                    "end": "140",
                    "class": "MockERC20",
                    "signature": " permitaddress owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "full_signature": "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual  ",
                    "class_method_signature": "MockERC20.permitaddress owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_mint",
                    "parameters": "address to, uint256 amount",
                    "modifiers": "",
                    "return": "",
                    "body": "function _mint(address to, uint256 amount) internal virtual {\n        totalSupply = _add(totalSupply, amount);\n        balanceOf[to] = _add(balanceOf[to], amount);\n\n        emit Transfer(address(0), to, amount);\n    }",
                    "start": "162",
                    "end": "167",
                    "class": "MockERC20",
                    "signature": " _mintaddress to, uint256 amount",
                    "full_signature": "function _mint(address to, uint256 amount) internal virtual  ",
                    "class_method_signature": "MockERC20._mintaddress to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_add",
                    "parameters": "uint256 a, uint256 b",
                    "modifiers": "pure",
                    "return": "returns (uint256)",
                    "body": "function _add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ERC20: addition overflow\");\n        return c;\n    }",
                    "start": "180",
                    "end": "184",
                    "class": "MockERC20",
                    "signature": "returns (uint256) _adduint256 a, uint256 b",
                    "full_signature": "function _add(uint256 a, uint256 b) internal  pure returns (uint256)",
                    "class_method_signature": "MockERC20._adduint256 a, uint256 b",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MATH LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_viewChainId",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256 chainId)",
                    "body": "function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }",
                    "start": "199",
                    "end": "206",
                    "class": "MockERC20",
                    "signature": "returns (uint256 chainId) _viewChainId",
                    "full_signature": "function _viewChainId() private  view returns (uint256 chainId)",
                    "class_method_signature": "MockERC20._viewChainId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n// We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n// compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n// can't simply access the chain ID in a normal view or pure function because the solc View Pure\n// Checker changed `chainid` from pure to view in 0.8.0.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/lib/forge-std/src/mocks/MockERC721.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "tokenURI",
                    "parameters": "uint256 id",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function tokenURI(uint256 id) public view virtual returns (string memory) {}",
                    "start": "25",
                    "end": "25",
                    "class": "MockERC721",
                    "signature": "returns (string memory) tokenURIuint256 id",
                    "full_signature": "function tokenURI(uint256 id) public virtual view returns (string memory)",
                    "class_method_signature": "MockERC721.tokenURIuint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n/*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "ownerOf",
                    "parameters": "uint256 id",
                    "modifiers": "view",
                    "return": "returns (address owner)",
                    "body": "function ownerOf(uint256 id) public view virtual returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }",
                    "start": "35",
                    "end": "37",
                    "class": "MockERC721",
                    "signature": "returns (address owner) ownerOfuint256 id",
                    "full_signature": "function ownerOf(uint256 id) public virtual view returns (address owner)",
                    "class_method_signature": "MockERC721.ownerOfuint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "initialize",
                    "parameters": "string memory _name, string memory _symbol",
                    "modifiers": "",
                    "return": "",
                    "body": "function initialize(string memory _name, string memory _symbol) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        name = _name;\n        symbol = _symbol;\n\n        initialized = true;\n    }",
                    "start": "62",
                    "end": "69",
                    "class": "MockERC721",
                    "signature": " initializestring memory _name, string memory _symbol",
                    "full_signature": "function initialize(string memory _name, string memory _symbol) public   ",
                    "class_method_signature": "MockERC721.initializestring memory _name, string memory _symbol",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n/*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n/// @dev A bool to track whether the contract has been initialized.\n/// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n/// syntaxes, we add an initialization function that can be called only once.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "approve",
                    "parameters": "address spender, uint256 id",
                    "modifiers": "",
                    "return": "",
                    "body": "function approve(address spender, uint256 id) public virtual {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }",
                    "start": "75",
                    "end": "83",
                    "class": "MockERC721",
                    "signature": " approveaddress spender, uint256 id",
                    "full_signature": "function approve(address spender, uint256 id) public virtual  ",
                    "class_method_signature": "MockERC721.approveaddress spender, uint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "pure",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }",
                    "start": "139",
                    "end": "143",
                    "class": "MockERC721",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual pure returns (bool)",
                    "class_method_signature": "MockERC721.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_mint",
                    "parameters": "address to, uint256 id",
                    "modifiers": "",
                    "return": "",
                    "body": "function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }",
                    "start": "149",
                    "end": "161",
                    "class": "MockERC721",
                    "signature": " _mintaddress to, uint256 id",
                    "full_signature": "function _mint(address to, uint256 id) internal virtual  ",
                    "class_method_signature": "MockERC721._mintaddress to, uint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_safeMint",
                    "parameters": "address to, uint256 id",
                    "modifiers": "",
                    "return": "",
                    "body": "function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }",
                    "start": "181",
                    "end": "190",
                    "class": "MockERC721",
                    "signature": " _safeMintaddress to, uint256 id",
                    "full_signature": "function _safeMint(address to, uint256 id) internal virtual  ",
                    "class_method_signature": "MockERC721._safeMintaddress to, uint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_isContract",
                    "parameters": "address _addr",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isContract(address _addr) private view returns (bool) {\n        uint256 codeLength;\n\n        // Assembly required for versions < 0.8.0 to check extcodesize.\n        assembly {\n            codeLength := extcodesize(_addr)\n        }\n\n        return codeLength > 0;\n    }",
                    "start": "207",
                    "end": "216",
                    "class": "MockERC721",
                    "signature": "returns (bool) _isContractaddress _addr",
                    "full_signature": "function _isContract(address _addr) private  view returns (bool)",
                    "class_method_signature": "MockERC721._isContractaddress _addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/utils/Create2.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/utils/Packing.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/utils/ShortStrings.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_assertRoundtripShort",
                    "parameters": "string memory input",
                    "modifiers": "",
                    "return": "",
                    "body": "function _assertRoundtripShort(string memory input) internal {\n        ShortString short = ShortStrings.toShortString(input);\n        string memory output = ShortStrings.toString(short);\n        assertEq(input, output);\n    }",
                    "start": "69",
                    "end": "73",
                    "class": "ShortStringsTest",
                    "signature": " _assertRoundtripShortstring memory input",
                    "full_signature": "function _assertRoundtripShort(string memory input) internal   ",
                    "class_method_signature": "ShortStringsTest._assertRoundtripShortstring memory input",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// Assertions\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "toShortString",
                    "parameters": "string memory input",
                    "modifiers": "pure",
                    "return": "returns (ShortString)",
                    "body": "function toShortString(string memory input) external pure returns (ShortString) {\n        return ShortStrings.toShortString(input);\n    }",
                    "start": "102",
                    "end": "104",
                    "class": "ShortStringsTest",
                    "signature": "returns (ShortString) toShortStringstring memory input",
                    "full_signature": "function toShortString(string memory input) external  pure returns (ShortString)",
                    "class_method_signature": "ShortStringsTest.toShortStringstring memory input",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// Helpers\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/utils/Arrays.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_assertSort",
                    "parameters": "uint256[] memory values",
                    "modifiers": "",
                    "return": "",
                    "body": "function _assertSort(uint256[] memory values) internal {\n        for (uint256 i = 1; i < values.length; ++i) {\n            assertLe(values[i - 1], values[i]);\n        }\n    }",
                    "start": "26",
                    "end": "30",
                    "class": "ArraysTest",
                    "signature": " _assertSortuint256[] memory values",
                    "full_signature": "function _assertSort(uint256[] memory values) internal   ",
                    "class_method_signature": "ArraysTest._assertSortuint256[] memory values",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// Asserts\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/utils/Base64.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/utils/SlotDerivation.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/utils/cryptography/P256.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "testVerify",
                    "parameters": "bytes32 digest, uint256 seed",
                    "modifiers": "",
                    "return": "",
                    "body": "function testVerify(bytes32 digest, uint256 seed) public {\n        uint256 privateKey = _asPrivateKey(seed);\n\n        (bytes32 x, bytes32 y) = P256PublicKey.getPublicKey(privateKey);\n        (bytes32 r, bytes32 s) = vm.signP256(privateKey, digest);\n        s = _ensureLowerS(s);\n        assertTrue(P256.verify(digest, r, s, x, y));\n        assertTrue(P256.verifySolidity(digest, r, s, x, y));\n    }",
                    "start": "12",
                    "end": "20",
                    "class": "P256Test",
                    "signature": " testVerifybytes32 digest, uint256 seed",
                    "full_signature": "function testVerify(bytes32 digest, uint256 seed) public   ",
                    "class_method_signature": "P256Test.testVerifybytes32 digest, uint256 seed",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/// forge-config: default.fuzz.runs = 512\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testRecover",
                    "parameters": "bytes32 digest, uint256 seed",
                    "modifiers": "",
                    "return": "",
                    "body": "function testRecover(bytes32 digest, uint256 seed) public {\n        uint256 privateKey = _asPrivateKey(seed);\n\n        (bytes32 x, bytes32 y) = P256PublicKey.getPublicKey(privateKey);\n        (bytes32 r, bytes32 s) = vm.signP256(privateKey, digest);\n        s = _ensureLowerS(s);\n        (bytes32 qx0, bytes32 qy0) = P256.recovery(digest, 0, r, s);\n        (bytes32 qx1, bytes32 qy1) = P256.recovery(digest, 1, r, s);\n        assertTrue((qx0 == x && qy0 == y) || (qx1 == x && qy1 == y));\n    }",
                    "start": "23",
                    "end": "32",
                    "class": "P256Test",
                    "signature": " testRecoverbytes32 digest, uint256 seed",
                    "full_signature": "function testRecover(bytes32 digest, uint256 seed) public   ",
                    "class_method_signature": "P256Test.testRecoverbytes32 digest, uint256 seed",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/// forge-config: default.fuzz.runs = 512\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/utils/math/Math.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "testSymbolicMinMax",
                    "parameters": "uint256 a, uint256 b",
                    "modifiers": "",
                    "return": "",
                    "body": "function testSymbolicMinMax(uint256 a, uint256 b) public {\n        assertEq(Math.min(a, b), a < b ? a : b);\n        assertEq(Math.max(a, b), a > b ? a : b);\n    }",
                    "start": "15",
                    "end": "18",
                    "class": "MathTest",
                    "signature": " testSymbolicMinMaxuint256 a, uint256 b",
                    "full_signature": "function testSymbolicMinMax(uint256 a, uint256 b) public   ",
                    "class_method_signature": "MathTest.testSymbolicMinMaxuint256 a, uint256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MIN & MAX\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testCeilDiv",
                    "parameters": "uint256 a, uint256 b",
                    "modifiers": "",
                    "return": "",
                    "body": "function testCeilDiv(uint256 a, uint256 b) public {\n        vm.assume(b > 0);\n\n        uint256 result = Math.ceilDiv(a, b);\n\n        if (result == 0) {\n            assertEq(a, 0);\n        } else {\n            uint256 expect = a / b;\n            if (expect * b < a) {\n                expect += 1;\n            }\n            assertEq(result, expect);\n        }\n    }",
                    "start": "21",
                    "end": "35",
                    "class": "MathTest",
                    "signature": " testCeilDivuint256 a, uint256 b",
                    "full_signature": "function testCeilDiv(uint256 a, uint256 b) public   ",
                    "class_method_signature": "MathTest.testCeilDivuint256 a, uint256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// CEILDIV\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testSqrt",
                    "parameters": "uint256 input, uint8 r",
                    "modifiers": "",
                    "return": "",
                    "body": "function testSqrt(uint256 input, uint8 r) public {\n        Math.Rounding rounding = _asRounding(r);\n\n        uint256 result = Math.sqrt(input, rounding);\n\n        // square of result is bigger than input\n        if (_squareBigger(result, input)) {\n            assertTrue(Math.unsignedRoundsUp(rounding));\n            assertTrue(_squareSmaller(result - 1, input));\n        }\n        // square of result is smaller than input\n        else if (_squareSmaller(result, input)) {\n            assertFalse(Math.unsignedRoundsUp(rounding));\n            assertTrue(_squareBigger(result + 1, input));\n        }\n        // input is perfect square\n        else {\n            assertEq(result * result, input);\n        }\n    }",
                    "start": "38",
                    "end": "57",
                    "class": "MathTest",
                    "signature": " testSqrtuint256 input, uint8 r",
                    "full_signature": "function testSqrt(uint256 input, uint8 r) public   ",
                    "class_method_signature": "MathTest.testSqrtuint256 input, uint8 r",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// SQRT\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testInvMod",
                    "parameters": "uint256 value, uint256 p",
                    "modifiers": "",
                    "return": "",
                    "body": "function testInvMod(uint256 value, uint256 p) public {\n        _testInvMod(value, p, true);\n    }",
                    "start": "69",
                    "end": "71",
                    "class": "MathTest",
                    "signature": " testInvModuint256 value, uint256 p",
                    "full_signature": "function testInvMod(uint256 value, uint256 p) public   ",
                    "class_method_signature": "MathTest.testInvModuint256 value, uint256 p",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// INV\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testLog2",
                    "parameters": "uint256 input, uint8 r",
                    "modifiers": "",
                    "return": "",
                    "body": "function testLog2(uint256 input, uint8 r) public {\n        Math.Rounding rounding = _asRounding(r);\n\n        uint256 result = Math.log2(input, rounding);\n\n        if (input == 0) {\n            assertEq(result, 0);\n        } else if (_powerOf2Bigger(result, input)) {\n            assertTrue(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf2Smaller(result - 1, input));\n        } else if (_powerOf2Smaller(result, input)) {\n            assertFalse(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf2Bigger(result + 1, input));\n        } else {\n            assertEq(2 ** result, input);\n        }\n    }",
                    "start": "104",
                    "end": "120",
                    "class": "MathTest",
                    "signature": " testLog2uint256 input, uint8 r",
                    "full_signature": "function testLog2(uint256 input, uint8 r) public   ",
                    "class_method_signature": "MathTest.testLog2uint256 input, uint8 r",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// LOG2\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testLog10",
                    "parameters": "uint256 input, uint8 r",
                    "modifiers": "",
                    "return": "",
                    "body": "function testLog10(uint256 input, uint8 r) public {\n        Math.Rounding rounding = _asRounding(r);\n\n        uint256 result = Math.log10(input, rounding);\n\n        if (input == 0) {\n            assertEq(result, 0);\n        } else if (_powerOf10Bigger(result, input)) {\n            assertTrue(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf10Smaller(result - 1, input));\n        } else if (_powerOf10Smaller(result, input)) {\n            assertFalse(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf10Bigger(result + 1, input));\n        } else {\n            assertEq(10 ** result, input);\n        }\n    }",
                    "start": "131",
                    "end": "147",
                    "class": "MathTest",
                    "signature": " testLog10uint256 input, uint8 r",
                    "full_signature": "function testLog10(uint256 input, uint8 r) public   ",
                    "class_method_signature": "MathTest.testLog10uint256 input, uint8 r",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// LOG10\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testLog256",
                    "parameters": "uint256 input, uint8 r",
                    "modifiers": "",
                    "return": "",
                    "body": "function testLog256(uint256 input, uint8 r) public {\n        Math.Rounding rounding = _asRounding(r);\n\n        uint256 result = Math.log256(input, rounding);\n\n        if (input == 0) {\n            assertEq(result, 0);\n        } else if (_powerOf256Bigger(result, input)) {\n            assertTrue(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf256Smaller(result - 1, input));\n        } else if (_powerOf256Smaller(result, input)) {\n            assertFalse(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf256Bigger(result + 1, input));\n        } else {\n            assertEq(256 ** result, input);\n        }\n    }",
                    "start": "158",
                    "end": "174",
                    "class": "MathTest",
                    "signature": " testLog256uint256 input, uint8 r",
                    "full_signature": "function testLog256(uint256 input, uint8 r) public   ",
                    "class_method_signature": "MathTest.testLog256uint256 input, uint8 r",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// LOG256\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testMulDiv",
                    "parameters": "uint256 x, uint256 y, uint256 d",
                    "modifiers": "",
                    "return": "",
                    "body": "function testMulDiv(uint256 x, uint256 y, uint256 d) public {\n        // Full precision for x * y\n        (uint256 xyHi, uint256 xyLo) = _mulHighLow(x, y);\n\n        // Assume result won't overflow (see {testMulDivDomain})\n        // This also checks that `d` is positive\n        vm.assume(xyHi < d);\n\n        // Perform muldiv\n        uint256 q = Math.mulDiv(x, y, d);\n\n        // Full precision for q * d\n        (uint256 qdHi, uint256 qdLo) = _mulHighLow(q, d);\n        // Add remainder of x * y / d (computed as rem = (x * y % d))\n        (uint256 qdRemLo, uint256 c) = _addCarry(qdLo, mulmod(x, y, d));\n        uint256 qdRemHi = qdHi + c;\n\n        // Full precision check that x * y = q * d + rem\n        assertEq(xyHi, qdRemHi);\n        assertEq(xyLo, qdRemLo);\n    }",
                    "start": "185",
                    "end": "205",
                    "class": "MathTest",
                    "signature": " testMulDivuint256 x, uint256 y, uint256 d",
                    "full_signature": "function testMulDiv(uint256 x, uint256 y, uint256 d) public   ",
                    "class_method_signature": "MathTest.testMulDivuint256 x, uint256 y, uint256 d",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MULDIV\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testModExp",
                    "parameters": "uint256 b, uint256 e, uint256 m",
                    "modifiers": "",
                    "return": "",
                    "body": "function testModExp(uint256 b, uint256 e, uint256 m) public {\n        if (m == 0) {\n            vm.expectRevert(stdError.divisionError);\n        }\n        uint256 result = Math.modExp(b, e, m);\n        assertLt(result, m);\n        assertEq(result, _nativeModExp(b, e, m));\n    }",
                    "start": "219",
                    "end": "226",
                    "class": "MathTest",
                    "signature": " testModExpuint256 b, uint256 e, uint256 m",
                    "full_signature": "function testModExp(uint256 b, uint256 e, uint256 m) public   ",
                    "class_method_signature": "MathTest.testModExpuint256 b, uint256 e, uint256 m",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MOD EXP\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_asRounding",
                    "parameters": "uint8 r",
                    "modifiers": "pure",
                    "return": "returns (Math.Rounding)",
                    "body": "function _asRounding(uint8 r) private pure returns (Math.Rounding) {\n        vm.assume(r < uint8(type(Math.Rounding).max));\n        return Math.Rounding(r);\n    }",
                    "start": "280",
                    "end": "283",
                    "class": "MathTest",
                    "signature": "returns (Math.Rounding) _asRoundinguint8 r",
                    "full_signature": "function _asRounding(uint8 r) private  pure returns (Math.Rounding)",
                    "class_method_signature": "MathTest._asRoundinguint8 r",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Helpers\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/utils/math/SignedMath.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "testSymbolicMinMax",
                    "parameters": "int256 a, int256 b",
                    "modifiers": "",
                    "return": "",
                    "body": "function testSymbolicMinMax(int256 a, int256 b) public {\n        assertEq(SignedMath.min(a, b), a < b ? a : b);\n        assertEq(SignedMath.max(a, b), a > b ? a : b);\n    }",
                    "start": "16",
                    "end": "19",
                    "class": "SignedMathTest",
                    "signature": " testSymbolicMinMaxint256 a, int256 b",
                    "full_signature": "function testSymbolicMinMax(int256 a, int256 b) public   ",
                    "class_method_signature": "SignedMathTest.testSymbolicMinMaxint256 a, int256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MIN & MAX\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testSymbolicMin",
                    "parameters": "int256 a, int256 b",
                    "modifiers": "",
                    "return": "",
                    "body": "function testSymbolicMin(int256 a, int256 b) public {\n        int256 result = SignedMath.min(a, b);\n\n        assertLe(result, a);\n        assertLe(result, b);\n        assertTrue(result == a || result == b);\n    }",
                    "start": "22",
                    "end": "28",
                    "class": "SignedMathTest",
                    "signature": " testSymbolicMinint256 a, int256 b",
                    "full_signature": "function testSymbolicMin(int256 a, int256 b) public   ",
                    "class_method_signature": "SignedMathTest.testSymbolicMinint256 a, int256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MIN\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testSymbolicMax",
                    "parameters": "int256 a, int256 b",
                    "modifiers": "",
                    "return": "",
                    "body": "function testSymbolicMax(int256 a, int256 b) public {\n        int256 result = SignedMath.max(a, b);\n\n        assertGe(result, a);\n        assertGe(result, b);\n        assertTrue(result == a || result == b);\n    }",
                    "start": "31",
                    "end": "37",
                    "class": "SignedMathTest",
                    "signature": " testSymbolicMaxint256 a, int256 b",
                    "full_signature": "function testSymbolicMax(int256 a, int256 b) public   ",
                    "class_method_signature": "SignedMathTest.testSymbolicMaxint256 a, int256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MAX\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAverage1",
                    "parameters": "int256 a, int256 b",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAverage1(int256 a, int256 b) public {\n        a = bound(a, type(int256).min / 2, type(int256).max / 2);\n        b = bound(b, type(int256).min / 2, type(int256).max / 2);\n\n        int256 result = SignedMath.average(a, b);\n\n        assertEq(result, (a + b) / 2);\n    }",
                    "start": "41",
                    "end": "48",
                    "class": "SignedMathTest",
                    "signature": " testAverage1int256 a, int256 b",
                    "full_signature": "function testAverage1(int256 a, int256 b) public   ",
                    "class_method_signature": "SignedMathTest.testAverage1int256 a, int256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// AVERAGE\n// 1. simple test, not full int256 range\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAverage2",
                    "parameters": "int256 a, int256 b",
                    "modifiers": "",
                    "return": "",
                    "body": "function testAverage2(int256 a, int256 b) public {\n        (int256 result, int256 min, int256 max) = (\n            SignedMath.average(a, b),\n            SignedMath.min(a, b),\n            SignedMath.max(a, b)\n        );\n\n        // average must be between `a` and `b`\n        assertGe(result, min);\n        assertLe(result, max);\n\n        unchecked {\n            // must be unchecked in order to support `a = type(int256).min, b = type(int256).max`\n            uint256 deltaLower = uint256(result - min);\n            uint256 deltaUpper = uint256(max - result);\n            uint256 remainder = uint256((a & 1) ^ (b & 1));\n            assertEq(remainder, Math.max(deltaLower, deltaUpper) - Math.min(deltaLower, deltaUpper));\n        }\n    }",
                    "start": "51",
                    "end": "69",
                    "class": "SignedMathTest",
                    "signature": " testAverage2int256 a, int256 b",
                    "full_signature": "function testAverage2(int256 a, int256 b) public   ",
                    "class_method_signature": "SignedMathTest.testAverage2int256 a, int256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// 2. more complex test, full int256 range\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testSymbolicAbs",
                    "parameters": "int256 a",
                    "modifiers": "",
                    "return": "",
                    "body": "function testSymbolicAbs(int256 a) public {\n        uint256 result = SignedMath.abs(a);\n\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            assertEq(result, a < 0 ? uint256(-a) : uint256(a));\n        }\n    }",
                    "start": "72",
                    "end": "79",
                    "class": "SignedMathTest",
                    "signature": " testSymbolicAbsint256 a",
                    "full_signature": "function testSymbolicAbs(int256 a) public   ",
                    "class_method_signature": "SignedMathTest.testSymbolicAbsint256 a",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// ABS\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/utils/structs/Heap.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/utils/structs/Checkpoints.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_boundUint32",
                    "parameters": "uint32 x, uint32 min, uint32 max",
                    "modifiers": "pure",
                    "return": "returns (uint32)",
                    "body": "function _boundUint32(uint32 x, uint32 min, uint32 max) internal pure returns (uint32) {\n        return SafeCast.toUint32(bound(uint256(x), uint256(min), uint256(max)));\n    }",
                    "start": "20",
                    "end": "22",
                    "class": "CheckpointsTrace224Test",
                    "signature": "returns (uint32) _boundUint32uint32 x, uint32 min, uint32 max",
                    "full_signature": "function _boundUint32(uint32 x, uint32 min, uint32 max) internal  pure returns (uint32)",
                    "class_method_signature": "CheckpointsTrace224Test._boundUint32uint32 x, uint32 min, uint32 max",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Maximum gap between keys used during the fuzzing tests: the `_prepareKeys` function with make sure that\n// key#n+1 is in the [key#n, key#n + _KEY_MAX_GAP] range.\n// helpers\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "testPush",
                    "parameters": "uint32[] memory keys, uint224[] memory values, uint32 pastKey",
                    "modifiers": "",
                    "return": "",
                    "body": "function testPush(uint32[] memory keys, uint224[] memory values, uint32 pastKey) public {\n        vm.assume(values.length > 0 && values.length <= keys.length);\n        _prepareKeys(keys, _KEY_MAX_GAP);\n\n        // initial state\n        assertEq(_ckpts.length(), 0);\n        assertEq(_ckpts.latest(), 0);\n        _assertLatestCheckpoint(false, 0, 0);\n\n        uint256 duplicates = 0;\n        for (uint256 i = 0; i < keys.length; ++i) {\n            uint32 key = keys[i];\n            uint224 value = values[i % values.length];\n            if (i > 0 && key == keys[i - 1]) ++duplicates;\n\n            // push\n            _ckpts.push(key, value);\n\n            // check length & latest\n            assertEq(_ckpts.length(), i + 1 - duplicates);\n            assertEq(_ckpts.latest(), value);\n            _assertLatestCheckpoint(true, key, value);\n        }\n\n        if (keys.length > 0) {\n            uint32 lastKey = keys[keys.length - 1];\n            if (lastKey > 0) {\n                pastKey = _boundUint32(pastKey, 0, lastKey - 1);\n\n                vm.expectRevert();\n                this.push(pastKey, values[keys.length % values.length]);\n            }\n        }\n    }",
                    "start": "41",
                    "end": "74",
                    "class": "CheckpointsTrace224Test",
                    "signature": " testPushuint32[] memory keys, uint224[] memory values, uint32 pastKey",
                    "full_signature": "function testPush(uint32[] memory keys, uint224[] memory values, uint32 pastKey) public   ",
                    "class_method_signature": "CheckpointsTrace224Test.testPushuint32[] memory keys, uint224[] memory values, uint32 pastKey",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// tests\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "push",
                    "parameters": "uint32 key, uint224 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function push(uint32 key, uint224 value) external {\n        _ckpts.push(key, value);\n    }",
                    "start": "77",
                    "end": "79",
                    "class": "CheckpointsTrace224Test",
                    "signature": " pushuint32 key, uint224 value",
                    "full_signature": "function push(uint32 key, uint224 value) external   ",
                    "class_method_signature": "CheckpointsTrace224Test.pushuint32 key, uint224 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// used to test reverts\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_boundUint48",
                    "parameters": "uint48 x, uint48 min, uint48 max",
                    "modifiers": "pure",
                    "return": "returns (uint48)",
                    "body": "function _boundUint48(uint48 x, uint48 min, uint48 max) internal pure returns (uint48) {\n        return SafeCast.toUint48(bound(uint256(x), uint256(min), uint256(max)));\n    }",
                    "start": "128",
                    "end": "130",
                    "class": "CheckpointsTrace208Test",
                    "signature": "returns (uint48) _boundUint48uint48 x, uint48 min, uint48 max",
                    "full_signature": "function _boundUint48(uint48 x, uint48 min, uint48 max) internal  pure returns (uint48)",
                    "class_method_signature": "CheckpointsTrace208Test._boundUint48uint48 x, uint48 min, uint48 max",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Maximum gap between keys used during the fuzzing tests: the `_prepareKeys` function with make sure that\n// key#n+1 is in the [key#n, key#n + _KEY_MAX_GAP] range.\n// helpers\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "testPush",
                    "parameters": "uint48[] memory keys, uint208[] memory values, uint48 pastKey",
                    "modifiers": "",
                    "return": "",
                    "body": "function testPush(uint48[] memory keys, uint208[] memory values, uint48 pastKey) public {\n        vm.assume(values.length > 0 && values.length <= keys.length);\n        _prepareKeys(keys, _KEY_MAX_GAP);\n\n        // initial state\n        assertEq(_ckpts.length(), 0);\n        assertEq(_ckpts.latest(), 0);\n        _assertLatestCheckpoint(false, 0, 0);\n\n        uint256 duplicates = 0;\n        for (uint256 i = 0; i < keys.length; ++i) {\n            uint48 key = keys[i];\n            uint208 value = values[i % values.length];\n            if (i > 0 && key == keys[i - 1]) ++duplicates;\n\n            // push\n            _ckpts.push(key, value);\n\n            // check length & latest\n            assertEq(_ckpts.length(), i + 1 - duplicates);\n            assertEq(_ckpts.latest(), value);\n            _assertLatestCheckpoint(true, key, value);\n        }\n\n        if (keys.length > 0) {\n            uint48 lastKey = keys[keys.length - 1];\n            if (lastKey > 0) {\n                pastKey = _boundUint48(pastKey, 0, lastKey - 1);\n\n                vm.expectRevert();\n                this.push(pastKey, values[keys.length % values.length]);\n            }\n        }\n    }",
                    "start": "149",
                    "end": "182",
                    "class": "CheckpointsTrace208Test",
                    "signature": " testPushuint48[] memory keys, uint208[] memory values, uint48 pastKey",
                    "full_signature": "function testPush(uint48[] memory keys, uint208[] memory values, uint48 pastKey) public   ",
                    "class_method_signature": "CheckpointsTrace208Test.testPushuint48[] memory keys, uint208[] memory values, uint48 pastKey",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// tests\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "push",
                    "parameters": "uint48 key, uint208 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function push(uint48 key, uint208 value) external {\n        _ckpts.push(key, value);\n    }",
                    "start": "185",
                    "end": "187",
                    "class": "CheckpointsTrace208Test",
                    "signature": " pushuint48 key, uint208 value",
                    "full_signature": "function push(uint48 key, uint208 value) external   ",
                    "class_method_signature": "CheckpointsTrace208Test.pushuint48 key, uint208 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// used to test reverts\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_boundUint96",
                    "parameters": "uint96 x, uint96 min, uint96 max",
                    "modifiers": "pure",
                    "return": "returns (uint96)",
                    "body": "function _boundUint96(uint96 x, uint96 min, uint96 max) internal pure returns (uint96) {\n        return SafeCast.toUint96(bound(uint256(x), uint256(min), uint256(max)));\n    }",
                    "start": "236",
                    "end": "238",
                    "class": "CheckpointsTrace160Test",
                    "signature": "returns (uint96) _boundUint96uint96 x, uint96 min, uint96 max",
                    "full_signature": "function _boundUint96(uint96 x, uint96 min, uint96 max) internal  pure returns (uint96)",
                    "class_method_signature": "CheckpointsTrace160Test._boundUint96uint96 x, uint96 min, uint96 max",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Maximum gap between keys used during the fuzzing tests: the `_prepareKeys` function with make sure that\n// key#n+1 is in the [key#n, key#n + _KEY_MAX_GAP] range.\n// helpers\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "testPush",
                    "parameters": "uint96[] memory keys, uint160[] memory values, uint96 pastKey",
                    "modifiers": "",
                    "return": "",
                    "body": "function testPush(uint96[] memory keys, uint160[] memory values, uint96 pastKey) public {\n        vm.assume(values.length > 0 && values.length <= keys.length);\n        _prepareKeys(keys, _KEY_MAX_GAP);\n\n        // initial state\n        assertEq(_ckpts.length(), 0);\n        assertEq(_ckpts.latest(), 0);\n        _assertLatestCheckpoint(false, 0, 0);\n\n        uint256 duplicates = 0;\n        for (uint256 i = 0; i < keys.length; ++i) {\n            uint96 key = keys[i];\n            uint160 value = values[i % values.length];\n            if (i > 0 && key == keys[i - 1]) ++duplicates;\n\n            // push\n            _ckpts.push(key, value);\n\n            // check length & latest\n            assertEq(_ckpts.length(), i + 1 - duplicates);\n            assertEq(_ckpts.latest(), value);\n            _assertLatestCheckpoint(true, key, value);\n        }\n\n        if (keys.length > 0) {\n            uint96 lastKey = keys[keys.length - 1];\n            if (lastKey > 0) {\n                pastKey = _boundUint96(pastKey, 0, lastKey - 1);\n\n                vm.expectRevert();\n                this.push(pastKey, values[keys.length % values.length]);\n            }\n        }\n    }",
                    "start": "257",
                    "end": "290",
                    "class": "CheckpointsTrace160Test",
                    "signature": " testPushuint96[] memory keys, uint160[] memory values, uint96 pastKey",
                    "full_signature": "function testPush(uint96[] memory keys, uint160[] memory values, uint96 pastKey) public   ",
                    "class_method_signature": "CheckpointsTrace160Test.testPushuint96[] memory keys, uint160[] memory values, uint96 pastKey",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// tests\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "push",
                    "parameters": "uint96 key, uint160 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function push(uint96 key, uint160 value) external {\n        _ckpts.push(key, value);\n    }",
                    "start": "293",
                    "end": "295",
                    "class": "CheckpointsTrace160Test",
                    "signature": " pushuint96 key, uint160 value",
                    "full_signature": "function push(uint96 key, uint160 value) external   ",
                    "class_method_signature": "CheckpointsTrace160Test.pushuint96 key, uint160 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// used to test reverts\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/metatx/ERC2771Forwarder.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "setUp",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function setUp() public {\n        _erc2771Forwarder = new ERC2771ForwarderMock(\"ERC2771Forwarder\");\n        _receiver = new CallReceiverMockTrustingForwarder(address(_erc2771Forwarder));\n\n        _signerPrivateKey = 0xA11CE;\n        _relayerPrivateKey = 0xB0B;\n\n        _signer = vm.addr(_signerPrivateKey);\n        _relayer = vm.addr(_relayerPrivateKey);\n    }",
                    "start": "53",
                    "end": "62",
                    "class": "ERC2771ForwarderTest",
                    "signature": " setUp",
                    "full_signature": "function setUp() public   ",
                    "class_method_signature": "ERC2771ForwarderTest.setUp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// To avoid overflow\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/governance/Governor.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "clock",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint48)",
                    "body": "function clock() public pure override returns (uint48) {}",
                    "start": "32",
                    "end": "32",
                    "class": "GovernorInternalTest",
                    "signature": "returns (uint48) clock",
                    "full_signature": "function clock() public  override returns (uint48)",
                    "class_method_signature": "GovernorInternalTest.clock",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// We don't need to truly implement the missing functions because we are just testing\n// internal helpers.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public pure override returns (string memory) {}",
                    "start": "35",
                    "end": "35",
                    "class": "GovernorInternalTest",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public  override returns (string memory)",
                    "class_method_signature": "GovernorInternalTest.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "COUNTING_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function COUNTING_MODE() public pure virtual override returns (string memory) {}",
                    "start": "38",
                    "end": "38",
                    "class": "GovernorInternalTest",
                    "signature": "returns (string memory) COUNTING_MODE",
                    "full_signature": "function COUNTING_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "GovernorInternalTest.COUNTING_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/token/ERC721/extensions/ERC721Consecutive.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/token/ERC20/extensions/ERC4626.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "testFuzzDecimalsOverflow",
                    "parameters": "uint8 offset",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzzDecimalsOverflow(uint8 offset) public {\n        /// @dev Remember that the `_underlying` exhibits a `decimals` value of 18.\n        offset = uint8(bound(uint256(offset), 238, uint256(type(uint8).max)));\n        ERC4626VaultOffsetMock erc4626VaultOffsetMock = new ERC4626VaultOffsetMock(_underlying, offset);\n        vm.expectRevert();\n        erc4626VaultOffsetMock.decimals();\n    }",
                    "start": "34",
                    "end": "40",
                    "class": "ERC4626StdTest",
                    "signature": " testFuzzDecimalsOverflowuint8 offset",
                    "full_signature": "function testFuzzDecimalsOverflow(uint8 offset) public   ",
                    "class_method_signature": "ERC4626StdTest.testFuzzDecimalsOverflowuint8 offset",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Check the case where calculated `decimals` value overflows the `uint8` type.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/test/proxy/Clones.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Pausable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "paused",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function paused() public view virtual returns (bool) {\n        return _paused;\n    }",
                    "start": "74",
                    "end": "76",
                    "class": "Pausable",
                    "signature": "returns (bool) paused",
                    "full_signature": "function paused() public virtual view returns (bool)",
                    "class_method_signature": "Pausable.paused",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n/**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n/**\n     * @dev The operation failed because the contract is paused.\n     */\n/**\n     * @dev The operation failed because the contract is not paused.\n     */\n/**\n     * @dev Initializes the contract in unpaused state.\n     */\n/**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n/**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n/**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_requireNotPaused",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }",
                    "start": "81",
                    "end": "85",
                    "class": "Pausable",
                    "signature": " _requireNotPaused",
                    "full_signature": "function _requireNotPaused() internal virtual view ",
                    "class_method_signature": "Pausable._requireNotPaused",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Throws if the contract is paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_requirePaused",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }",
                    "start": "90",
                    "end": "94",
                    "class": "Pausable",
                    "signature": " _requirePaused",
                    "full_signature": "function _requirePaused() internal virtual view ",
                    "class_method_signature": "Pausable._requirePaused",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Throws if the contract is not paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_pause",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }",
                    "start": "103",
                    "end": "106",
                    "class": "Pausable",
                    "signature": " _pause",
                    "full_signature": "function _pause() internal virtual  ",
                    "class_method_signature": "Pausable._pause",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_unpause",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }",
                    "start": "115",
                    "end": "118",
                    "class": "Pausable",
                    "signature": " _unpause",
                    "full_signature": "function _unpause() internal virtual  ",
                    "class_method_signature": "Pausable._unpause",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Packing.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/SlotDerivation.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Comparators.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Multicall.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "multicall",
                    "parameters": "bytes[] calldata data",
                    "modifiers": "",
                    "return": "returns (bytes[] memory results)",
                    "body": "function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        bytes memory context = msg.sender == _msgSender()\n            ? new bytes(0)\n            : msg.data[msg.data.length - _contextSuffixLength():];\n\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\n        }\n        return results;\n    }",
                    "start": "26",
                    "end": "36",
                    "class": "Multicall",
                    "signature": "returns (bytes[] memory results) multicallbytes[] calldata data",
                    "full_signature": "function multicall(bytes[] calldata data) external virtual  returns (bytes[] memory results)",
                    "class_method_signature": "Multicall.multicallbytes[] calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/TransientSlot.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Create2.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Context.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Base64.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Address.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Panic.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Arrays.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Errors.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_nonReentrantBefore",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }",
                    "start": "64",
                    "end": "72",
                    "class": "ReentrancyGuard",
                    "signature": " _nonReentrantBefore",
                    "full_signature": "function _nonReentrantBefore() private   ",
                    "class_method_signature": "ReentrancyGuard._nonReentrantBefore",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Booleans are more expensive than uint256 or any type that takes up a full\n// word because each write operation emits an extra SLOAD to first read the\n// slot's contents, replace the bits taken up by the boolean, and then write\n// back. This is the compiler's defense against contract upgrades and\n// pointer aliasing, and it cannot be disabled.\n// The values being non-zero value makes deployment a bit more expensive,\n// but in exchange the refund on every call to nonReentrant will be lower in\n// amount. Since refunds are capped to a percentage of the total\n// transaction's gas, it is best to keep them low in cases like this one, to\n// increase the likelihood of the full refund coming into effect.\n/**\n     * @dev Unauthorized reentrant call.\n     */\n/**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_reentrancyGuardEntered",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }",
                    "start": "84",
                    "end": "86",
                    "class": "ReentrancyGuard",
                    "signature": "returns (bool) _reentrancyGuardEntered",
                    "full_signature": "function _reentrancyGuardEntered() internal  view returns (bool)",
                    "class_method_signature": "ReentrancyGuard._reentrancyGuardEntered",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Strings.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/ReentrancyGuardTransient.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_nonReentrantBefore",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_reentrancyGuardEntered()) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(true);\n    }",
                    "start": "40",
                    "end": "48",
                    "class": "ReentrancyGuardTransient",
                    "signature": " _nonReentrantBefore",
                    "full_signature": "function _nonReentrantBefore() private   ",
                    "class_method_signature": "ReentrancyGuardTransient._nonReentrantBefore",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n/**\n     * @dev Unauthorized reentrant call.\n     */\n/**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_reentrancyGuardEntered",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _reentrancyGuardEntered() internal view returns (bool) {\n        return REENTRANCY_GUARD_STORAGE.asBoolean().tload();\n    }",
                    "start": "58",
                    "end": "60",
                    "class": "ReentrancyGuardTransient",
                    "signature": "returns (bool) _reentrancyGuardEntered",
                    "full_signature": "function _reentrancyGuardEntered() internal  view returns (bool)",
                    "class_method_signature": "ReentrancyGuardTransient._reentrancyGuardEntered",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/Nonces.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "nonces",
                    "parameters": "address owner",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }",
                    "start": "19",
                    "end": "21",
                    "class": "Nonces",
                    "signature": "returns (uint256) noncesaddress owner",
                    "full_signature": "function nonces(address owner) public virtual view returns (uint256)",
                    "class_method_signature": "Nonces.noncesaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n/**\n     * @dev Returns the next unused nonce for an address.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_useNonce",
                    "parameters": "address owner",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }",
                    "start": "28",
                    "end": "35",
                    "class": "Nonces",
                    "signature": "returns (uint256) _useNonceaddress owner",
                    "full_signature": "function _useNonce(address owner) internal virtual  returns (uint256)",
                    "class_method_signature": "Nonces._useNonceaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_useCheckedNonce",
                    "parameters": "address owner, uint256 nonce",
                    "modifiers": "",
                    "return": "",
                    "body": "function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }",
                    "start": "40",
                    "end": "45",
                    "class": "Nonces",
                    "signature": " _useCheckedNonceaddress owner, uint256 nonce",
                    "full_signature": "function _useCheckedNonce(address owner, uint256 nonce) internal virtual  ",
                    "class_method_signature": "Nonces._useCheckedNonceaddress owner, uint256 nonce",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }",
                    "start": "24",
                    "end": "26",
                    "class": "ERC165",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual view returns (bool)",
                    "class_method_signature": "ERC165.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/cryptography/RSA.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_domainSeparatorV4",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }",
                    "start": "80",
                    "end": "86",
                    "class": "EIP712",
                    "signature": "returns (bytes32) _domainSeparatorV4",
                    "full_signature": "function _domainSeparatorV4() internal  view returns (bytes32)",
                    "class_method_signature": "EIP712._domainSeparatorV4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n// invalidate the cached domain separator if the chain id changes.\n/**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n/**\n     * @dev Returns the domain separator for the current chain.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_hashTypedDataV4",
                    "parameters": "bytes32 structHash",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }",
                    "start": "107",
                    "end": "109",
                    "class": "EIP712",
                    "signature": "returns (bytes32) _hashTypedDataV4bytes32 structHash",
                    "full_signature": "function _hashTypedDataV4(bytes32 structHash) internal virtual view returns (bytes32)",
                    "class_method_signature": "EIP712._hashTypedDataV4bytes32 structHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "eip712Domain",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )",
                    "body": "function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }",
                    "start": "114",
                    "end": "137",
                    "class": "EIP712",
                    "signature": "returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        ) eip712Domain",
                    "full_signature": "function eip712Domain() public virtual view returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )",
                    "class_method_signature": "EIP712.eip712Domain",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC-5267}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_EIP712Name",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }",
                    "start": "146",
                    "end": "148",
                    "class": "EIP712",
                    "signature": "returns (string memory) _EIP712Name",
                    "full_signature": "function _EIP712Name() internal  view returns (string memory)",
                    "class_method_signature": "EIP712._EIP712Name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_EIP712Version",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }",
                    "start": "157",
                    "end": "159",
                    "class": "EIP712",
                    "signature": "returns (string memory) _EIP712Version",
                    "full_signature": "function _EIP712Version() internal  view returns (string memory)",
                    "class_method_signature": "EIP712._EIP712Version",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/cryptography/P256.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/types/Time.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/math/Math.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/structs/CircularBuffer.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/structs/DoubleEndedQueue.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/structs/MerkleTree.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/structs/Checkpoints.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/structs/BitMaps.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/utils/structs/Heap.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC5805.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC721Receiver.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC777Recipient.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC5313.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC6372.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC4906.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Spender.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC1820Registry.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC721Enumerable.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC3156.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC1155Receiver.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC777.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC7674.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC1155.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC1155MetadataURI.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC2612.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC777Sender.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC1820Implementer.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC2309.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC1363Receiver.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC721Metadata.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/finance/VestingWalletCliff.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "cliff",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function cliff() public view virtual returns (uint256) {\n        return _cliff;\n    }",
                    "start": "36",
                    "end": "38",
                    "class": "VestingWalletCliff",
                    "signature": "returns (uint256) cliff",
                    "full_signature": "function cliff() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWalletCliff.cliff",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev The specified cliff duration is larger than the vesting duration.\n/**\n     * @dev Set the duration of the cliff, in seconds. The cliff starts vesting schedule (see {VestingWallet}'s\n     * constructor) and ends `cliffSeconds` later.\n     */\n/**\n     * @dev Getter for the cliff timestamp.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_vestingSchedule",
                    "parameters": "uint256 totalAllocation, uint64 timestamp",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _vestingSchedule(\n        uint256 totalAllocation,\n        uint64 timestamp\n    ) internal view virtual override returns (uint256) {\n        return timestamp < cliff() ? 0 : super._vestingSchedule(totalAllocation, timestamp);\n    }",
                    "start": "48",
                    "end": "53",
                    "class": "VestingWalletCliff",
                    "signature": "returns (uint256) _vestingScheduleuint256 totalAllocation, uint64 timestamp",
                    "full_signature": "function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal virtual override returns (uint256)",
                    "class_method_signature": "VestingWalletCliff._vestingScheduleuint256 totalAllocation, uint64 timestamp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\n     * an asset given its total historical allocation. Returns 0 if the {cliff} timestamp is not met.\n     *\n     * IMPORTANT: The cliff not only makes the schedule return 0, but it also ignores every possible side\n     * effect from calling the inherited implementation (i.e. `super._vestingSchedule`). Carefully consider\n     * this caveat if the overridden implementation of this function has any (e.g. writing to memory or reverting).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/finance/VestingWallet.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "start",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function start() public view virtual returns (uint256) {\n        return _start;\n    }",
                    "start": "56",
                    "end": "58",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) start",
                    "full_signature": "function start() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.start",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets the beneficiary (owner), the start timestamp and the vesting duration (in seconds) of the vesting\n     * wallet.\n     */\n/**\n     * @dev The contract should be able to receive Eth.\n     */\n/**\n     * @dev Getter for the start timestamp.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "duration",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function duration() public view virtual returns (uint256) {\n        return _duration;\n    }",
                    "start": "63",
                    "end": "65",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) duration",
                    "full_signature": "function duration() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.duration",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Getter for the vesting duration.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "end",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function end() public view virtual returns (uint256) {\n        return start() + duration();\n    }",
                    "start": "70",
                    "end": "72",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) end",
                    "full_signature": "function end() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.end",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Getter for the end timestamp.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "released",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function released() public view virtual returns (uint256) {\n        return _released;\n    }",
                    "start": "77",
                    "end": "79",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) released",
                    "full_signature": "function released() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.released",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Amount of eth already released\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "released",
                    "parameters": "address token",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function released(address token) public view virtual returns (uint256) {\n        return _erc20Released[token];\n    }",
                    "start": "84",
                    "end": "86",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) releasedaddress token",
                    "full_signature": "function released(address token) public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.releasedaddress token",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Amount of token already released\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "releasable",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function releasable() public view virtual returns (uint256) {\n        return vestedAmount(uint64(block.timestamp)) - released();\n    }",
                    "start": "91",
                    "end": "93",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) releasable",
                    "full_signature": "function releasable() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.releasable",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Getter for the amount of releasable eth.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "releasable",
                    "parameters": "address token",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function releasable(address token) public view virtual returns (uint256) {\n        return vestedAmount(token, uint64(block.timestamp)) - released(token);\n    }",
                    "start": "99",
                    "end": "101",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) releasableaddress token",
                    "full_signature": "function releasable(address token) public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.releasableaddress token",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Getter for the amount of releasable `token` tokens. `token` should be the address of an\n     * {IERC20} contract.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "release",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function release() public virtual {\n        uint256 amount = releasable();\n        _released += amount;\n        emit EtherReleased(amount);\n        Address.sendValue(payable(owner()), amount);\n    }",
                    "start": "108",
                    "end": "113",
                    "class": "VestingWallet",
                    "signature": " release",
                    "full_signature": "function release() public virtual  ",
                    "class_method_signature": "VestingWallet.release",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Release the native token (ether) that have already vested.\n     *\n     * Emits a {EtherReleased} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "release",
                    "parameters": "address token",
                    "modifiers": "",
                    "return": "",
                    "body": "function release(address token) public virtual {\n        uint256 amount = releasable(token);\n        _erc20Released[token] += amount;\n        emit ERC20Released(token, amount);\n        SafeERC20.safeTransfer(IERC20(token), owner(), amount);\n    }",
                    "start": "120",
                    "end": "125",
                    "class": "VestingWallet",
                    "signature": " releaseaddress token",
                    "full_signature": "function release(address token) public virtual  ",
                    "class_method_signature": "VestingWallet.releaseaddress token",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Release the tokens that have already vested.\n     *\n     * Emits a {ERC20Released} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "vestedAmount",
                    "parameters": "uint64 timestamp",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\n        return _vestingSchedule(address(this).balance + released(), timestamp);\n    }",
                    "start": "130",
                    "end": "132",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) vestedAmountuint64 timestamp",
                    "full_signature": "function vestedAmount(uint64 timestamp) public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.vestedAmountuint64 timestamp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "vestedAmount",
                    "parameters": "address token, uint64 timestamp",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\n    }",
                    "start": "137",
                    "end": "139",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) vestedAmountaddress token, uint64 timestamp",
                    "full_signature": "function vestedAmount(address token, uint64 timestamp) public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.vestedAmountaddress token, uint64 timestamp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_vestingSchedule",
                    "parameters": "uint256 totalAllocation, uint64 timestamp",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\n        if (timestamp < start()) {\n            return 0;\n        } else if (timestamp >= end()) {\n            return totalAllocation;\n        } else {\n            return (totalAllocation * (timestamp - start())) / duration();\n        }\n    }",
                    "start": "145",
                    "end": "153",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) _vestingScheduleuint256 totalAllocation, uint64 timestamp",
                    "full_signature": "function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet._vestingScheduleuint256 totalAllocation, uint64 timestamp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\n     * an asset given its total historical allocation.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "trustedForwarder",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function trustedForwarder() public view virtual returns (address) {\n        return _trustedForwarder;\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "ERC2771Context",
                    "signature": "returns (address) trustedForwarder",
                    "full_signature": "function trustedForwarder() public virtual view returns (address)",
                    "class_method_signature": "ERC2771Context.trustedForwarder",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n/**\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\n     * invoke functions on this contract on behalf of other accounts.\n     *\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\n     */\n/// @custom:oz-upgrades-unsafe-allow constructor\n/**\n     * @dev Returns the address of the trusted forwarder.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isTrustedForwarder",
                    "parameters": "address forwarder",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == trustedForwarder();\n    }",
                    "start": "46",
                    "end": "48",
                    "class": "ERC2771Context",
                    "signature": "returns (bool) isTrustedForwarderaddress forwarder",
                    "full_signature": "function isTrustedForwarder(address forwarder) public virtual view returns (bool)",
                    "class_method_signature": "ERC2771Context.isTrustedForwarderaddress forwarder",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Indicates whether any particular address is the trusted forwarder.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_msgSender",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _msgSender() internal view virtual override returns (address) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\n        } else {\n            return super._msgSender();\n        }\n    }",
                    "start": "55",
                    "end": "63",
                    "class": "ERC2771Context",
                    "signature": "returns (address) _msgSender",
                    "full_signature": "function _msgSender() internal virtual override returns (address)",
                    "class_method_signature": "ERC2771Context._msgSender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_msgData",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (bytes calldata)",
                    "body": "function _msgData() internal view virtual override returns (bytes calldata) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return msg.data[:calldataLength - contextSuffixLength];\n        } else {\n            return super._msgData();\n        }\n    }",
                    "start": "70",
                    "end": "78",
                    "class": "ERC2771Context",
                    "signature": "returns (bytes calldata) _msgData",
                    "full_signature": "function _msgData() internal virtual override returns (bytes calldata)",
                    "class_method_signature": "ERC2771Context._msgData",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_contextSuffixLength",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _contextSuffixLength() internal view virtual override returns (uint256) {\n        return 20;\n    }",
                    "start": "83",
                    "end": "85",
                    "class": "ERC2771Context",
                    "signature": "returns (uint256) _contextSuffixLength",
                    "full_signature": "function _contextSuffixLength() internal virtual override returns (uint256)",
                    "class_method_signature": "ERC2771Context._contextSuffixLength",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "verify",
                    "parameters": "ForwardRequestData calldata request",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function verify(ForwardRequestData calldata request) public view virtual returns (bool) {\n        (bool isTrustedForwarder, bool active, bool signerMatch, ) = _validate(request);\n        return isTrustedForwarder && active && signerMatch;\n    }",
                    "start": "112",
                    "end": "115",
                    "class": "ERC2771Forwarder",
                    "signature": "returns (bool) verifyForwardRequestData calldata request",
                    "full_signature": "function verify(ForwardRequestData calldata request) public virtual view returns (bool)",
                    "class_method_signature": "ERC2771Forwarder.verifyForwardRequestData calldata request",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Emitted when a `ForwardRequest` is executed.\n     *\n     * NOTE: An unsuccessful forward request could be due to an invalid signature, an expired deadline,\n     * or simply a revert in the requested call. The contract guarantees that the relayer is not able to force\n     * the requested call to run out of gas.\n     */\n/**\n     * @dev The request `from` doesn't match with the recovered `signer`.\n     */\n/**\n     * @dev The `requestedValue` doesn't match with the available `msgValue`.\n     */\n/**\n     * @dev The request `deadline` has expired.\n     */\n/**\n     * @dev The request target doesn't trust the `forwarder`.\n     */\n/**\n     * @dev See {EIP712-constructor}.\n     */\n/**\n     * @dev Returns `true` if a request is valid for a provided `signature` at the current block timestamp.\n     *\n     * A transaction is considered valid when the target trusts this forwarder, the request hasn't expired\n     * (deadline is not met), and the signer matches the `from` parameter of the signed request.\n     *\n     * NOTE: A request may return false here but it won't cause {executeBatch} to revert if a refund\n     * receiver is provided.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "execute",
                    "parameters": "ForwardRequestData calldata request",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function execute(ForwardRequestData calldata request) public payable virtual {\n        // We make sure that msg.value and request.value match exactly.\n        // If the request is invalid or the call reverts, this whole function\n        // will revert, ensuring value isn't stuck.\n        if (msg.value != request.value) {\n            revert ERC2771ForwarderMismatchedValue(request.value, msg.value);\n        }\n\n        if (!_execute(request, true)) {\n            revert Errors.FailedCall();\n        }\n    }",
                    "start": "127",
                    "end": "138",
                    "class": "ERC2771Forwarder",
                    "signature": " executeForwardRequestData calldata request",
                    "full_signature": "function execute(ForwardRequestData calldata request) public virtual payable ",
                    "class_method_signature": "ERC2771Forwarder.executeForwardRequestData calldata request",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Executes a `request` on behalf of `signature`'s signer using the ERC-2771 protocol. The gas\n     * provided to the requested call may not be exactly the amount requested, but the call will not run\n     * out of gas. Will revert if the request is invalid or the call reverts, in this case the nonce is not consumed.\n     *\n     * Requirements:\n     *\n     * - The request value should be equal to the provided `msg.value`.\n     * - The request should be valid according to {verify}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "executeBatch",
                    "parameters": "ForwardRequestData[] calldata requests, address payable refundReceiver",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function executeBatch(\n        ForwardRequestData[] calldata requests,\n        address payable refundReceiver\n    ) public payable virtual {\n        bool atomic = refundReceiver == address(0);\n\n        uint256 requestsValue;\n        uint256 refundValue;\n\n        for (uint256 i; i < requests.length; ++i) {\n            requestsValue += requests[i].value;\n            bool success = _execute(requests[i], atomic);\n            if (!success) {\n                refundValue += requests[i].value;\n            }\n        }\n\n        // The batch should revert if there's a mismatched msg.value provided\n        // to avoid request value tampering\n        if (requestsValue != msg.value) {\n            revert ERC2771ForwarderMismatchedValue(requestsValue, msg.value);\n        }\n\n        // Some requests with value were invalid (possibly due to frontrunning).\n        // To avoid leaving ETH in the contract this value is refunded.\n        if (refundValue != 0) {\n            // We know refundReceiver != address(0) && requestsValue == msg.value\n            // meaning we can ensure refundValue is not taken from the original contract's balance\n            // and refundReceiver is a known account.\n            Address.sendValue(refundReceiver, refundValue);\n        }\n    }",
                    "start": "163",
                    "end": "194",
                    "class": "ERC2771Forwarder",
                    "signature": " executeBatchForwardRequestData[] calldata requests, address payable refundReceiver",
                    "full_signature": "function executeBatch(ForwardRequestData[] calldata requests, address payable refundReceiver) public virtual payable ",
                    "class_method_signature": "ERC2771Forwarder.executeBatchForwardRequestData[] calldata requests, address payable refundReceiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Batch version of {execute} with optional refunding and atomic execution.\n     *\n     * In case a batch contains at least one invalid request (see {verify}), the\n     * request will be skipped and the `refundReceiver` parameter will receive back the\n     * unused requested value at the end of the execution. This is done to prevent reverting\n     * the entire batch when a request is invalid or has already been submitted.\n     *\n     * If the `refundReceiver` is the `address(0)`, this function will revert when at least\n     * one of the requests was not valid instead of skipping it. This could be useful if\n     * a batch is required to get executed atomically (at least at the top-level). For example,\n     * refunding (and thus atomicity) can be opt-out if the relayer is using a service that avoids\n     * including reverted transactions.\n     *\n     * Requirements:\n     *\n     * - The sum of the requests' values should be equal to the provided `msg.value`.\n     * - All of the requests should be valid (see {verify}) when `refundReceiver` is the zero address.\n     *\n     * NOTE: Setting a zero `refundReceiver` guarantees an all-or-nothing requests execution only for\n     * the first-level forwarded calls. In case a forwarded request calls to a contract with another\n     * subcall, the second-level call may revert without the top-level call reverting.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_validate",
                    "parameters": "ForwardRequestData calldata request",
                    "modifiers": "view",
                    "return": "returns (bool isTrustedForwarder, bool active, bool signerMatch, address signer)",
                    "body": "function _validate(\n        ForwardRequestData calldata request\n    ) internal view virtual returns (bool isTrustedForwarder, bool active, bool signerMatch, address signer) {\n        (bool isValid, address recovered) = _recoverForwardRequestSigner(request);\n\n        return (\n            _isTrustedByTarget(request.to),\n            request.deadline >= block.timestamp,\n            isValid && recovered == request.from,\n            recovered\n        );\n    }",
                    "start": "200",
                    "end": "211",
                    "class": "ERC2771Forwarder",
                    "signature": "returns (bool isTrustedForwarder, bool active, bool signerMatch, address signer) _validateForwardRequestData calldata request",
                    "full_signature": "function _validate(ForwardRequestData calldata request) internal virtual view returns (bool isTrustedForwarder, bool active, bool signerMatch, address signer)",
                    "class_method_signature": "ERC2771Forwarder._validateForwardRequestData calldata request",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Validates if the provided request can be executed at current block timestamp with\n     * the given `request.signature` on behalf of `request.signer`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_recoverForwardRequestSigner",
                    "parameters": "ForwardRequestData calldata request",
                    "modifiers": "view",
                    "return": "returns (bool isValid, address signer)",
                    "body": "function _recoverForwardRequestSigner(\n        ForwardRequestData calldata request\n    ) internal view virtual returns (bool isValid, address signer) {\n        (address recovered, ECDSA.RecoverError err, ) = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    _FORWARD_REQUEST_TYPEHASH,\n                    request.from,\n                    request.to,\n                    request.value,\n                    request.gas,\n                    nonces(request.from),\n                    request.deadline,\n                    keccak256(request.data)\n                )\n            )\n        ).tryRecover(request.signature);\n\n        return (err == ECDSA.RecoverError.NoError, recovered);\n    }",
                    "start": "219",
                    "end": "238",
                    "class": "ERC2771Forwarder",
                    "signature": "returns (bool isValid, address signer) _recoverForwardRequestSignerForwardRequestData calldata request",
                    "full_signature": "function _recoverForwardRequestSigner(ForwardRequestData calldata request) internal virtual view returns (bool isValid, address signer)",
                    "class_method_signature": "ERC2771Forwarder._recoverForwardRequestSignerForwardRequestData calldata request",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns a tuple with the recovered the signer of an EIP712 forward request message hash\n     * and a boolean indicating if the signature is valid.\n     *\n     * NOTE: The signature is considered valid if {ECDSA-tryRecover} indicates no recover error for it.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_execute",
                    "parameters": "ForwardRequestData calldata request, bool requireValidRequest",
                    "modifiers": "",
                    "return": "returns (bool success)",
                    "body": "function _execute(\n        ForwardRequestData calldata request,\n        bool requireValidRequest\n    ) internal virtual returns (bool success) {\n        (bool isTrustedForwarder, bool active, bool signerMatch, address signer) = _validate(request);\n\n        // Need to explicitly specify if a revert is required since non-reverting is default for\n        // batches and reversion is opt-in since it could be useful in some scenarios\n        if (requireValidRequest) {\n            if (!isTrustedForwarder) {\n                revert ERC2771UntrustfulTarget(request.to, address(this));\n            }\n\n            if (!active) {\n                revert ERC2771ForwarderExpiredRequest(request.deadline);\n            }\n\n            if (!signerMatch) {\n                revert ERC2771ForwarderInvalidSigner(signer, request.from);\n            }\n        }\n\n        // Ignore an invalid request because requireValidRequest = false\n        if (isTrustedForwarder && signerMatch && active) {\n            // Nonce should be used before the call to prevent reusing by reentrancy\n            uint256 currentNonce = _useNonce(signer);\n\n            uint256 reqGas = request.gas;\n            address to = request.to;\n            uint256 value = request.value;\n            bytes memory data = abi.encodePacked(request.data, request.from);\n\n            uint256 gasLeft;\n\n            assembly (\"memory-safe\") {\n                success := call(reqGas, to, value, add(data, 0x20), mload(data), 0, 0)\n                gasLeft := gas()\n            }\n\n            _checkForwardedGas(gasLeft, request);\n\n            emit ExecutedForwardRequest(signer, currentNonce, success);\n        }\n    }",
                    "start": "255",
                    "end": "298",
                    "class": "ERC2771Forwarder",
                    "signature": "returns (bool success) _executeForwardRequestData calldata request, bool requireValidRequest",
                    "full_signature": "function _execute(ForwardRequestData calldata request, bool requireValidRequest) internal virtual  returns (bool success)",
                    "class_method_signature": "ERC2771Forwarder._executeForwardRequestData calldata request, bool requireValidRequest",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Validates and executes a signed request returning the request call `success` value.\n     *\n     * Internal function without msg.value validation.\n     *\n     * Requirements:\n     *\n     * - The caller must have provided enough gas to forward with the call.\n     * - The request must be valid (see {verify}) if the `requireValidRequest` is true.\n     *\n     * Emits an {ExecutedForwardRequest} event.\n     *\n     * IMPORTANT: Using this function doesn't check that all the `msg.value` was sent, potentially\n     * leaving value stuck in the contract.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_isTrustedByTarget",
                    "parameters": "address target",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isTrustedByTarget(address target) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this)));\n\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            // Perform the staticcall and save the result in the scratch space.\n            // | Location  | Content  | Content (Hex)                                                      |\n            // |-----------|----------|--------------------------------------------------------------------|\n            // |           |          |                                                           result \u2193 |\n            // | 0x00:0x1F | selector | 0x0000000000000000000000000000000000000000000000000000000000000001 |\n            success := staticcall(gas(), target, add(encodedParams, 0x20), mload(encodedParams), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }",
                    "start": "306",
                    "end": "324",
                    "class": "ERC2771Forwarder",
                    "signature": "returns (bool) _isTrustedByTargetaddress target",
                    "full_signature": "function _isTrustedByTarget(address target) private  view returns (bool)",
                    "class_method_signature": "ERC2771Forwarder._isTrustedByTargetaddress target",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether the target trusts this forwarder.\n     *\n     * This function performs a static call to the target contract calling the\n     * {ERC2771Context-isTrustedForwarder} function.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_checkForwardedGas",
                    "parameters": "uint256 gasLeft, ForwardRequestData calldata request",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private pure {\n        // To avoid insufficient gas griefing attacks, as referenced in https://ronan.eth.limo/blog/ethereum-gas-dangers/\n        //\n        // A malicious relayer can attempt to shrink the gas forwarded so that the underlying call reverts out-of-gas\n        // but the forwarding itself still succeeds. In order to make sure that the subcall received sufficient gas,\n        // we will inspect gasleft() after the forwarding.\n        //\n        // Let X be the gas available before the subcall, such that the subcall gets at most X * 63 / 64.\n        // We can't know X after CALL dynamic costs, but we want it to be such that X * 63 / 64 >= req.gas.\n        // Let Y be the gas used in the subcall. gasleft() measured immediately after the subcall will be gasleft() = X - Y.\n        // If the subcall ran out of gas, then Y = X * 63 / 64 and gasleft() = X - Y = X / 64.\n        // Under this assumption req.gas / 63 > gasleft() is true if and only if\n        // req.gas / 63 > X / 64, or equivalently req.gas > X * 63 / 64.\n        // This means that if the subcall runs out of gas we are able to detect that insufficient gas was passed.\n        //\n        // We will now also see that req.gas / 63 > gasleft() implies that req.gas >= X * 63 / 64.\n        // The contract guarantees Y <= req.gas, thus gasleft() = X - Y >= X - req.gas.\n        // -    req.gas / 63 > gasleft()\n        // -    req.gas / 63 >= X - req.gas\n        // -    req.gas >= X * 63 / 64\n        // In other words if req.gas < X * 63 / 64 then req.gas / 63 <= gasleft(), thus if the relayer behaves honestly\n        // the forwarding does not revert.\n        if (gasLeft < request.gas / 63) {\n            // We explicitly trigger invalid opcode to consume all gas and bubble-up the effects, since\n            // neither revert or assert consume all gas since Solidity 0.8.20\n            // https://docs.soliditylang.org/en/v0.8.20/control-structures.html#panic-via-assert-and-error-via-require\n            assembly (\"memory-safe\") {\n                invalid()\n            }\n        }\n    }",
                    "start": "338",
                    "end": "368",
                    "class": "ERC2771Forwarder",
                    "signature": " _checkForwardedGasuint256 gasLeft, ForwardRequestData calldata request",
                    "full_signature": "function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private  pure ",
                    "class_method_signature": "ERC2771Forwarder._checkForwardedGasuint256 gasLeft, ForwardRequestData calldata request",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Checks if the requested gas was correctly forwarded to the callee.\n     *\n     * As a consequence of https://eips.ethereum.org/EIPS/eip-150[EIP-150]:\n     * - At most `gasleft() - floor(gasleft() / 64)` is forwarded to the callee.\n     * - At least `floor(gasleft() / 64)` is kept in the caller.\n     *\n     * It reverts consuming all the available gas if the forwarded gas is not the requested gas.\n     *\n     * IMPORTANT: The `gasLeft` parameter should be measured exactly at the end of the forwarded call.\n     * Any gas consumed in between will make room for bypassing this check.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/governance/IGovernor.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/governance/TimelockController.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(AccessControl, ERC1155Holder)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(AccessControl, ERC1155Holder) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }",
                    "start": "160",
                    "end": "164",
                    "class": "TimelockController",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(AccessControl, ERC1155Holder) returns (bool)",
                    "class_method_signature": "TimelockController.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mismatch between the parameters length for an operation call.\n     */\n/**\n     * @dev The schedule operation doesn't meet the minimum delay.\n     */\n/**\n     * @dev The current state of an operation is not as required.\n     * The `expectedStates` is a bitmap with the bits enabled for each OperationState enum position\n     * counting from right to left.\n     *\n     * See {_encodeStateBitmap}.\n     */\n/**\n     * @dev The predecessor to an operation not yet done.\n     */\n/**\n     * @dev The caller account is not authorized.\n     */\n/**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n/**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n/**\n     * @dev Emitted when new proposal is scheduled with non-zero salt.\n     */\n/**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n/**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n/**\n     * @dev Initializes the contract with the following parameters:\n     *\n     * - `minDelay`: initial minimum delay in seconds for operations\n     * - `proposers`: accounts to be granted proposer and canceller roles\n     * - `executors`: accounts to be granted executor role\n     * - `admin`: optional account to be granted admin role; disable with zero address\n     *\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\n     * without being subject to delay, but this role should be subsequently renounced in favor of\n     * administration through timelocked proposals. Previous versions of this contract would assign\n     * this admin to the deployer automatically and should be renounced as well.\n     */\n/**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n/**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isOperation",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isOperation(bytes32 id) public view returns (bool) {\n        return getOperationState(id) != OperationState.Unset;\n    }",
                    "start": "170",
                    "end": "172",
                    "class": "TimelockController",
                    "signature": "returns (bool) isOperationbytes32 id",
                    "full_signature": "function isOperation(bytes32 id) public  view returns (bool)",
                    "class_method_signature": "TimelockController.isOperationbytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether an id corresponds to a registered operation. This\n     * includes both Waiting, Ready, and Done operations.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isOperationPending",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isOperationPending(bytes32 id) public view returns (bool) {\n        OperationState state = getOperationState(id);\n        return state == OperationState.Waiting || state == OperationState.Ready;\n    }",
                    "start": "177",
                    "end": "180",
                    "class": "TimelockController",
                    "signature": "returns (bool) isOperationPendingbytes32 id",
                    "full_signature": "function isOperationPending(bytes32 id) public  view returns (bool)",
                    "class_method_signature": "TimelockController.isOperationPendingbytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether an operation is pending or not. Note that a \"pending\" operation may also be \"ready\".\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isOperationReady",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isOperationReady(bytes32 id) public view returns (bool) {\n        return getOperationState(id) == OperationState.Ready;\n    }",
                    "start": "185",
                    "end": "187",
                    "class": "TimelockController",
                    "signature": "returns (bool) isOperationReadybytes32 id",
                    "full_signature": "function isOperationReady(bytes32 id) public  view returns (bool)",
                    "class_method_signature": "TimelockController.isOperationReadybytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether an operation is ready for execution. Note that a \"ready\" operation is also \"pending\".\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isOperationDone",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isOperationDone(bytes32 id) public view returns (bool) {\n        return getOperationState(id) == OperationState.Done;\n    }",
                    "start": "192",
                    "end": "194",
                    "class": "TimelockController",
                    "signature": "returns (bool) isOperationDonebytes32 id",
                    "full_signature": "function isOperationDone(bytes32 id) public  view returns (bool)",
                    "class_method_signature": "TimelockController.isOperationDonebytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether an operation is done or not.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getTimestamp",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getTimestamp(bytes32 id) public view virtual returns (uint256) {\n        return _timestamps[id];\n    }",
                    "start": "200",
                    "end": "202",
                    "class": "TimelockController",
                    "signature": "returns (uint256) getTimestampbytes32 id",
                    "full_signature": "function getTimestamp(bytes32 id) public virtual view returns (uint256)",
                    "class_method_signature": "TimelockController.getTimestampbytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the timestamp at which an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getOperationState",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (OperationState)",
                    "body": "function getOperationState(bytes32 id) public view virtual returns (OperationState) {\n        uint256 timestamp = getTimestamp(id);\n        if (timestamp == 0) {\n            return OperationState.Unset;\n        } else if (timestamp == _DONE_TIMESTAMP) {\n            return OperationState.Done;\n        } else if (timestamp > block.timestamp) {\n            return OperationState.Waiting;\n        } else {\n            return OperationState.Ready;\n        }\n    }",
                    "start": "207",
                    "end": "218",
                    "class": "TimelockController",
                    "signature": "returns (OperationState) getOperationStatebytes32 id",
                    "full_signature": "function getOperationState(bytes32 id) public virtual view returns (OperationState)",
                    "class_method_signature": "TimelockController.getOperationStatebytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns operation state.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getMinDelay",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getMinDelay() public view virtual returns (uint256) {\n        return _minDelay;\n    }",
                    "start": "225",
                    "end": "227",
                    "class": "TimelockController",
                    "signature": "returns (uint256) getMinDelay",
                    "full_signature": "function getMinDelay() public virtual view returns (uint256)",
                    "class_method_signature": "TimelockController.getMinDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the minimum delay in seconds for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "hashOperation",
                    "parameters": "address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }",
                    "start": "233",
                    "end": "241",
                    "class": "TimelockController",
                    "signature": "returns (bytes32) hashOperationaddress target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt",
                    "full_signature": "function hashOperation(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public virtual pure returns (bytes32)",
                    "class_method_signature": "TimelockController.hashOperationaddress target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "hashOperationBatch",
                    "parameters": "address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\n    }",
                    "start": "247",
                    "end": "255",
                    "class": "TimelockController",
                    "signature": "returns (bytes32) hashOperationBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "full_signature": "function hashOperationBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt) public virtual pure returns (bytes32)",
                    "class_method_signature": "TimelockController.hashOperationBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "schedule",
                    "parameters": "address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "modifiers": "",
                    "return": "",
                    "body": "function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }",
                    "start": "266",
                    "end": "280",
                    "class": "TimelockController",
                    "signature": " scheduleaddress target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "full_signature": "function schedule(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual  ",
                    "class_method_signature": "TimelockController.scheduleaddress target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits {CallSalt} if salt is nonzero, and {CallScheduled}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "scheduleBatch",
                    "parameters": "address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "modifiers": "",
                    "return": "",
                    "body": "function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        if (targets.length != values.length || targets.length != payloads.length) {\n            revert TimelockInvalidOperationLength(targets.length, payloads.length, values.length);\n        }\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\n        }\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }",
                    "start": "291",
                    "end": "311",
                    "class": "TimelockController",
                    "signature": " scheduleBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "full_signature": "function scheduleBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual  ",
                    "class_method_signature": "TimelockController.scheduleBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_schedule",
                    "parameters": "bytes32 id, uint256 delay",
                    "modifiers": "",
                    "return": "",
                    "body": "function _schedule(bytes32 id, uint256 delay) private {\n        if (isOperation(id)) {\n            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Unset));\n        }\n        uint256 minDelay = getMinDelay();\n        if (delay < minDelay) {\n            revert TimelockInsufficientDelay(delay, minDelay);\n        }\n        _timestamps[id] = block.timestamp + delay;\n    }",
                    "start": "316",
                    "end": "325",
                    "class": "TimelockController",
                    "signature": " _schedulebytes32 id, uint256 delay",
                    "full_signature": "function _schedule(bytes32 id, uint256 delay) private   ",
                    "class_method_signature": "TimelockController._schedulebytes32 id, uint256 delay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Schedule an operation that is to become valid after a given delay.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "cancel",
                    "parameters": "bytes32 id",
                    "modifiers": "",
                    "return": "",
                    "body": "function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\n        if (!isOperationPending(id)) {\n            revert TimelockUnexpectedOperationState(\n                id,\n                _encodeStateBitmap(OperationState.Waiting) | _encodeStateBitmap(OperationState.Ready)\n            );\n        }\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }",
                    "start": "334",
                    "end": "344",
                    "class": "TimelockController",
                    "signature": " cancelbytes32 id",
                    "full_signature": "function cancel(bytes32 id) public virtual  ",
                    "class_method_signature": "TimelockController.cancelbytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'canceller' role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "execute",
                    "parameters": "address target, uint256 value, bytes calldata payload, bytes32 predecessor, bytes32 salt",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function execute(\n        address target,\n        uint256 value,\n        bytes calldata payload,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        _execute(target, value, payload);\n        emit CallExecuted(id, 0, target, value, payload);\n        _afterCall(id);\n    }",
                    "start": "358",
                    "end": "371",
                    "class": "TimelockController",
                    "signature": " executeaddress target, uint256 value, bytes calldata payload, bytes32 predecessor, bytes32 salt",
                    "full_signature": "function execute(address target, uint256 value, bytes calldata payload, bytes32 predecessor, bytes32 salt) public virtual payable ",
                    "class_method_signature": "TimelockController.executeaddress target, uint256 value, bytes calldata payload, bytes32 predecessor, bytes32 salt",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n// This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n// thus any modifications to the operation during reentrancy should be caught.\n// slither-disable-next-line reentrancy-eth\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "executeBatch",
                    "parameters": "address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        if (targets.length != values.length || targets.length != payloads.length) {\n            revert TimelockInvalidOperationLength(targets.length, payloads.length, values.length);\n        }\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            address target = targets[i];\n            uint256 value = values[i];\n            bytes calldata payload = payloads[i];\n            _execute(target, value, payload);\n            emit CallExecuted(id, i, target, value, payload);\n        }\n        _afterCall(id);\n    }",
                    "start": "385",
                    "end": "407",
                    "class": "TimelockController",
                    "signature": " executeBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "full_signature": "function executeBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt) public virtual payable ",
                    "class_method_signature": "TimelockController.executeBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n// This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n// thus any modifications to the operation during reentrancy should be caught.\n// slither-disable-next-line reentrancy-eth\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_execute",
                    "parameters": "address target, uint256 value, bytes calldata data",
                    "modifiers": "",
                    "return": "",
                    "body": "function _execute(address target, uint256 value, bytes calldata data) internal virtual {\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        Address.verifyCallResult(success, returndata);\n    }",
                    "start": "412",
                    "end": "415",
                    "class": "TimelockController",
                    "signature": " _executeaddress target, uint256 value, bytes calldata data",
                    "full_signature": "function _execute(address target, uint256 value, bytes calldata data) internal virtual  ",
                    "class_method_signature": "TimelockController._executeaddress target, uint256 value, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Execute an operation's call.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_beforeCall",
                    "parameters": "bytes32 id, bytes32 predecessor",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        if (!isOperationReady(id)) {\n            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Ready));\n        }\n        if (predecessor != bytes32(0) && !isOperationDone(predecessor)) {\n            revert TimelockUnexecutedPredecessor(predecessor);\n        }\n    }",
                    "start": "420",
                    "end": "427",
                    "class": "TimelockController",
                    "signature": " _beforeCallbytes32 id, bytes32 predecessor",
                    "full_signature": "function _beforeCall(bytes32 id, bytes32 predecessor) private  view ",
                    "class_method_signature": "TimelockController._beforeCallbytes32 id, bytes32 predecessor",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Checks before execution of an operation's calls.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_afterCall",
                    "parameters": "bytes32 id",
                    "modifiers": "",
                    "return": "",
                    "body": "function _afterCall(bytes32 id) private {\n        if (!isOperationReady(id)) {\n            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Ready));\n        }\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }",
                    "start": "432",
                    "end": "437",
                    "class": "TimelockController",
                    "signature": " _afterCallbytes32 id",
                    "full_signature": "function _afterCall(bytes32 id) private   ",
                    "class_method_signature": "TimelockController._afterCallbytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Checks after execution of an operation's calls.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "updateDelay",
                    "parameters": "uint256 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function updateDelay(uint256 newDelay) external virtual {\n        address sender = _msgSender();\n        if (sender != address(this)) {\n            revert TimelockUnauthorizedCaller(sender);\n        }\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }",
                    "start": "449",
                    "end": "456",
                    "class": "TimelockController",
                    "signature": " updateDelayuint256 newDelay",
                    "full_signature": "function updateDelay(uint256 newDelay) external virtual  ",
                    "class_method_signature": "TimelockController.updateDelayuint256 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "_encodeStateBitmap",
                    "parameters": "OperationState operationState",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function _encodeStateBitmap(OperationState operationState) internal pure returns (bytes32) {\n        return bytes32(1 << uint8(operationState));\n    }",
                    "start": "469",
                    "end": "471",
                    "class": "TimelockController",
                    "signature": "returns (bytes32) _encodeStateBitmapOperationState operationState",
                    "full_signature": "function _encodeStateBitmap(OperationState operationState) internal  pure returns (bytes32)",
                    "class_method_signature": "TimelockController._encodeStateBitmapOperationState operationState",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Encodes a `OperationState` into a `bytes32` representation where each bit enabled corresponds to\n     * the underlying position in the `OperationState` enum. For example:\n     *\n     * 0x000...1000\n     *   ^^^^^^----- ...\n     *         ^---- Done\n     *          ^--- Ready\n     *           ^-- Waiting\n     *            ^- Unset\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/governance/utils/Votes.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "clock",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function clock() public view virtual returns (uint48) {\n        return Time.blockNumber();\n    }",
                    "start": "58",
                    "end": "60",
                    "class": "Votes",
                    "signature": "returns (uint48) clock",
                    "full_signature": "function clock() public virtual view returns (uint48)",
                    "class_method_signature": "Votes.clock",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The clock was incorrectly modified.\n     */\n/**\n     * @dev Lookup to future votes is not available.\n     */\n/**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\n     * checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public view virtual returns (string memory) {\n        // Check that the clock was not modified\n        if (clock() != Time.blockNumber()) {\n            revert ERC6372InconsistentClock();\n        }\n        return \"mode=blocknumber&from=default\";\n    }",
                    "start": "66",
                    "end": "72",
                    "class": "Votes",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public virtual view returns (string memory)",
                    "class_method_signature": "Votes.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Machine-readable description of the clock as specified in ERC-6372.\n     */\n// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getVotes",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getVotes(address account) public view virtual returns (uint256) {\n        return _delegateCheckpoints[account].latest();\n    }",
                    "start": "77",
                    "end": "79",
                    "class": "Votes",
                    "signature": "returns (uint256) getVotesaddress account",
                    "full_signature": "function getVotes(address account) public virtual view returns (uint256)",
                    "class_method_signature": "Votes.getVotesaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getPastVotes",
                    "parameters": "address account, uint256 timepoint",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\n        uint48 currentTimepoint = clock();\n        if (timepoint >= currentTimepoint) {\n            revert ERC5805FutureLookup(timepoint, currentTimepoint);\n        }\n        return _delegateCheckpoints[account].upperLookupRecent(SafeCast.toUint48(timepoint));\n    }",
                    "start": "89",
                    "end": "95",
                    "class": "Votes",
                    "signature": "returns (uint256) getPastVotesaddress account, uint256 timepoint",
                    "full_signature": "function getPastVotes(address account, uint256 timepoint) public virtual view returns (uint256)",
                    "class_method_signature": "Votes.getPastVotesaddress account, uint256 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getPastTotalSupply",
                    "parameters": "uint256 timepoint",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getPastTotalSupply(uint256 timepoint) public view virtual returns (uint256) {\n        uint48 currentTimepoint = clock();\n        if (timepoint >= currentTimepoint) {\n            revert ERC5805FutureLookup(timepoint, currentTimepoint);\n        }\n        return _totalCheckpoints.upperLookupRecent(SafeCast.toUint48(timepoint));\n    }",
                    "start": "109",
                    "end": "115",
                    "class": "Votes",
                    "signature": "returns (uint256) getPastTotalSupplyuint256 timepoint",
                    "full_signature": "function getPastTotalSupply(uint256 timepoint) public virtual view returns (uint256)",
                    "class_method_signature": "Votes.getPastTotalSupplyuint256 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_getTotalSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _getTotalSupply() internal view virtual returns (uint256) {\n        return _totalCheckpoints.latest();\n    }",
                    "start": "120",
                    "end": "122",
                    "class": "Votes",
                    "signature": "returns (uint256) _getTotalSupply",
                    "full_signature": "function _getTotalSupply() internal virtual view returns (uint256)",
                    "class_method_signature": "Votes._getTotalSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the current total supply of votes.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "delegates",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function delegates(address account) public view virtual returns (address) {\n        return _delegatee[account];\n    }",
                    "start": "127",
                    "end": "129",
                    "class": "Votes",
                    "signature": "returns (address) delegatesaddress account",
                    "full_signature": "function delegates(address account) public virtual view returns (address)",
                    "class_method_signature": "Votes.delegatesaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "delegate",
                    "parameters": "address delegatee",
                    "modifiers": "",
                    "return": "",
                    "body": "function delegate(address delegatee) public virtual {\n        address account = _msgSender();\n        _delegate(account, delegatee);\n    }",
                    "start": "134",
                    "end": "137",
                    "class": "Votes",
                    "signature": " delegateaddress delegatee",
                    "full_signature": "function delegate(address delegatee) public virtual  ",
                    "class_method_signature": "Votes.delegateaddress delegatee",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "delegateBySig",
                    "parameters": "address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "modifiers": "",
                    "return": "",
                    "body": "function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > expiry) {\n            revert VotesExpiredSignature(expiry);\n        }\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        _useCheckedNonce(signer, nonce);\n        _delegate(signer, delegatee);\n    }",
                    "start": "142",
                    "end": "161",
                    "class": "Votes",
                    "signature": " delegateBySigaddress delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "full_signature": "function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) public virtual  ",
                    "class_method_signature": "Votes.delegateBySigaddress delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_delegate",
                    "parameters": "address account, address delegatee",
                    "modifiers": "",
                    "return": "",
                    "body": "function _delegate(address account, address delegatee) internal virtual {\n        address oldDelegate = delegates(account);\n        _delegatee[account] = delegatee;\n\n        emit DelegateChanged(account, oldDelegate, delegatee);\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\n    }",
                    "start": "168",
                    "end": "174",
                    "class": "Votes",
                    "signature": " _delegateaddress account, address delegatee",
                    "full_signature": "function _delegate(address account, address delegatee) internal virtual  ",
                    "class_method_signature": "Votes._delegateaddress account, address delegatee",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\n     *\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_transferVotingUnits",
                    "parameters": "address from, address to, uint256 amount",
                    "modifiers": "",
                    "return": "",
                    "body": "function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {\n        if (from == address(0)) {\n            _push(_totalCheckpoints, _add, SafeCast.toUint208(amount));\n        }\n        if (to == address(0)) {\n            _push(_totalCheckpoints, _subtract, SafeCast.toUint208(amount));\n        }\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\n    }",
                    "start": "180",
                    "end": "188",
                    "class": "Votes",
                    "signature": " _transferVotingUnitsaddress from, address to, uint256 amount",
                    "full_signature": "function _transferVotingUnits(address from, address to, uint256 amount) internal virtual  ",
                    "class_method_signature": "Votes._transferVotingUnitsaddress from, address to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_moveDelegateVotes",
                    "parameters": "address from, address to, uint256 amount",
                    "modifiers": "",
                    "return": "",
                    "body": "function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual {\n        if (from != to && amount > 0) {\n            if (from != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _push(\n                    _delegateCheckpoints[from],\n                    _subtract,\n                    SafeCast.toUint208(amount)\n                );\n                emit DelegateVotesChanged(from, oldValue, newValue);\n            }\n            if (to != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _push(\n                    _delegateCheckpoints[to],\n                    _add,\n                    SafeCast.toUint208(amount)\n                );\n                emit DelegateVotesChanged(to, oldValue, newValue);\n            }\n        }\n    }",
                    "start": "193",
                    "end": "212",
                    "class": "Votes",
                    "signature": " _moveDelegateVotesaddress from, address to, uint256 amount",
                    "full_signature": "function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual  ",
                    "class_method_signature": "Votes._moveDelegateVotesaddress from, address to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Moves delegated votes from one delegate to another.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_numCheckpoints",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function _numCheckpoints(address account) internal view virtual returns (uint32) {\n        return SafeCast.toUint32(_delegateCheckpoints[account].length());\n    }",
                    "start": "217",
                    "end": "219",
                    "class": "Votes",
                    "signature": "returns (uint32) _numCheckpointsaddress account",
                    "full_signature": "function _numCheckpoints(address account) internal virtual view returns (uint32)",
                    "class_method_signature": "Votes._numCheckpointsaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get number of checkpoints for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_checkpoints",
                    "parameters": "address account, uint32 pos",
                    "modifiers": "view",
                    "return": "returns (Checkpoints.Checkpoint208 memory)",
                    "body": "function _checkpoints(\n        address account,\n        uint32 pos\n    ) internal view virtual returns (Checkpoints.Checkpoint208 memory) {\n        return _delegateCheckpoints[account].at(pos);\n    }",
                    "start": "224",
                    "end": "229",
                    "class": "Votes",
                    "signature": "returns (Checkpoints.Checkpoint208 memory) _checkpointsaddress account, uint32 pos",
                    "full_signature": "function _checkpoints(address account, uint32 pos) internal virtual view returns (Checkpoints.Checkpoint208 memory)",
                    "class_method_signature": "Votes._checkpointsaddress account, uint32 pos",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getVotingUnits",
                    "parameters": "address",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _getVotingUnits(address) internal view virtual returns (uint256);",
                    "start": "250",
                    "end": "250",
                    "class": "Votes",
                    "signature": "returns (uint256) _getVotingUnitsaddress",
                    "full_signature": "function _getVotingUnits(address) internal virtual view returns (uint256)",
                    "class_method_signature": "Votes._getVotingUnitsaddress",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Must return the voting units held by an account.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesQuorumFraction.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "quorumNumerator",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function quorumNumerator() public view virtual returns (uint256) {\n        return _quorumNumeratorHistory.latest();\n    }",
                    "start": "40",
                    "end": "42",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": "returns (uint256) quorumNumerator",
                    "full_signature": "function quorumNumerator() public virtual view returns (uint256)",
                    "class_method_signature": "GovernorVotesQuorumFraction.quorumNumerator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The quorum set is not a valid fraction.\n     */\n/**\n     * @dev Initialize quorum as a fraction of the token's total supply.\n     *\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\n     * customized by overriding {quorumDenominator}.\n     */\n/**\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "quorumNumerator",
                    "parameters": "uint256 timepoint",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function quorumNumerator(uint256 timepoint) public view virtual returns (uint256) {\n        uint256 length = _quorumNumeratorHistory._checkpoints.length;\n\n        // Optimistic search, check the latest checkpoint\n        Checkpoints.Checkpoint208 storage latest = _quorumNumeratorHistory._checkpoints[length - 1];\n        uint48 latestKey = latest._key;\n        uint208 latestValue = latest._value;\n        if (latestKey <= timepoint) {\n            return latestValue;\n        }\n\n        // Otherwise, do the binary search\n        return _quorumNumeratorHistory.upperLookupRecent(SafeCast.toUint48(timepoint));\n    }",
                    "start": "47",
                    "end": "60",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": "returns (uint256) quorumNumeratoruint256 timepoint",
                    "full_signature": "function quorumNumerator(uint256 timepoint) public virtual view returns (uint256)",
                    "class_method_signature": "GovernorVotesQuorumFraction.quorumNumeratoruint256 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the quorum numerator at a specific timepoint. See {quorumDenominator}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "quorumDenominator",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function quorumDenominator() public view virtual returns (uint256) {\n        return 100;\n    }",
                    "start": "65",
                    "end": "67",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": "returns (uint256) quorumDenominator",
                    "full_signature": "function quorumDenominator() public virtual view returns (uint256)",
                    "class_method_signature": "GovernorVotesQuorumFraction.quorumDenominator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "quorum",
                    "parameters": "uint256 timepoint",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function quorum(uint256 timepoint) public view virtual override returns (uint256) {\n        return (token().getPastTotalSupply(timepoint) * quorumNumerator(timepoint)) / quorumDenominator();\n    }",
                    "start": "72",
                    "end": "74",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": "returns (uint256) quorumuint256 timepoint",
                    "full_signature": "function quorum(uint256 timepoint) public virtual override returns (uint256)",
                    "class_method_signature": "GovernorVotesQuorumFraction.quorumuint256 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the quorum for a timepoint, in terms of number of votes: `supply * numerator / denominator`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "updateQuorumNumerator",
                    "parameters": "uint256 newQuorumNumerator",
                    "modifiers": "",
                    "return": "",
                    "body": "function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\n        _updateQuorumNumerator(newQuorumNumerator);\n    }",
                    "start": "86",
                    "end": "88",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": " updateQuorumNumeratoruint256 newQuorumNumerator",
                    "full_signature": "function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual  ",
                    "class_method_signature": "GovernorVotesQuorumFraction.updateQuorumNumeratoruint256 newQuorumNumerator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - Must be called through a governance proposal.\n     * - New numerator must be smaller or equal to the denominator.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "_updateQuorumNumerator",
                    "parameters": "uint256 newQuorumNumerator",
                    "modifiers": "",
                    "return": "",
                    "body": "function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\n        uint256 denominator = quorumDenominator();\n        if (newQuorumNumerator > denominator) {\n            revert GovernorInvalidQuorumFraction(newQuorumNumerator, denominator);\n        }\n\n        uint256 oldQuorumNumerator = quorumNumerator();\n        _quorumNumeratorHistory.push(clock(), SafeCast.toUint208(newQuorumNumerator));\n\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\n    }",
                    "start": "99",
                    "end": "109",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": " _updateQuorumNumeratoruint256 newQuorumNumerator",
                    "full_signature": "function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual  ",
                    "class_method_signature": "GovernorVotesQuorumFraction._updateQuorumNumeratoruint256 newQuorumNumerator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - New numerator must be smaller or equal to the denominator.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorSettings.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "votingDelay",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function votingDelay() public view virtual override returns (uint256) {\n        return _votingDelay;\n    }",
                    "start": "35",
                    "end": "37",
                    "class": "GovernorSettings",
                    "signature": "returns (uint256) votingDelay",
                    "full_signature": "function votingDelay() public virtual override returns (uint256)",
                    "class_method_signature": "GovernorSettings.votingDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// amount of token\n// timepoint: limited to uint48 in core (same as clock() type)\n// duration: limited to uint32 in core\n/**\n     * @dev Initialize the governance parameters.\n     */\n/**\n     * @dev See {IGovernor-votingDelay}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "votingPeriod",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function votingPeriod() public view virtual override returns (uint256) {\n        return _votingPeriod;\n    }",
                    "start": "42",
                    "end": "44",
                    "class": "GovernorSettings",
                    "signature": "returns (uint256) votingPeriod",
                    "full_signature": "function votingPeriod() public virtual override returns (uint256)",
                    "class_method_signature": "GovernorSettings.votingPeriod",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IGovernor-votingPeriod}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalThreshold",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function proposalThreshold() public view virtual override returns (uint256) {\n        return _proposalThreshold;\n    }",
                    "start": "49",
                    "end": "51",
                    "class": "GovernorSettings",
                    "signature": "returns (uint256) proposalThreshold",
                    "full_signature": "function proposalThreshold() public virtual override returns (uint256)",
                    "class_method_signature": "GovernorSettings.proposalThreshold",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {Governor-proposalThreshold}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setVotingDelay",
                    "parameters": "uint48 newVotingDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function setVotingDelay(uint48 newVotingDelay) public virtual onlyGovernance {\n        _setVotingDelay(newVotingDelay);\n    }",
                    "start": "58",
                    "end": "60",
                    "class": "GovernorSettings",
                    "signature": " setVotingDelayuint48 newVotingDelay",
                    "full_signature": "function setVotingDelay(uint48 newVotingDelay) public virtual  ",
                    "class_method_signature": "GovernorSettings.setVotingDelayuint48 newVotingDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setVotingPeriod",
                    "parameters": "uint32 newVotingPeriod",
                    "modifiers": "",
                    "return": "",
                    "body": "function setVotingPeriod(uint32 newVotingPeriod) public virtual onlyGovernance {\n        _setVotingPeriod(newVotingPeriod);\n    }",
                    "start": "67",
                    "end": "69",
                    "class": "GovernorSettings",
                    "signature": " setVotingPerioduint32 newVotingPeriod",
                    "full_signature": "function setVotingPeriod(uint32 newVotingPeriod) public virtual  ",
                    "class_method_signature": "GovernorSettings.setVotingPerioduint32 newVotingPeriod",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setProposalThreshold",
                    "parameters": "uint256 newProposalThreshold",
                    "modifiers": "",
                    "return": "",
                    "body": "function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\n        _setProposalThreshold(newProposalThreshold);\n    }",
                    "start": "76",
                    "end": "78",
                    "class": "GovernorSettings",
                    "signature": " setProposalThresholduint256 newProposalThreshold",
                    "full_signature": "function setProposalThreshold(uint256 newProposalThreshold) public virtual  ",
                    "class_method_signature": "GovernorSettings.setProposalThresholduint256 newProposalThreshold",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setVotingDelay",
                    "parameters": "uint48 newVotingDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setVotingDelay(uint48 newVotingDelay) internal virtual {\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\n        _votingDelay = newVotingDelay;\n    }",
                    "start": "85",
                    "end": "88",
                    "class": "GovernorSettings",
                    "signature": " _setVotingDelayuint48 newVotingDelay",
                    "full_signature": "function _setVotingDelay(uint48 newVotingDelay) internal virtual  ",
                    "class_method_signature": "GovernorSettings._setVotingDelayuint48 newVotingDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal setter for the voting delay.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setVotingPeriod",
                    "parameters": "uint32 newVotingPeriod",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setVotingPeriod(uint32 newVotingPeriod) internal virtual {\n        if (newVotingPeriod == 0) {\n            revert GovernorInvalidVotingPeriod(0);\n        }\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\n        _votingPeriod = newVotingPeriod;\n    }",
                    "start": "95",
                    "end": "101",
                    "class": "GovernorSettings",
                    "signature": " _setVotingPerioduint32 newVotingPeriod",
                    "full_signature": "function _setVotingPeriod(uint32 newVotingPeriod) internal virtual  ",
                    "class_method_signature": "GovernorSettings._setVotingPerioduint32 newVotingPeriod",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal setter for the voting period.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setProposalThreshold",
                    "parameters": "uint256 newProposalThreshold",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\n        _proposalThreshold = newProposalThreshold;\n    }",
                    "start": "108",
                    "end": "111",
                    "class": "GovernorSettings",
                    "signature": " _setProposalThresholduint256 newProposalThreshold",
                    "full_signature": "function _setProposalThreshold(uint256 newProposalThreshold) internal virtual  ",
                    "class_method_signature": "GovernorSettings._setProposalThresholduint256 newProposalThreshold",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal setter for the proposal threshold.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorPreventLateQuorum.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "proposalDeadline",
                    "parameters": "uint256 proposalId",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\n        return Math.max(super.proposalDeadline(proposalId), _extendedDeadlines[proposalId]);\n    }",
                    "start": "42",
                    "end": "44",
                    "class": "GovernorPreventLateQuorum",
                    "signature": "returns (uint256) proposalDeadlineuint256 proposalId",
                    "full_signature": "function proposalDeadline(uint256 proposalId) public virtual override returns (uint256)",
                    "class_method_signature": "GovernorPreventLateQuorum.proposalDeadlineuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Emitted when a proposal deadline is pushed back due to reaching quorum late in its voting period.\n/// @dev Emitted when the {lateQuorumVoteExtension} parameter is changed.\n/**\n     * @dev Initializes the vote extension parameter: the time in either number of blocks or seconds (depending on the\n     * governor clock mode) that is required to pass since the moment a proposal reaches quorum until its voting period\n     * ends. If necessary the voting period will be extended beyond the one set during proposal creation.\n     */\n/**\n     * @dev Returns the proposal deadline, which may have been extended beyond that set at proposal creation, if the\n     * proposal reached quorum late in the voting period. See {Governor-proposalDeadline}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_castVote",
                    "parameters": "uint256 proposalId, address account, uint8 support, string memory reason, bytes memory params",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason,\n        bytes memory params\n    ) internal virtual override returns (uint256) {\n        uint256 result = super._castVote(proposalId, account, support, reason, params);\n\n        if (_extendedDeadlines[proposalId] == 0 && _quorumReached(proposalId)) {\n            uint48 extendedDeadline = clock() + lateQuorumVoteExtension();\n\n            if (extendedDeadline > proposalDeadline(proposalId)) {\n                emit ProposalExtended(proposalId, extendedDeadline);\n            }\n\n            _extendedDeadlines[proposalId] = extendedDeadline;\n        }\n\n        return result;\n    }",
                    "start": "52",
                    "end": "72",
                    "class": "GovernorPreventLateQuorum",
                    "signature": "returns (uint256) _castVoteuint256 proposalId, address account, uint8 support, string memory reason, bytes memory params",
                    "full_signature": "function _castVote(uint256 proposalId, address account, uint8 support, string memory reason, bytes memory params) internal virtual override returns (uint256)",
                    "class_method_signature": "GovernorPreventLateQuorum._castVoteuint256 proposalId, address account, uint8 support, string memory reason, bytes memory params",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Casts a vote and detects if it caused quorum to be reached, potentially extending the voting period. See\n     * {Governor-_castVote}.\n     *\n     * May emit a {ProposalExtended} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "lateQuorumVoteExtension",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function lateQuorumVoteExtension() public view virtual returns (uint48) {\n        return _voteExtension;\n    }",
                    "start": "78",
                    "end": "80",
                    "class": "GovernorPreventLateQuorum",
                    "signature": "returns (uint48) lateQuorumVoteExtension",
                    "full_signature": "function lateQuorumVoteExtension() public virtual view returns (uint48)",
                    "class_method_signature": "GovernorPreventLateQuorum.lateQuorumVoteExtension",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the current value of the vote extension parameter: the number of blocks that are required to pass\n     * from the time a proposal reaches quorum until its voting period ends.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setLateQuorumVoteExtension",
                    "parameters": "uint48 newVoteExtension",
                    "modifiers": "",
                    "return": "",
                    "body": "function setLateQuorumVoteExtension(uint48 newVoteExtension) public virtual onlyGovernance {\n        _setLateQuorumVoteExtension(newVoteExtension);\n    }",
                    "start": "88",
                    "end": "90",
                    "class": "GovernorPreventLateQuorum",
                    "signature": " setLateQuorumVoteExtensionuint48 newVoteExtension",
                    "full_signature": "function setLateQuorumVoteExtension(uint48 newVoteExtension) public virtual  ",
                    "class_method_signature": "GovernorPreventLateQuorum.setLateQuorumVoteExtensionuint48 newVoteExtension",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Changes the {lateQuorumVoteExtension}. This operation can only be performed by the governance executor,\n     * generally through a governance proposal.\n     *\n     * Emits a {LateQuorumVoteExtensionSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setLateQuorumVoteExtension",
                    "parameters": "uint48 newVoteExtension",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setLateQuorumVoteExtension(uint48 newVoteExtension) internal virtual {\n        emit LateQuorumVoteExtensionSet(_voteExtension, newVoteExtension);\n        _voteExtension = newVoteExtension;\n    }",
                    "start": "98",
                    "end": "101",
                    "class": "GovernorPreventLateQuorum",
                    "signature": " _setLateQuorumVoteExtensionuint48 newVoteExtension",
                    "full_signature": "function _setLateQuorumVoteExtension(uint48 newVoteExtension) internal virtual  ",
                    "class_method_signature": "GovernorPreventLateQuorum._setLateQuorumVoteExtensionuint48 newVoteExtension",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Changes the {lateQuorumVoteExtension}. This is an internal function that can be exposed in a public function\n     * like {setLateQuorumVoteExtension} if another access control mechanism is needed.\n     *\n     * Emits a {LateQuorumVoteExtensionSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockControl.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "state",
                    "parameters": "uint256 proposalId",
                    "modifiers": "override",
                    "return": "returns (ProposalState)",
                    "body": "function state(uint256 proposalId) public view virtual override returns (ProposalState) {\n        ProposalState currentState = super.state(proposalId);\n\n        if (currentState != ProposalState.Queued) {\n            return currentState;\n        }\n\n        bytes32 queueid = _timelockIds[proposalId];\n        if (_timelock.isOperationPending(queueid)) {\n            return ProposalState.Queued;\n        } else if (_timelock.isOperationDone(queueid)) {\n            // This can happen if the proposal is executed directly on the timelock.\n            return ProposalState.Executed;\n        } else {\n            // This can happen if the proposal is canceled directly on the timelock.\n            return ProposalState.Canceled;\n        }\n    }",
                    "start": "44",
                    "end": "61",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (ProposalState) stateuint256 proposalId",
                    "full_signature": "function state(uint256 proposalId) public virtual override returns (ProposalState)",
                    "class_method_signature": "GovernorTimelockControl.stateuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\n     */\n/**\n     * @dev Set the timelock.\n     */\n/**\n     * @dev Overridden version of the {Governor-state} function that considers the status reported by the timelock.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "timelock",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function timelock() public view virtual returns (address) {\n        return address(_timelock);\n    }",
                    "start": "66",
                    "end": "68",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (address) timelock",
                    "full_signature": "function timelock() public virtual view returns (address)",
                    "class_method_signature": "GovernorTimelockControl.timelock",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Public accessor to check the address of the timelock\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalNeedsQueuing",
                    "parameters": "uint256",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function proposalNeedsQueuing(uint256) public view virtual override returns (bool) {\n        return true;\n    }",
                    "start": "73",
                    "end": "75",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (bool) proposalNeedsQueuinguint256",
                    "full_signature": "function proposalNeedsQueuing(uint256) public virtual override returns (bool)",
                    "class_method_signature": "GovernorTimelockControl.proposalNeedsQueuinguint256",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IGovernor-proposalNeedsQueuing}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_queueOperations",
                    "parameters": "uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "modifiers": "override",
                    "return": "returns (uint48)",
                    "body": "function _queueOperations(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint48) {\n        uint256 delay = _timelock.getMinDelay();\n\n        bytes32 salt = _timelockSalt(descriptionHash);\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, salt);\n        _timelock.scheduleBatch(targets, values, calldatas, 0, salt, delay);\n\n        return SafeCast.toUint48(block.timestamp + delay);\n    }",
                    "start": "80",
                    "end": "94",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (uint48) _queueOperationsuint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "full_signature": "function _queueOperations(uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash) internal virtual override returns (uint48)",
                    "class_method_signature": "GovernorTimelockControl._queueOperationsuint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Function to queue a proposal to the timelock.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_executeOperations",
                    "parameters": "uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _executeOperations(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override {\n        // execute\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, _timelockSalt(descriptionHash));\n        // cleanup for refund\n        delete _timelockIds[proposalId];\n    }",
                    "start": "100",
                    "end": "111",
                    "class": "GovernorTimelockControl",
                    "signature": " _executeOperationsuint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "full_signature": "function _executeOperations(uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash) internal virtual override ",
                    "class_method_signature": "GovernorTimelockControl._executeOperationsuint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Overridden version of the {Governor-_executeOperations} function that runs the already queued proposal\n     * through the timelock.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_cancel",
                    "parameters": "address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        bytes32 timelockId = _timelockIds[proposalId];\n        if (timelockId != 0) {\n            // cancel\n            _timelock.cancel(timelockId);\n            // cleanup\n            delete _timelockIds[proposalId];\n        }\n\n        return proposalId;\n    }",
                    "start": "120",
                    "end": "137",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (uint256) _canceladdress[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "full_signature": "function _cancel(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash) internal virtual override returns (uint256)",
                    "class_method_signature": "GovernorTimelockControl._canceladdress[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Overridden version of the {Governor-_cancel} function to cancel the timelocked proposal if it has already\n     * been queued.\n     */\n// This function can reenter through the external call to the timelock, but we assume the timelock is trusted and\n// well behaved (according to TimelockController) and this will not happen.\n// slither-disable-next-line reentrancy-no-eth\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_executor",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _executor() internal view virtual override returns (address) {\n        return address(_timelock);\n    }",
                    "start": "142",
                    "end": "144",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (address) _executor",
                    "full_signature": "function _executor() internal virtual override returns (address)",
                    "class_method_signature": "GovernorTimelockControl._executor",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Address through which the governor executes action. In this case, the timelock.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "updateTimelock",
                    "parameters": "TimelockController newTimelock",
                    "modifiers": "",
                    "return": "",
                    "body": "function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\n        _updateTimelock(newTimelock);\n    }",
                    "start": "152",
                    "end": "154",
                    "class": "GovernorTimelockControl",
                    "signature": " updateTimelockTimelockController newTimelock",
                    "full_signature": "function updateTimelock(TimelockController newTimelock) external virtual  ",
                    "class_method_signature": "GovernorTimelockControl.updateTimelockTimelockController newTimelock",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\n     * must be proposed, scheduled, and executed through governance proposals.\n     *\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "_timelockSalt",
                    "parameters": "bytes32 descriptionHash",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function _timelockSalt(bytes32 descriptionHash) private view returns (bytes32) {\n        return bytes20(address(this)) ^ descriptionHash;\n    }",
                    "start": "167",
                    "end": "169",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (bytes32) _timelockSaltbytes32 descriptionHash",
                    "full_signature": "function _timelockSalt(bytes32 descriptionHash) private  view returns (bytes32)",
                    "class_method_signature": "GovernorTimelockControl._timelockSaltbytes32 descriptionHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Computes the {TimelockController} operation salt.\n     *\n     * It is computed with the governor address itself to avoid collisions across governor instances using the\n     * same timelock.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingFractional.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "COUNTING_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo,fractional&quorum=for,abstain&params=fractional\";\n    }",
                    "start": "60",
                    "end": "62",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (string memory) COUNTING_MODE",
                    "full_signature": "function COUNTING_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "GovernorCountingFractional.COUNTING_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mapping from proposal ID to vote tallies for that proposal.\n     */\n/**\n     * @dev A fractional vote params uses more votes than are available for that user.\n     */\n/**\n     * @dev See {IGovernor-COUNTING_MODE}.\n     */\n// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "hasVoted",
                    "parameters": "uint256 proposalId, address account",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return usedVotes(proposalId, account) > 0;\n    }",
                    "start": "67",
                    "end": "69",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (bool) hasVoteduint256 proposalId, address account",
                    "full_signature": "function hasVoted(uint256 proposalId, address account) public virtual override returns (bool)",
                    "class_method_signature": "GovernorCountingFractional.hasVoteduint256 proposalId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IGovernor-hasVoted}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "usedVotes",
                    "parameters": "uint256 proposalId, address account",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function usedVotes(uint256 proposalId, address account) public view virtual returns (uint256) {\n        return _proposalVotes[proposalId].usedVotes[account];\n    }",
                    "start": "75",
                    "end": "77",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (uint256) usedVotesuint256 proposalId, address account",
                    "full_signature": "function usedVotes(uint256 proposalId, address account) public virtual view returns (uint256)",
                    "class_method_signature": "GovernorCountingFractional.usedVotesuint256 proposalId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the number of votes already cast by `account` for a proposal with `proposalId`. Useful for\n     * integrations that allow delegates to cast rolling, partial votes.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalVotes",
                    "parameters": "uint256 proposalId",
                    "modifiers": "view",
                    "return": "returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes)",
                    "body": "function proposalVotes(\n        uint256 proposalId\n    ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n        return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);\n    }",
                    "start": "82",
                    "end": "87",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) proposalVotesuint256 proposalId",
                    "full_signature": "function proposalVotes(uint256 proposalId) public virtual view returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes)",
                    "class_method_signature": "GovernorCountingFractional.proposalVotesuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get current distribution of votes for a given proposal.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_quorumReached",
                    "parameters": "uint256 proposalId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n        return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;\n    }",
                    "start": "92",
                    "end": "95",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (bool) _quorumReacheduint256 proposalId",
                    "full_signature": "function _quorumReached(uint256 proposalId) internal virtual override returns (bool)",
                    "class_method_signature": "GovernorCountingFractional._quorumReacheduint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {Governor-_quorumReached}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_voteSucceeded",
                    "parameters": "uint256 proposalId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n        return proposalVote.forVotes > proposalVote.againstVotes;\n    }",
                    "start": "100",
                    "end": "103",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (bool) _voteSucceededuint256 proposalId",
                    "full_signature": "function _voteSucceeded(uint256 proposalId) internal virtual override returns (bool)",
                    "class_method_signature": "GovernorCountingFractional._voteSucceededuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {Governor-_voteSucceeded}. In this module, forVotes must be > againstVotes.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_countVote",
                    "parameters": "uint256 proposalId, address account, uint8 support, uint256 totalWeight, bytes memory params",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 totalWeight,\n        bytes memory params\n    ) internal virtual override returns (uint256) {\n        // Compute number of remaining votes. Returns 0 on overflow.\n        (, uint256 remainingWeight) = totalWeight.trySub(usedVotes(proposalId, account));\n        if (remainingWeight == 0) {\n            revert GovernorAlreadyCastVote(account);\n        }\n\n        uint256 againstVotes = 0;\n        uint256 forVotes = 0;\n        uint256 abstainVotes = 0;\n        uint256 usedWeight = 0;\n\n        // For clarity of event indexing, fractional voting must be clearly advertised in the \"support\" field.\n        //\n        // Supported `support` value must be:\n        // - \"Full\" voting: `support = 0` (Against), `1` (For) or `2` (Abstain), with empty params.\n        // - \"Fractional\" voting: `support = 255`, with 48 bytes params.\n        if (support == uint8(GovernorCountingSimple.VoteType.Against)) {\n            if (params.length != 0) revert GovernorInvalidVoteParams();\n            usedWeight = againstVotes = remainingWeight;\n        } else if (support == uint8(GovernorCountingSimple.VoteType.For)) {\n            if (params.length != 0) revert GovernorInvalidVoteParams();\n            usedWeight = forVotes = remainingWeight;\n        } else if (support == uint8(GovernorCountingSimple.VoteType.Abstain)) {\n            if (params.length != 0) revert GovernorInvalidVoteParams();\n            usedWeight = abstainVotes = remainingWeight;\n        } else if (support == VOTE_TYPE_FRACTIONAL) {\n            // The `params` argument is expected to be three packed `uint128`:\n            // `abi.encodePacked(uint128(againstVotes), uint128(forVotes), uint128(abstainVotes))`\n            if (params.length != 0x30) revert GovernorInvalidVoteParams();\n\n            assembly (\"memory-safe\") {\n                againstVotes := shr(128, mload(add(params, 0x20)))\n                forVotes := shr(128, mload(add(params, 0x30)))\n                abstainVotes := shr(128, mload(add(params, 0x40)))\n                usedWeight := add(add(againstVotes, forVotes), abstainVotes) // inputs are uint128: cannot overflow\n            }\n\n            // check parsed arguments are valid\n            if (usedWeight > remainingWeight) {\n                revert GovernorExceedRemainingWeight(account, usedWeight, remainingWeight);\n            }\n        } else {\n            revert GovernorInvalidVoteType();\n        }\n\n        // update votes tracking\n        ProposalVote storage details = _proposalVotes[proposalId];\n        if (againstVotes > 0) details.againstVotes += againstVotes;\n        if (forVotes > 0) details.forVotes += forVotes;\n        if (abstainVotes > 0) details.abstainVotes += abstainVotes;\n        details.usedVotes[account] += usedWeight;\n\n        return usedWeight;\n    }",
                    "start": "135",
                    "end": "195",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (uint256) _countVoteuint256 proposalId, address account, uint8 support, uint256 totalWeight, bytes memory params",
                    "full_signature": "function _countVote(uint256 proposalId, address account, uint8 support, uint256 totalWeight, bytes memory params) internal virtual override returns (uint256)",
                    "class_method_signature": "GovernorCountingFractional._countVoteuint256 proposalId, address account, uint8 support, uint256 totalWeight, bytes memory params",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {Governor-_countVote}. Function that records the delegate's votes.\n     *\n     * Executing this function consumes (part of) the delegate's weight on the proposal. This weight can be\n     * distributed amongst the 3 options (Against, For, Abstain) by specifying a fractional `support`.\n     *\n     * This counting module supports two vote casting modes: nominal and fractional.\n     *\n     * - Nominal: A nominal vote is cast by setting `support` to one of the 3 bravo options (Against, For, Abstain).\n     * - Fractional: A fractional vote is cast by setting `support` to `type(uint8).max` (255).\n     *\n     * Casting a nominal vote requires `params` to be empty and consumes the delegate's full remaining weight on the\n     * proposal for the specified `support` option. This is similar to the {GovernorCountingSimple} module and follows\n     * the `VoteType` enum from Governor Bravo. As a consequence, no vote weight remains unspent so no further voting\n     * is possible (for this `proposalId` and this `account`).\n     *\n     * Casting a fractional vote consumes a fraction of the delegate's remaining weight on the proposal according to the\n     * weights the delegate assigns to each support option (Against, For, Abstain respectively). The sum total of the\n     * three decoded vote weights _must_ be less than or equal to the delegate's remaining weight on the proposal (i.e.\n     * their checkpointed total weight minus votes already cast on the proposal). This format can be produced using:\n     *\n     * `abi.encodePacked(uint128(againstVotes), uint128(forVotes), uint128(abstainVotes))`\n     *\n     * NOTE: Consider that fractional voting restricts the number of casted vote (in each category) to 128 bits.\n     * Depending on how many decimals the underlying token has, a single voter may require to split their vote into\n     * multiple vote operations. For precision higher than ~30 decimals, large token holders may require an\n     * potentially large number of calls to cast all their votes. The voter has the possibility to cast all the\n     * remaining votes in a single operation using the traditional \"bravo\" vote.\n     */\n// slither-disable-next-line cyclomatic-complexity\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/governance/extensions/GovernorStorage.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_propose",
                    "parameters": "address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description, address proposer",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description,\n        address proposer\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._propose(targets, values, calldatas, description, proposer);\n\n        // store\n        _proposalIds.push(proposalId);\n        _proposalDetails[proposalId] = ProposalDetails({\n            targets: targets,\n            values: values,\n            calldatas: calldatas,\n            descriptionHash: keccak256(bytes(description))\n        });\n\n        return proposalId;\n    }",
                    "start": "31",
                    "end": "50",
                    "class": "GovernorStorage",
                    "signature": "returns (uint256) _proposeaddress[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description, address proposer",
                    "full_signature": "function _propose(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description, address proposer) internal virtual override returns (uint256)",
                    "class_method_signature": "GovernorStorage._proposeaddress[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description, address proposer",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Hook into the proposing mechanism\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "queue",
                    "parameters": "uint256 proposalId",
                    "modifiers": "",
                    "return": "",
                    "body": "function queue(uint256 proposalId) public virtual {\n        // here, using storage is more efficient than memory\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        queue(details.targets, details.values, details.calldatas, details.descriptionHash);\n    }",
                    "start": "55",
                    "end": "59",
                    "class": "GovernorStorage",
                    "signature": " queueuint256 proposalId",
                    "full_signature": "function queue(uint256 proposalId) public virtual  ",
                    "class_method_signature": "GovernorStorage.queueuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Version of {IGovernorTimelock-queue} with only `proposalId` as an argument.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "execute",
                    "parameters": "uint256 proposalId",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function execute(uint256 proposalId) public payable virtual {\n        // here, using storage is more efficient than memory\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        execute(details.targets, details.values, details.calldatas, details.descriptionHash);\n    }",
                    "start": "64",
                    "end": "68",
                    "class": "GovernorStorage",
                    "signature": " executeuint256 proposalId",
                    "full_signature": "function execute(uint256 proposalId) public virtual payable ",
                    "class_method_signature": "GovernorStorage.executeuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Version of {IGovernor-execute} with only `proposalId` as an argument.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "cancel",
                    "parameters": "uint256 proposalId",
                    "modifiers": "",
                    "return": "",
                    "body": "function cancel(uint256 proposalId) public virtual {\n        // here, using storage is more efficient than memory\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        cancel(details.targets, details.values, details.calldatas, details.descriptionHash);\n    }",
                    "start": "73",
                    "end": "77",
                    "class": "GovernorStorage",
                    "signature": " canceluint256 proposalId",
                    "full_signature": "function cancel(uint256 proposalId) public virtual  ",
                    "class_method_signature": "GovernorStorage.canceluint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev ProposalId version of {IGovernor-cancel}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalCount",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function proposalCount() public view virtual returns (uint256) {\n        return _proposalIds.length;\n    }",
                    "start": "82",
                    "end": "84",
                    "class": "GovernorStorage",
                    "signature": "returns (uint256) proposalCount",
                    "full_signature": "function proposalCount() public virtual view returns (uint256)",
                    "class_method_signature": "GovernorStorage.proposalCount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the number of stored proposals.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalDetails",
                    "parameters": "uint256 proposalId",
                    "modifiers": "view",
                    "return": "returns (address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)",
                    "body": "function proposalDetails(\n        uint256 proposalId\n    )\n        public\n        view\n        virtual\n        returns (address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\n    {\n        // here, using memory is more efficient than storage\n        ProposalDetails memory details = _proposalDetails[proposalId];\n        if (details.descriptionHash == 0) {\n            revert GovernorNonexistentProposal(proposalId);\n        }\n        return (details.targets, details.values, details.calldatas, details.descriptionHash);\n    }",
                    "start": "89",
                    "end": "103",
                    "class": "GovernorStorage",
                    "signature": "returns (address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash) proposalDetailsuint256 proposalId",
                    "full_signature": "function proposalDetails(uint256 proposalId) public virtual view returns (address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)",
                    "class_method_signature": "GovernorStorage.proposalDetailsuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the details of a proposalId. Reverts if `proposalId` is not a known proposal.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalDetailsAt",
                    "parameters": "uint256 index",
                    "modifiers": "view",
                    "return": "returns (\n            uint256 proposalId,\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        )",
                    "body": "function proposalDetailsAt(\n        uint256 index\n    )\n        public\n        view\n        virtual\n        returns (\n            uint256 proposalId,\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        )\n    {\n        proposalId = _proposalIds[index];\n        (targets, values, calldatas, descriptionHash) = proposalDetails(proposalId);\n    }",
                    "start": "108",
                    "end": "124",
                    "class": "GovernorStorage",
                    "signature": "returns (\n            uint256 proposalId,\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        ) proposalDetailsAtuint256 index",
                    "full_signature": "function proposalDetailsAt(uint256 index) public virtual view returns (\n            uint256 proposalId,\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        )",
                    "class_method_signature": "GovernorStorage.proposalDetailsAtuint256 index",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the details (including the proposalId) of a proposal given its sequential index.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(IERC165, ERC165)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "54",
                    "end": "56",
                    "class": "ERC2981",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(IERC165, ERC165) returns (bool)",
                    "class_method_signature": "ERC2981.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\n     */\n/**\n     * @dev The default royalty receiver is invalid.\n     */\n/**\n     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\n     */\n/**\n     * @dev The royalty receiver for `tokenId` is invalid.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "royaltyInfo",
                    "parameters": "uint256 tokenId, uint256 salePrice",
                    "modifiers": "view",
                    "return": "returns (address receiver, uint256 amount)",
                    "body": "function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) public view virtual returns (address receiver, uint256 amount) {\n        RoyaltyInfo storage _royaltyInfo = _tokenRoyaltyInfo[tokenId];\n        address royaltyReceiver = _royaltyInfo.receiver;\n        uint96 royaltyFraction = _royaltyInfo.royaltyFraction;\n\n        if (royaltyReceiver == address(0)) {\n            royaltyReceiver = _defaultRoyaltyInfo.receiver;\n            royaltyFraction = _defaultRoyaltyInfo.royaltyFraction;\n        }\n\n        uint256 royaltyAmount = (salePrice * royaltyFraction) / _feeDenominator();\n\n        return (royaltyReceiver, royaltyAmount);\n    }",
                    "start": "61",
                    "end": "77",
                    "class": "ERC2981",
                    "signature": "returns (address receiver, uint256 amount) royaltyInfouint256 tokenId, uint256 salePrice",
                    "full_signature": "function royaltyInfo(uint256 tokenId, uint256 salePrice) public virtual view returns (address receiver, uint256 amount)",
                    "class_method_signature": "ERC2981.royaltyInfouint256 tokenId, uint256 salePrice",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IERC2981\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_feeDenominator",
                    "parameters": "",
                    "modifiers": "pure",
                    "return": "returns (uint96)",
                    "body": "function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }",
                    "start": "84",
                    "end": "86",
                    "class": "ERC2981",
                    "signature": "returns (uint96) _feeDenominator",
                    "full_signature": "function _feeDenominator() internal virtual pure returns (uint96)",
                    "class_method_signature": "ERC2981._feeDenominator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setDefaultRoyalty",
                    "parameters": "address receiver, uint96 feeNumerator",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\n        }\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }",
                    "start": "96",
                    "end": "107",
                    "class": "ERC2981",
                    "signature": " _setDefaultRoyaltyaddress receiver, uint96 feeNumerator",
                    "full_signature": "function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual  ",
                    "class_method_signature": "ERC2981._setDefaultRoyaltyaddress receiver, uint96 feeNumerator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_deleteDefaultRoyalty",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }",
                    "start": "112",
                    "end": "114",
                    "class": "ERC2981",
                    "signature": " _deleteDefaultRoyalty",
                    "full_signature": "function _deleteDefaultRoyalty() internal virtual  ",
                    "class_method_signature": "ERC2981._deleteDefaultRoyalty",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Removes default royalty information.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setTokenRoyalty",
                    "parameters": "uint256 tokenId, address receiver, uint96 feeNumerator",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\n        }\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }",
                    "start": "124",
                    "end": "135",
                    "class": "ERC2981",
                    "signature": " _setTokenRoyaltyuint256 tokenId, address receiver, uint96 feeNumerator",
                    "full_signature": "function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual  ",
                    "class_method_signature": "ERC2981._setTokenRoyaltyuint256 tokenId, address receiver, uint96 feeNumerator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_resetTokenRoyalty",
                    "parameters": "uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }",
                    "start": "140",
                    "end": "142",
                    "class": "ERC2981",
                    "signature": " _resetTokenRoyaltyuint256 tokenId",
                    "full_signature": "function _resetTokenRoyalty(uint256 tokenId) internal virtual  ",
                    "class_method_signature": "ERC2981._resetTokenRoyaltyuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Utils.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(ERC165, IERC165)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "19",
                    "end": "21",
                    "class": "ERC1155Holder",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(ERC165, IERC165) returns (bool)",
                    "class_method_signature": "ERC1155Holder.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "uri",
                    "parameters": "uint256 tokenId",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function uri(uint256 tokenId) public view virtual override returns (string memory) {\n        string memory tokenURI = _tokenURIs[tokenId];\n\n        // If token URI is set, concatenate base URI and tokenURI (via string.concat).\n        return bytes(tokenURI).length > 0 ? string.concat(_baseURI, tokenURI) : super.uri(tokenId);\n    }",
                    "start": "40",
                    "end": "45",
                    "class": "ERC1155URIStorage",
                    "signature": "returns (string memory) uriuint256 tokenId",
                    "full_signature": "function uri(uint256 tokenId) public virtual override returns (string memory)",
                    "class_method_signature": "ERC1155URIStorage.uriuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Optional base URI\n// Optional mapping for token URIs\n/**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the concatenation of the `_baseURI`\n     * and the token-specific uri if the latter is set\n     *\n     * This enables the following behaviors:\n     *\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\n     *   is empty per default);\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\n     *   which in most cases will contain `ERC1155._uri`;\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\n     *   uri value set, then the result is empty.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setURI",
                    "parameters": "uint256 tokenId, string memory tokenURI",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\n        _tokenURIs[tokenId] = tokenURI;\n        emit URI(uri(tokenId), tokenId);\n    }",
                    "start": "50",
                    "end": "53",
                    "class": "ERC1155URIStorage",
                    "signature": " _setURIuint256 tokenId, string memory tokenURI",
                    "full_signature": "function _setURI(uint256 tokenId, string memory tokenURI) internal virtual  ",
                    "class_method_signature": "ERC1155URIStorage._setURIuint256 tokenId, string memory tokenURI",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setBaseURI",
                    "parameters": "string memory baseURI",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setBaseURI(string memory baseURI) internal virtual {\n        _baseURI = baseURI;\n    }",
                    "start": "58",
                    "end": "60",
                    "class": "ERC1155URIStorage",
                    "signature": " _setBaseURIstring memory baseURI",
                    "full_signature": "function _setBaseURI(string memory baseURI) internal virtual  ",
                    "class_method_signature": "ERC1155URIStorage._setBaseURIstring memory baseURI",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "totalSupply",
                    "parameters": "uint256 id",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }",
                    "start": "31",
                    "end": "33",
                    "class": "ERC1155Supply",
                    "signature": "returns (uint256) totalSupplyuint256 id",
                    "full_signature": "function totalSupply(uint256 id) public virtual view returns (uint256)",
                    "class_method_signature": "ERC1155Supply.totalSupplyuint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Total value of tokens in with a given id.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "totalSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function totalSupply() public view virtual returns (uint256) {\n        return _totalSupplyAll;\n    }",
                    "start": "38",
                    "end": "40",
                    "class": "ERC1155Supply",
                    "signature": "returns (uint256) totalSupply",
                    "full_signature": "function totalSupply() public virtual view returns (uint256)",
                    "class_method_signature": "ERC1155Supply.totalSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Total value of tokens.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "exists",
                    "parameters": "uint256 id",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function exists(uint256 id) public view virtual returns (bool) {\n        return totalSupply(id) > 0;\n    }",
                    "start": "45",
                    "end": "47",
                    "class": "ERC1155Supply",
                    "signature": "returns (bool) existsuint256 id",
                    "full_signature": "function exists(uint256 id) public virtual view returns (bool)",
                    "class_method_signature": "ERC1155Supply.existsuint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256[] memory ids, uint256[] memory values",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override {\n        super._update(from, to, ids, values);\n\n        if (from == address(0)) {\n            uint256 totalMintValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values.unsafeMemoryAccess(i);\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\n                _totalSupply[ids.unsafeMemoryAccess(i)] += value;\n                totalMintValue += value;\n            }\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\n            _totalSupplyAll += totalMintValue;\n        }\n\n        if (to == address(0)) {\n            uint256 totalBurnValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values.unsafeMemoryAccess(i);\n\n                unchecked {\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\n                    _totalSupply[ids.unsafeMemoryAccess(i)] -= value;\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                    totalBurnValue += value;\n                }\n            }\n            unchecked {\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                _totalSupplyAll -= totalBurnValue;\n            }\n        }\n    }",
                    "start": "52",
                    "end": "89",
                    "class": "ERC1155Supply",
                    "signature": " _updateaddress from, address to, uint256[] memory ids, uint256[] memory values",
                    "full_signature": "function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual override ",
                    "class_method_signature": "ERC1155Supply._updateaddress from, address to, uint256[] memory ids, uint256[] memory values",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC1155-_update}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Pausable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256[] memory ids, uint256[] memory values",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override whenNotPaused {\n        super._update(from, to, ids, values);\n    }",
                    "start": "30",
                    "end": "37",
                    "class": "ERC1155Pausable",
                    "signature": " _updateaddress from, address to, uint256[] memory ids, uint256[] memory values",
                    "full_signature": "function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual override ",
                    "class_method_signature": "ERC1155Pausable._updateaddress from, address to, uint256[] memory ids, uint256[] memory values",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC1155-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(ERC165, IERC165)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }",
                    "start": "47",
                    "end": "52",
                    "class": "ERC721",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(ERC165, IERC165) returns (bool)",
                    "class_method_signature": "ERC721.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Token name\n// Token symbol\n/**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "balanceOf",
                    "parameters": "address owner",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }",
                    "start": "57",
                    "end": "62",
                    "class": "ERC721",
                    "signature": "returns (uint256) balanceOfaddress owner",
                    "full_signature": "function balanceOf(address owner) public virtual view returns (uint256)",
                    "class_method_signature": "ERC721.balanceOfaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-balanceOf}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "ownerOf",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }",
                    "start": "67",
                    "end": "69",
                    "class": "ERC721",
                    "signature": "returns (address) ownerOfuint256 tokenId",
                    "full_signature": "function ownerOf(uint256 tokenId) public virtual view returns (address)",
                    "class_method_signature": "ERC721.ownerOfuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-ownerOf}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "name",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function name() public view virtual returns (string memory) {\n        return _name;\n    }",
                    "start": "74",
                    "end": "76",
                    "class": "ERC721",
                    "signature": "returns (string memory) name",
                    "full_signature": "function name() public virtual view returns (string memory)",
                    "class_method_signature": "ERC721.name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Metadata-name}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "symbol",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }",
                    "start": "81",
                    "end": "83",
                    "class": "ERC721",
                    "signature": "returns (string memory) symbol",
                    "full_signature": "function symbol() public virtual view returns (string memory)",
                    "class_method_signature": "ERC721.symbol",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "tokenURI",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }",
                    "start": "88",
                    "end": "93",
                    "class": "ERC721",
                    "signature": "returns (string memory) tokenURIuint256 tokenId",
                    "full_signature": "function tokenURI(uint256 tokenId) public virtual view returns (string memory)",
                    "class_method_signature": "ERC721.tokenURIuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_baseURI",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }",
                    "start": "100",
                    "end": "102",
                    "class": "ERC721",
                    "signature": "returns (string memory) _baseURI",
                    "full_signature": "function _baseURI() internal virtual view returns (string memory)",
                    "class_method_signature": "ERC721._baseURI",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "approve",
                    "parameters": "address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }",
                    "start": "107",
                    "end": "109",
                    "class": "ERC721",
                    "signature": " approveaddress to, uint256 tokenId",
                    "full_signature": "function approve(address to, uint256 tokenId) public virtual  ",
                    "class_method_signature": "ERC721.approveaddress to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-approve}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getApproved",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }",
                    "start": "114",
                    "end": "118",
                    "class": "ERC721",
                    "signature": "returns (address) getApproveduint256 tokenId",
                    "full_signature": "function getApproved(uint256 tokenId) public virtual view returns (address)",
                    "class_method_signature": "ERC721.getApproveduint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-getApproved}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setApprovalForAll",
                    "parameters": "address operator, bool approved",
                    "modifiers": "",
                    "return": "",
                    "body": "function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }",
                    "start": "123",
                    "end": "125",
                    "class": "ERC721",
                    "signature": " setApprovalForAlladdress operator, bool approved",
                    "full_signature": "function setApprovalForAll(address operator, bool approved) public virtual  ",
                    "class_method_signature": "ERC721.setApprovalForAlladdress operator, bool approved",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isApprovedForAll",
                    "parameters": "address owner, address operator",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }",
                    "start": "130",
                    "end": "132",
                    "class": "ERC721",
                    "signature": "returns (bool) isApprovedForAlladdress owner, address operator",
                    "full_signature": "function isApprovedForAll(address owner, address operator) public virtual view returns (bool)",
                    "class_method_signature": "ERC721.isApprovedForAlladdress owner, address operator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferFrom",
                    "parameters": "address from, address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }",
                    "start": "137",
                    "end": "147",
                    "class": "ERC721",
                    "signature": " transferFromaddress from, address to, uint256 tokenId",
                    "full_signature": "function transferFrom(address from, address to, uint256 tokenId) public virtual  ",
                    "class_method_signature": "ERC721.transferFromaddress from, address to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-transferFrom}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "safeTransferFrom",
                    "parameters": "address from, address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }",
                    "start": "152",
                    "end": "154",
                    "class": "ERC721",
                    "signature": " safeTransferFromaddress from, address to, uint256 tokenId",
                    "full_signature": "function safeTransferFrom(address from, address to, uint256 tokenId) public   ",
                    "class_method_signature": "ERC721.safeTransferFromaddress from, address to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "safeTransferFrom",
                    "parameters": "address from, address to, uint256 tokenId, bytes memory data",
                    "modifiers": "",
                    "return": "",
                    "body": "function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }",
                    "start": "159",
                    "end": "162",
                    "class": "ERC721",
                    "signature": " safeTransferFromaddress from, address to, uint256 tokenId, bytes memory data",
                    "full_signature": "function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual  ",
                    "class_method_signature": "ERC721.safeTransferFromaddress from, address to, uint256 tokenId, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_ownerOf",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }",
                    "start": "172",
                    "end": "174",
                    "class": "ERC721",
                    "signature": "returns (address) _ownerOfuint256 tokenId",
                    "full_signature": "function _ownerOf(uint256 tokenId) internal virtual view returns (address)",
                    "class_method_signature": "ERC721._ownerOfuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getApproved",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }",
                    "start": "179",
                    "end": "181",
                    "class": "ERC721",
                    "signature": "returns (address) _getApproveduint256 tokenId",
                    "full_signature": "function _getApproved(uint256 tokenId) internal virtual view returns (address)",
                    "class_method_signature": "ERC721._getApproveduint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_isAuthorized",
                    "parameters": "address owner, address spender, uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }",
                    "start": "190",
                    "end": "194",
                    "class": "ERC721",
                    "signature": "returns (bool) _isAuthorizedaddress owner, address spender, uint256 tokenId",
                    "full_signature": "function _isAuthorized(address owner, address spender, uint256 tokenId) internal virtual view returns (bool)",
                    "class_method_signature": "ERC721._isAuthorizedaddress owner, address spender, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_checkAuthorized",
                    "parameters": "address owner, address spender, uint256 tokenId",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }",
                    "start": "205",
                    "end": "213",
                    "class": "ERC721",
                    "signature": " _checkAuthorizedaddress owner, address spender, uint256 tokenId",
                    "full_signature": "function _checkAuthorized(address owner, address spender, uint256 tokenId) internal virtual view ",
                    "class_method_signature": "ERC721._checkAuthorizedaddress owner, address spender, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if:\n     * - `spender` does not have approval from `owner` for `tokenId`.\n     * - `spender` does not have approval to manage all of `owner`'s assets.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_increaseBalance",
                    "parameters": "address account, uint128 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }",
                    "start": "225",
                    "end": "229",
                    "class": "ERC721",
                    "signature": " _increaseBalanceaddress account, uint128 value",
                    "full_signature": "function _increaseBalance(address account, uint128 value) internal virtual  ",
                    "class_method_signature": "ERC721._increaseBalanceaddress account, uint128 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_update",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "",
                    "return": "returns (address)",
                    "body": "function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }",
                    "start": "242",
                    "end": "271",
                    "class": "ERC721",
                    "signature": "returns (address) _updateaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _update(address to, uint256 tokenId, address auth) internal virtual  returns (address)",
                    "class_method_signature": "ERC721._updateaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_mint",
                    "parameters": "address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }",
                    "start": "285",
                    "end": "293",
                    "class": "ERC721",
                    "signature": " _mintaddress to, uint256 tokenId",
                    "full_signature": "function _mint(address to, uint256 tokenId) internal   ",
                    "class_method_signature": "ERC721._mintaddress to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_safeMint",
                    "parameters": "address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }",
                    "start": "305",
                    "end": "307",
                    "class": "ERC721",
                    "signature": " _safeMintaddress to, uint256 tokenId",
                    "full_signature": "function _safeMint(address to, uint256 tokenId) internal   ",
                    "class_method_signature": "ERC721._safeMintaddress to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_safeMint",
                    "parameters": "address to, uint256 tokenId, bytes memory data",
                    "modifiers": "",
                    "return": "",
                    "body": "function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\n    }",
                    "start": "313",
                    "end": "316",
                    "class": "ERC721",
                    "signature": " _safeMintaddress to, uint256 tokenId, bytes memory data",
                    "full_signature": "function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual  ",
                    "class_method_signature": "ERC721._safeMintaddress to, uint256 tokenId, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_burn",
                    "parameters": "uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }",
                    "start": "329",
                    "end": "334",
                    "class": "ERC721",
                    "signature": " _burnuint256 tokenId",
                    "full_signature": "function _burn(uint256 tokenId) internal   ",
                    "class_method_signature": "ERC721._burnuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_transfer",
                    "parameters": "address from, address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }",
                    "start": "347",
                    "end": "357",
                    "class": "ERC721",
                    "signature": " _transferaddress from, address to, uint256 tokenId",
                    "full_signature": "function _transfer(address from, address to, uint256 tokenId) internal   ",
                    "class_method_signature": "ERC721._transferaddress from, address to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_safeTransfer",
                    "parameters": "address from, address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }",
                    "start": "378",
                    "end": "380",
                    "class": "ERC721",
                    "signature": " _safeTransferaddress from, address to, uint256 tokenId",
                    "full_signature": "function _safeTransfer(address from, address to, uint256 tokenId) internal   ",
                    "class_method_signature": "ERC721._safeTransferaddress from, address to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_safeTransfer",
                    "parameters": "address from, address to, uint256 tokenId, bytes memory data",
                    "modifiers": "",
                    "return": "",
                    "body": "function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }",
                    "start": "386",
                    "end": "389",
                    "class": "ERC721",
                    "signature": " _safeTransferaddress from, address to, uint256 tokenId, bytes memory data",
                    "full_signature": "function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual  ",
                    "class_method_signature": "ERC721._safeTransferaddress from, address to, uint256 tokenId, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_approve",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "",
                    "return": "",
                    "body": "function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }",
                    "start": "401",
                    "end": "403",
                    "class": "ERC721",
                    "signature": " _approveaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _approve(address to, uint256 tokenId, address auth) internal   ",
                    "class_method_signature": "ERC721._approveaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_approve",
                    "parameters": "address to, uint256 tokenId, address auth, bool emitEvent",
                    "modifiers": "",
                    "return": "",
                    "body": "function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }",
                    "start": "409",
                    "end": "425",
                    "class": "ERC721",
                    "signature": " _approveaddress to, uint256 tokenId, address auth, bool emitEvent",
                    "full_signature": "function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual  ",
                    "class_method_signature": "ERC721._approveaddress to, uint256 tokenId, address auth, bool emitEvent",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setApprovalForAll",
                    "parameters": "address owner, address operator, bool approved",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }",
                    "start": "435",
                    "end": "441",
                    "class": "ERC721",
                    "signature": " _setApprovalForAlladdress owner, address operator, bool approved",
                    "full_signature": "function _setApprovalForAll(address owner, address operator, bool approved) internal virtual  ",
                    "class_method_signature": "ERC721._setApprovalForAlladdress owner, address operator, bool approved",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_requireOwned",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }",
                    "start": "449",
                    "end": "455",
                    "class": "ERC721",
                    "signature": "returns (address) _requireOwneduint256 tokenId",
                    "full_signature": "function _requireOwned(uint256 tokenId) internal  view returns (address)",
                    "class_method_signature": "ERC721._requireOwneduint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "onERC721Received",
                    "parameters": "address, address, uint256, bytes memory",
                    "modifiers": "",
                    "return": "returns (bytes4)",
                    "body": "function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\n        return this.onERC721Received.selector;\n    }",
                    "start": "21",
                    "end": "23",
                    "class": "ERC721Holder",
                    "signature": "returns (bytes4) onERC721Receivedaddress, address, uint256, bytes memory",
                    "full_signature": "function onERC721Received(address, address, uint256, bytes memory) public virtual  returns (bytes4)",
                    "class_method_signature": "ERC721Holder.onERC721Receivedaddress, address, uint256, bytes memory",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Utils.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(IERC165, ERC721)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "ERC721Enumerable",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(IERC165, ERC721) returns (bool)",
                    "class_method_signature": "ERC721Enumerable.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev An `owner`'s token query was out of bounds for `index`.\n     *\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\n     */\n/**\n     * @dev Batch mint is not allowed.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "tokenOfOwnerByIndex",
                    "parameters": "address owner, uint256 index",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\n        if (index >= balanceOf(owner)) {\n            revert ERC721OutOfBoundsIndex(owner, index);\n        }\n        return _ownedTokens[owner][index];\n    }",
                    "start": "46",
                    "end": "51",
                    "class": "ERC721Enumerable",
                    "signature": "returns (uint256) tokenOfOwnerByIndexaddress owner, uint256 index",
                    "full_signature": "function tokenOfOwnerByIndex(address owner, uint256 index) public virtual view returns (uint256)",
                    "class_method_signature": "ERC721Enumerable.tokenOfOwnerByIndexaddress owner, uint256 index",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "totalSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function totalSupply() public view virtual returns (uint256) {\n        return _allTokens.length;\n    }",
                    "start": "56",
                    "end": "58",
                    "class": "ERC721Enumerable",
                    "signature": "returns (uint256) totalSupply",
                    "full_signature": "function totalSupply() public virtual view returns (uint256)",
                    "class_method_signature": "ERC721Enumerable.totalSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "tokenByIndex",
                    "parameters": "uint256 index",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function tokenByIndex(uint256 index) public view virtual returns (uint256) {\n        if (index >= totalSupply()) {\n            revert ERC721OutOfBoundsIndex(address(0), index);\n        }\n        return _allTokens[index];\n    }",
                    "start": "63",
                    "end": "68",
                    "class": "ERC721Enumerable",
                    "signature": "returns (uint256) tokenByIndexuint256 index",
                    "full_signature": "function tokenByIndex(uint256 index) public virtual view returns (uint256)",
                    "class_method_signature": "ERC721Enumerable.tokenByIndexuint256 index",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_update",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        if (previousOwner == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n\n        return previousOwner;\n    }",
                    "start": "73",
                    "end": "88",
                    "class": "ERC721Enumerable",
                    "signature": "returns (address) _updateaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address)",
                    "class_method_signature": "ERC721Enumerable._updateaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_update}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_addTokenToOwnerEnumeration",
                    "parameters": "address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = balanceOf(to) - 1;\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }",
                    "start": "95",
                    "end": "99",
                    "class": "ERC721Enumerable",
                    "signature": " _addTokenToOwnerEnumerationaddress to, uint256 tokenId",
                    "full_signature": "function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private   ",
                    "class_method_signature": "ERC721Enumerable._addTokenToOwnerEnumerationaddress to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_addTokenToAllTokensEnumeration",
                    "parameters": "uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }",
                    "start": "105",
                    "end": "108",
                    "class": "ERC721Enumerable",
                    "signature": " _addTokenToAllTokensEnumerationuint256 tokenId",
                    "full_signature": "function _addTokenToAllTokensEnumeration(uint256 tokenId) private   ",
                    "class_method_signature": "ERC721Enumerable._addTokenToAllTokensEnumerationuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_removeTokenFromOwnerEnumeration",
                    "parameters": "address from, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = balanceOf(from);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = _ownedTokens[from];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\n\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokensByOwner[lastTokenIndex];\n    }",
                    "start": "118",
                    "end": "138",
                    "class": "ERC721Enumerable",
                    "signature": " _removeTokenFromOwnerEnumerationaddress from, uint256 tokenId",
                    "full_signature": "function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private   ",
                    "class_method_signature": "ERC721Enumerable._removeTokenFromOwnerEnumerationaddress from, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_removeTokenFromAllTokensEnumeration",
                    "parameters": "uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }",
                    "start": "145",
                    "end": "163",
                    "class": "ERC721Enumerable",
                    "signature": " _removeTokenFromAllTokensEnumerationuint256 tokenId",
                    "full_signature": "function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private   ",
                    "class_method_signature": "ERC721Enumerable._removeTokenFromAllTokensEnumerationuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_increaseBalance",
                    "parameters": "address account, uint128 amount",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _increaseBalance(address account, uint128 amount) internal virtual override {\n        if (amount > 0) {\n            revert ERC721EnumerableForbiddenBatchMint();\n        }\n        super._increaseBalance(account, amount);\n    }",
                    "start": "168",
                    "end": "173",
                    "class": "ERC721Enumerable",
                    "signature": " _increaseBalanceaddress account, uint128 amount",
                    "full_signature": "function _increaseBalance(address account, uint128 amount) internal virtual override ",
                    "class_method_signature": "ERC721Enumerable._increaseBalanceaddress account, uint128 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Royalty.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(ERC721, ERC2981)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }",
                    "start": "24",
                    "end": "26",
                    "class": "ERC721Royalty",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(ERC721, ERC2981) returns (bool)",
                    "class_method_signature": "ERC721Royalty.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Pausable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_update",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _update(\n        address to,\n        uint256 tokenId,\n        address auth\n    ) internal virtual override whenNotPaused returns (address) {\n        return super._update(to, tokenId, auth);\n    }",
                    "start": "30",
                    "end": "36",
                    "class": "ERC721Pausable",
                    "signature": "returns (address) _updateaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address)",
                    "class_method_signature": "ERC721Pausable._updateaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(ERC721, IERC165)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\n    }",
                    "start": "27",
                    "end": "29",
                    "class": "ERC721URIStorage",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(ERC721, IERC165) returns (bool)",
                    "class_method_signature": "ERC721URIStorage.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\n// defines events and does not include any external function.\n// Optional mapping for token URIs\n/**\n     * @dev See {IERC165-supportsInterface}\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "tokenURI",
                    "parameters": "uint256 tokenId",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n\n        return super.tokenURI(tokenId);\n    }",
                    "start": "34",
                    "end": "50",
                    "class": "ERC721URIStorage",
                    "signature": "returns (string memory) tokenURIuint256 tokenId",
                    "full_signature": "function tokenURI(uint256 tokenId) public virtual override returns (string memory)",
                    "class_method_signature": "ERC721URIStorage.tokenURIuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setTokenURI",
                    "parameters": "uint256 tokenId, string memory _tokenURI",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        _tokenURIs[tokenId] = _tokenURI;\n        emit MetadataUpdate(tokenId);\n    }",
                    "start": "57",
                    "end": "60",
                    "class": "ERC721URIStorage",
                    "signature": " _setTokenURIuint256 tokenId, string memory _tokenURI",
                    "full_signature": "function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual  ",
                    "class_method_signature": "ERC721URIStorage._setTokenURIuint256 tokenId, string memory _tokenURI",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Consecutive.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_maxBatchSize",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint96)",
                    "body": "function _maxBatchSize() internal view virtual returns (uint96) {\n        return 5000;\n    }",
                    "start": "67",
                    "end": "69",
                    "class": "ERC721Consecutive",
                    "signature": "returns (uint96) _maxBatchSize",
                    "full_signature": "function _maxBatchSize() internal virtual view returns (uint96)",
                    "class_method_signature": "ERC721Consecutive._maxBatchSize",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Batch mint is restricted to the constructor.\n     * Any batch mint not emitting the {IERC721-Transfer} event outside of the constructor\n     * is non ERC-721 compliant.\n     */\n/**\n     * @dev Exceeds the max amount of mints per batch.\n     */\n/**\n     * @dev Individual minting is not allowed.\n     */\n/**\n     * @dev Batch burn is not supported.\n     */\n/**\n     * @dev Maximum size of a batch of consecutive tokens. This is designed to limit stress on off-chain indexing\n     * services that have to record one entry per token, and have protections against \"unreasonably large\" batches of\n     * tokens.\n     *\n     * NOTE: Overriding the default value of 5000 will not cause on-chain issues, but may result in the asset not being\n     * correctly supported by off-chain indexing services (including marketplaces).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_ownerOf",
                    "parameters": "uint256 tokenId",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _ownerOf(uint256 tokenId) internal view virtual override returns (address) {\n        address owner = super._ownerOf(tokenId);\n\n        // If token is owned by the core, or beyond consecutive range, return base value\n        if (owner != address(0) || tokenId > type(uint96).max || tokenId < _firstConsecutiveId()) {\n            return owner;\n        }\n\n        // Otherwise, check the token was not burned, and fetch ownership from the anchors\n        // Note: no need for safe cast, we know that tokenId <= type(uint96).max\n        return _sequentialBurn.get(tokenId) ? address(0) : address(_sequentialOwnership.lowerLookup(uint96(tokenId)));\n    }",
                    "start": "75",
                    "end": "86",
                    "class": "ERC721Consecutive",
                    "signature": "returns (address) _ownerOfuint256 tokenId",
                    "full_signature": "function _ownerOf(uint256 tokenId) internal virtual override returns (address)",
                    "class_method_signature": "ERC721Consecutive._ownerOfuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_ownerOf}. Override that checks the sequential ownership structure for tokens that have\n     * been minted as part of a batch, and not yet transferred.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_mintConsecutive",
                    "parameters": "address to, uint96 batchSize",
                    "modifiers": "",
                    "return": "returns (uint96)",
                    "body": "function _mintConsecutive(address to, uint96 batchSize) internal virtual returns (uint96) {\n        uint96 next = _nextConsecutiveId();\n\n        // minting a batch of size 0 is a no-op\n        if (batchSize > 0) {\n            if (address(this).code.length > 0) {\n                revert ERC721ForbiddenBatchMint();\n            }\n            if (to == address(0)) {\n                revert ERC721InvalidReceiver(address(0));\n            }\n\n            uint256 maxBatchSize = _maxBatchSize();\n            if (batchSize > maxBatchSize) {\n                revert ERC721ExceededMaxBatchMint(batchSize, maxBatchSize);\n            }\n\n            // push an ownership checkpoint & emit event\n            uint96 last = next + batchSize - 1;\n            _sequentialOwnership.push(last, uint160(to));\n\n            // The invariant required by this function is preserved because the new sequentialOwnership checkpoint\n            // is attributing ownership of `batchSize` new tokens to account `to`.\n            _increaseBalance(to, batchSize);\n\n            emit ConsecutiveTransfer(next, last, address(0), to);\n        }\n\n        return next;\n    }",
                    "start": "104",
                    "end": "133",
                    "class": "ERC721Consecutive",
                    "signature": "returns (uint96) _mintConsecutiveaddress to, uint96 batchSize",
                    "full_signature": "function _mintConsecutive(address to, uint96 batchSize) internal virtual  returns (uint96)",
                    "class_method_signature": "ERC721Consecutive._mintConsecutiveaddress to, uint96 batchSize",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mint a batch of tokens of length `batchSize` for `to`. Returns the token id of the first token minted in the\n     * batch; if `batchSize` is 0, returns the number of consecutive ids minted so far.\n     *\n     * Requirements:\n     *\n     * - `batchSize` must not be greater than {_maxBatchSize}.\n     * - The function is called in the constructor of the contract (directly or indirectly).\n     *\n     * CAUTION: Does not emit a `Transfer` event. This is ERC-721 compliant as long as it is done inside of the\n     * constructor, which is enforced by this function.\n     *\n     * CAUTION: Does not invoke `onERC721Received` on the receiver.\n     *\n     * Emits a {IERC2309-ConsecutiveTransfer} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_update",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        // only mint after construction\n        if (previousOwner == address(0) && address(this).code.length == 0) {\n            revert ERC721ForbiddenMint();\n        }\n\n        // record burn\n        if (\n            to == address(0) && // if we burn\n            tokenId < _nextConsecutiveId() && // and the tokenId was minted in a batch\n            !_sequentialBurn.get(tokenId) // and the token was never marked as burnt\n        ) {\n            _sequentialBurn.set(tokenId);\n        }\n\n        return previousOwner;\n    }",
                    "start": "141",
                    "end": "159",
                    "class": "ERC721Consecutive",
                    "signature": "returns (address) _updateaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address)",
                    "class_method_signature": "ERC721Consecutive._updateaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_update}. Override version that restricts normal minting to after construction.\n     *\n     * WARNING: Using {ERC721Consecutive} prevents minting during construction in favor of {_mintConsecutive}.\n     * After construction, {_mintConsecutive} is no longer available and minting through {_update} becomes available.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_firstConsecutiveId",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint96)",
                    "body": "function _firstConsecutiveId() internal view virtual returns (uint96) {\n        return 0;\n    }",
                    "start": "164",
                    "end": "166",
                    "class": "ERC721Consecutive",
                    "signature": "returns (uint96) _firstConsecutiveId",
                    "full_signature": "function _firstConsecutiveId() internal virtual view returns (uint96)",
                    "class_method_signature": "ERC721Consecutive._firstConsecutiveId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Used to offset the first token id in {_nextConsecutiveId}\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_nextConsecutiveId",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint96)",
                    "body": "function _nextConsecutiveId() private view returns (uint96) {\n        (bool exists, uint96 latestId, ) = _sequentialOwnership.latestCheckpoint();\n        return exists ? latestId + 1 : _firstConsecutiveId();\n    }",
                    "start": "172",
                    "end": "175",
                    "class": "ERC721Consecutive",
                    "signature": "returns (uint96) _nextConsecutiveId",
                    "full_signature": "function _nextConsecutiveId() private  view returns (uint96)",
                    "class_method_signature": "ERC721Consecutive._nextConsecutiveId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the next tokenId to mint using {_mintConsecutive}. It will return {_firstConsecutiveId}\n     * if no consecutive tokenId has been minted before.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Votes.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_update",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        _transferVotingUnits(previousOwner, to, 1);\n\n        return previousOwner;\n    }",
                    "start": "23",
                    "end": "29",
                    "class": "ERC721Votes",
                    "signature": "returns (address) _updateaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address)",
                    "class_method_signature": "ERC721Votes._updateaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_update}. Adjusts votes when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getVotingUnits",
                    "parameters": "address account",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _getVotingUnits(address account) internal view virtual override returns (uint256) {\n        return balanceOf(account);\n    }",
                    "start": "36",
                    "end": "38",
                    "class": "ERC721Votes",
                    "signature": "returns (uint256) _getVotingUnitsaddress account",
                    "full_signature": "function _getVotingUnits(address account) internal virtual override returns (uint256)",
                    "class_method_signature": "ERC721Votes._getVotingUnitsaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the balance of `account`.\n     *\n     * WARNING: Overriding this function will likely result in incorrect vote tracking.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_increaseBalance",
                    "parameters": "address account, uint128 amount",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _increaseBalance(address account, uint128 amount) internal virtual override {\n        super._increaseBalance(account, amount);\n        _transferVotingUnits(address(0), account, amount);\n    }",
                    "start": "43",
                    "end": "46",
                    "class": "ERC721Votes",
                    "signature": " _increaseBalanceaddress account, uint128 amount",
                    "full_signature": "function _increaseBalance(address account, uint128 amount) internal virtual override ",
                    "class_method_signature": "ERC721Votes._increaseBalanceaddress account, uint128 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Wrapper.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "depositFor",
                    "parameters": "address account, uint256[] memory tokenIds",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function depositFor(address account, uint256[] memory tokenIds) public virtual returns (bool) {\n        uint256 length = tokenIds.length;\n        for (uint256 i = 0; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n\n            // This is an \"unsafe\" transfer that doesn't call any hook on the receiver. With underlying() being trusted\n            // (by design of this contract) and no other contracts expected to be called from there, we are safe.\n            // slither-disable-next-line reentrancy-no-eth\n            underlying().transferFrom(_msgSender(), address(this), tokenId);\n            _safeMint(account, tokenId);\n        }\n\n        return true;\n    }",
                    "start": "31",
                    "end": "44",
                    "class": "ERC721Wrapper",
                    "signature": "returns (bool) depositForaddress account, uint256[] memory tokenIds",
                    "full_signature": "function depositFor(address account, uint256[] memory tokenIds) public virtual  returns (bool)",
                    "class_method_signature": "ERC721Wrapper.depositForaddress account, uint256[] memory tokenIds",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The received ERC-721 token couldn't be wrapped.\n     */\n/**\n     * @dev Allow a user to deposit underlying tokens and mint the corresponding tokenIds.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "withdrawTo",
                    "parameters": "address account, uint256[] memory tokenIds",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function withdrawTo(address account, uint256[] memory tokenIds) public virtual returns (bool) {\n        uint256 length = tokenIds.length;\n        for (uint256 i = 0; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n            // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n            _update(address(0), tokenId, _msgSender());\n            // Checks were already performed at this point, and there's no way to retake ownership or approval from\n            // the wrapped tokenId after this point, so it's safe to remove the reentrancy check for the next line.\n            // slither-disable-next-line reentrancy-no-eth\n            underlying().safeTransferFrom(address(this), account, tokenId);\n        }\n\n        return true;\n    }",
                    "start": "49",
                    "end": "63",
                    "class": "ERC721Wrapper",
                    "signature": "returns (bool) withdrawToaddress account, uint256[] memory tokenIds",
                    "full_signature": "function withdrawTo(address account, uint256[] memory tokenIds) public virtual  returns (bool)",
                    "class_method_signature": "ERC721Wrapper.withdrawToaddress account, uint256[] memory tokenIds",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Allow a user to burn wrapped tokens and withdraw the corresponding tokenIds of the underlying tokens.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "onERC721Received",
                    "parameters": "address, address from, uint256 tokenId, bytes memory",
                    "modifiers": "",
                    "return": "returns (bytes4)",
                    "body": "function onERC721Received(address, address from, uint256 tokenId, bytes memory) public virtual returns (bytes4) {\n        if (address(underlying()) != _msgSender()) {\n            revert ERC721UnsupportedToken(_msgSender());\n        }\n        _safeMint(from, tokenId);\n        return IERC721Receiver.onERC721Received.selector;\n    }",
                    "start": "75",
                    "end": "81",
                    "class": "ERC721Wrapper",
                    "signature": "returns (bytes4) onERC721Receivedaddress, address from, uint256 tokenId, bytes memory",
                    "full_signature": "function onERC721Received(address, address from, uint256 tokenId, bytes memory) public virtual  returns (bytes4)",
                    "class_method_signature": "ERC721Wrapper.onERC721Receivedaddress, address from, uint256 tokenId, bytes memory",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Overrides {IERC721Receiver-onERC721Received} to allow minting on direct ERC-721 transfers to\n     * this contract.\n     *\n     * In case there's data attached, it validates that the operator is this contract, so only trusted data\n     * is accepted from {depositFor}.\n     *\n     * WARNING: Doesn't work with unsafe transfers (eg. {IERC721-transferFrom}). Use {ERC721Wrapper-_recover}\n     * for recovering in that scenario.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_recover",
                    "parameters": "address account, uint256 tokenId",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function _recover(address account, uint256 tokenId) internal virtual returns (uint256) {\n        address owner = underlying().ownerOf(tokenId);\n        if (owner != address(this)) {\n            revert ERC721IncorrectOwner(address(this), tokenId, owner);\n        }\n        _safeMint(account, tokenId);\n        return tokenId;\n    }",
                    "start": "87",
                    "end": "94",
                    "class": "ERC721Wrapper",
                    "signature": "returns (uint256) _recoveraddress account, uint256 tokenId",
                    "full_signature": "function _recover(address account, uint256 tokenId) internal virtual  returns (uint256)",
                    "class_method_signature": "ERC721Wrapper._recoveraddress account, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mint a wrapped token to cover any underlyingToken that would have been transferred by mistake. Internal\n     * function that can be exposed with access control if desired.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "underlying",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (IERC721)",
                    "body": "function underlying() public view virtual returns (IERC721) {\n        return _underlying;\n    }",
                    "start": "99",
                    "end": "101",
                    "class": "ERC721Wrapper",
                    "signature": "returns (IERC721) underlying",
                    "full_signature": "function underlying() public virtual view returns (IERC721)",
                    "class_method_signature": "ERC721Wrapper.underlying",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the underlying token.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Burnable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "burn",
                    "parameters": "uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function burn(uint256 tokenId) public virtual {\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        _update(address(0), tokenId, _msgSender());\n    }",
                    "start": "21",
                    "end": "25",
                    "class": "ERC721Burnable",
                    "signature": " burnuint256 tokenId",
                    "full_signature": "function burn(uint256 tokenId) public virtual  ",
                    "class_method_signature": "ERC721Burnable.burnuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "name",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function name() public view virtual returns (string memory) {\n        return _name;\n    }",
                    "start": "53",
                    "end": "55",
                    "class": "ERC20",
                    "signature": "returns (string memory) name",
                    "full_signature": "function name() public virtual view returns (string memory)",
                    "class_method_signature": "ERC20.name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n/**\n     * @dev Returns the name of the token.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "symbol",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }",
                    "start": "61",
                    "end": "63",
                    "class": "ERC20",
                    "signature": "returns (string memory) symbol",
                    "full_signature": "function symbol() public virtual view returns (string memory)",
                    "class_method_signature": "ERC20.symbol",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "decimals",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint8)",
                    "body": "function decimals() public view virtual returns (uint8) {\n        return 18;\n    }",
                    "start": "78",
                    "end": "80",
                    "class": "ERC20",
                    "signature": "returns (uint8) decimals",
                    "full_signature": "function decimals() public virtual view returns (uint8)",
                    "class_method_signature": "ERC20.decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "totalSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }",
                    "start": "85",
                    "end": "87",
                    "class": "ERC20",
                    "signature": "returns (uint256) totalSupply",
                    "full_signature": "function totalSupply() public virtual view returns (uint256)",
                    "class_method_signature": "ERC20.totalSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-totalSupply}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "balanceOf",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }",
                    "start": "92",
                    "end": "94",
                    "class": "ERC20",
                    "signature": "returns (uint256) balanceOfaddress account",
                    "full_signature": "function balanceOf(address account) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20.balanceOfaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-balanceOf}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transfer",
                    "parameters": "address to, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }",
                    "start": "104",
                    "end": "108",
                    "class": "ERC20",
                    "signature": "returns (bool) transferaddress to, uint256 value",
                    "full_signature": "function transfer(address to, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20.transferaddress to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "allowance",
                    "parameters": "address owner, address spender",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }",
                    "start": "113",
                    "end": "115",
                    "class": "ERC20",
                    "signature": "returns (uint256) allowanceaddress owner, address spender",
                    "full_signature": "function allowance(address owner, address spender) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20.allowanceaddress owner, address spender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-allowance}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "approve",
                    "parameters": "address spender, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }",
                    "start": "127",
                    "end": "131",
                    "class": "ERC20",
                    "signature": "returns (bool) approveaddress spender, uint256 value",
                    "full_signature": "function approve(address spender, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20.approveaddress spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferFrom",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }",
                    "start": "149",
                    "end": "154",
                    "class": "ERC20",
                    "signature": "returns (bool) transferFromaddress from, address to, uint256 value",
                    "full_signature": "function transferFrom(address from, address to, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20.transferFromaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_transfer",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }",
                    "start": "166",
                    "end": "174",
                    "class": "ERC20",
                    "signature": " _transferaddress from, address to, uint256 value",
                    "full_signature": "function _transfer(address from, address to, uint256 value) internal   ",
                    "class_method_signature": "ERC20._transferaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }",
                    "start": "183",
                    "end": "211",
                    "class": "ERC20",
                    "signature": " _updateaddress from, address to, uint256 value",
                    "full_signature": "function _update(address from, address to, uint256 value) internal virtual  ",
                    "class_method_signature": "ERC20._updateaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_mint",
                    "parameters": "address account, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }",
                    "start": "221",
                    "end": "226",
                    "class": "ERC20",
                    "signature": " _mintaddress account, uint256 value",
                    "full_signature": "function _mint(address account, uint256 value) internal   ",
                    "class_method_signature": "ERC20._mintaddress account, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_burn",
                    "parameters": "address account, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }",
                    "start": "236",
                    "end": "241",
                    "class": "ERC20",
                    "signature": " _burnaddress account, uint256 value",
                    "full_signature": "function _burn(address account, uint256 value) internal   ",
                    "class_method_signature": "ERC20._burnaddress account, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_approve",
                    "parameters": "address owner, address spender, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }",
                    "start": "258",
                    "end": "260",
                    "class": "ERC20",
                    "signature": " _approveaddress owner, address spender, uint256 value",
                    "full_signature": "function _approve(address owner, address spender, uint256 value) internal   ",
                    "class_method_signature": "ERC20._approveaddress owner, address spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_approve",
                    "parameters": "address owner, address spender, uint256 value, bool emitEvent",
                    "modifiers": "",
                    "return": "",
                    "body": "function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }",
                    "start": "280",
                    "end": "291",
                    "class": "ERC20",
                    "signature": " _approveaddress owner, address spender, uint256 value, bool emitEvent",
                    "full_signature": "function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual  ",
                    "class_method_signature": "ERC20._approveaddress owner, address spender, uint256 value, bool emitEvent",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_spendAllowance",
                    "parameters": "address owner, address spender, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }",
                    "start": "301",
                    "end": "311",
                    "class": "ERC20",
                    "signature": " _spendAllowanceaddress owner, address spender, uint256 value",
                    "full_signature": "function _spendAllowance(address owner, address spender, uint256 value) internal virtual  ",
                    "class_method_signature": "ERC20._spendAllowanceaddress owner, address spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/utils/ERC1363Utils.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Pausable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\n        super._update(from, to, value);\n    }",
                    "start": "30",
                    "end": "32",
                    "class": "ERC20Pausable",
                    "signature": " _updateaddress from, address to, uint256 value",
                    "full_signature": "function _update(address from, address to, uint256 value) internal virtual override ",
                    "class_method_signature": "ERC20Pausable._updateaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC20-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20FlashMint.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "maxFlashLoan",
                    "parameters": "address token",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function maxFlashLoan(address token) public view virtual returns (uint256) {\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\n    }",
                    "start": "48",
                    "end": "50",
                    "class": "ERC20FlashMint",
                    "signature": "returns (uint256) maxFlashLoanaddress token",
                    "full_signature": "function maxFlashLoan(address token) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20FlashMint.maxFlashLoanaddress token",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The loan token is not valid.\n     */\n/**\n     * @dev The requested loan exceeds the max loan value for `token`.\n     */\n/**\n     * @dev The receiver of a flashloan is not a valid {IERC3156FlashBorrower-onFlashLoan} implementer.\n     */\n/**\n     * @dev Returns the maximum amount of tokens available for loan.\n     * @param token The address of the token that is requested.\n     * @return The amount of token that can be loaned.\n     *\n     * NOTE: This function does not consider any form of supply cap, so in case\n     * it's used in a token with a cap like {ERC20Capped}, make sure to override this\n     * function to integrate the cap instead of `type(uint256).max`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "flashFee",
                    "parameters": "address token, uint256 value",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function flashFee(address token, uint256 value) public view virtual returns (uint256) {\n        if (token != address(this)) {\n            revert ERC3156UnsupportedToken(token);\n        }\n        return _flashFee(token, value);\n    }",
                    "start": "60",
                    "end": "65",
                    "class": "ERC20FlashMint",
                    "signature": "returns (uint256) flashFeeaddress token, uint256 value",
                    "full_signature": "function flashFee(address token, uint256 value) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20FlashMint.flashFeeaddress token, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the fee applied when doing flash loans. This function calls\n     * the {_flashFee} function which returns the fee applied when doing flash\n     * loans.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_flashFee",
                    "parameters": "address token, uint256 value",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _flashFee(address token, uint256 value) internal view virtual returns (uint256) {\n        // silence warning about unused variable without the addition of bytecode.\n        token;\n        value;\n        return 0;\n    }",
                    "start": "75",
                    "end": "80",
                    "class": "ERC20FlashMint",
                    "signature": "returns (uint256) _flashFeeaddress token, uint256 value",
                    "full_signature": "function _flashFee(address token, uint256 value) internal virtual view returns (uint256)",
                    "class_method_signature": "ERC20FlashMint._flashFeeaddress token, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the fee applied when doing flash loans. By default this\n     * implementation has 0 fees. This function can be overloaded to make\n     * the flash loan mechanism deflationary.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_flashFeeReceiver",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _flashFeeReceiver() internal view virtual returns (address) {\n        return address(0);\n    }",
                    "start": "88",
                    "end": "90",
                    "class": "ERC20FlashMint",
                    "signature": "returns (address) _flashFeeReceiver",
                    "full_signature": "function _flashFeeReceiver() internal virtual view returns (address)",
                    "class_method_signature": "ERC20FlashMint._flashFeeReceiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the receiver address of the flash fee. By default this\n     * implementation returns the address(0) which means the fee amount will be burnt.\n     * This function can be overloaded to change the fee receiver.\n     * @return The address for which the flash fee will be sent to.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "flashLoan",
                    "parameters": "IERC3156FlashBorrower receiver, address token, uint256 value, bytes calldata data",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 value,\n        bytes calldata data\n    ) public virtual returns (bool) {\n        uint256 maxLoan = maxFlashLoan(token);\n        if (value > maxLoan) {\n            revert ERC3156ExceededMaxLoan(maxLoan);\n        }\n        uint256 fee = flashFee(token, value);\n        _mint(address(receiver), value);\n        if (receiver.onFlashLoan(_msgSender(), token, value, fee, data) != RETURN_VALUE) {\n            revert ERC3156InvalidReceiver(address(receiver));\n        }\n        address flashFeeReceiver = _flashFeeReceiver();\n        _spendAllowance(address(receiver), address(this), value + fee);\n        if (fee == 0 || flashFeeReceiver == address(0)) {\n            _burn(address(receiver), value + fee);\n        } else {\n            _burn(address(receiver), value);\n            _transfer(address(receiver), flashFeeReceiver, fee);\n        }\n        return true;\n    }",
                    "start": "109",
                    "end": "133",
                    "class": "ERC20FlashMint",
                    "signature": "returns (bool) flashLoanIERC3156FlashBorrower receiver, address token, uint256 value, bytes calldata data",
                    "full_signature": "function flashLoan(IERC3156FlashBorrower receiver, address token, uint256 value, bytes calldata data) public virtual  returns (bool)",
                    "class_method_signature": "ERC20FlashMint.flashLoanIERC3156FlashBorrower receiver, address token, uint256 value, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Performs a flash loan. New tokens are minted and sent to the\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\n     * interface. By the end of the flash loan, the receiver is expected to own\n     * value + fee tokens and have them approved back to the token contract itself so\n     * they can be burned.\n     * @param receiver The receiver of the flash loan. Should implement the\n     * {IERC3156FlashBorrower-onFlashLoan} interface.\n     * @param token The token to be flash loaned. Only `address(this)` is\n     * supported.\n     * @param value The amount of tokens to be loaned.\n     * @param data An arbitrary datafield that is passed to the receiver.\n     * @return `true` if the flash loan was successful.\n     */\n// This function can reenter, but it doesn't pose a risk because it always preserves the property that the amount\n// minted at the beginning is always recovered and burned at the end, or else the entire function will revert.\n// slither-disable-next-line reentrancy-no-eth\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20TemporaryApproval.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "allowance",
                    "parameters": "address owner, address spender",
                    "modifiers": "override(IERC20, ERC20)",
                    "return": "returns (uint256)",
                    "body": "function allowance(address owner, address spender) public view virtual override(IERC20, ERC20) returns (uint256) {\n        (bool success, uint256 amount) = Math.tryAdd(\n            super.allowance(owner, spender),\n            _temporaryAllowance(owner, spender)\n        );\n        return success ? amount : type(uint256).max;\n    }",
                    "start": "32",
                    "end": "38",
                    "class": "ERC20TemporaryApproval",
                    "signature": "returns (uint256) allowanceaddress owner, address spender",
                    "full_signature": "function allowance(address owner, address spender) public virtual override(IERC20, ERC20) returns (uint256)",
                    "class_method_signature": "ERC20TemporaryApproval.allowanceaddress owner, address spender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC20_TEMPORARY_APPROVAL_STORAGE\")) - 1)) & ~bytes32(uint256(0xff))\n/**\n     * @dev {allowance} override that includes the temporary allowance when looking up the current allowance. If\n     * adding up the persistent and the temporary allowances result in an overflow, type(uint256).max is returned.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_temporaryAllowance",
                    "parameters": "address owner, address spender",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _temporaryAllowance(address owner, address spender) internal view virtual returns (uint256) {\n        return _temporaryAllowanceSlot(owner, spender).tload();\n    }",
                    "start": "43",
                    "end": "45",
                    "class": "ERC20TemporaryApproval",
                    "signature": "returns (uint256) _temporaryAllowanceaddress owner, address spender",
                    "full_signature": "function _temporaryAllowance(address owner, address spender) internal virtual view returns (uint256)",
                    "class_method_signature": "ERC20TemporaryApproval._temporaryAllowanceaddress owner, address spender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal getter for the current temporary allowance that `spender` has over `owner` tokens.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "temporaryApprove",
                    "parameters": "address spender, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function temporaryApprove(address spender, uint256 value) public virtual returns (bool) {\n        _temporaryApprove(_msgSender(), spender, value);\n        return true;\n    }",
                    "start": "58",
                    "end": "61",
                    "class": "ERC20TemporaryApproval",
                    "signature": "returns (bool) temporaryApproveaddress spender, uint256 value",
                    "full_signature": "function temporaryApprove(address spender, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20TemporaryApproval.temporaryApproveaddress spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Alternative to {approve} that sets a `value` amount of tokens as the temporary allowance of `spender` over\n     * the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Requirements:\n     * - `spender` cannot be the zero address.\n     *\n     * Does NOT emit an {Approval} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_temporaryApprove",
                    "parameters": "address owner, address spender, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _temporaryApprove(address owner, address spender, uint256 value) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _temporaryAllowanceSlot(owner, spender).tstore(value);\n    }",
                    "start": "75",
                    "end": "83",
                    "class": "ERC20TemporaryApproval",
                    "signature": " _temporaryApproveaddress owner, address spender, uint256 value",
                    "full_signature": "function _temporaryApprove(address owner, address spender, uint256 value) internal virtual  ",
                    "class_method_signature": "ERC20TemporaryApproval._temporaryApproveaddress owner, address spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `value` as the temporary allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `temporaryApprove`, and can be used to e.g. set automatic allowances\n     * for certain subsystems, etc.\n     *\n     * Requirements:\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Does NOT emit an {Approval} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_spendAllowance",
                    "parameters": "address owner, address spender, uint256 value",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _spendAllowance(address owner, address spender, uint256 value) internal virtual override {\n        // load transient allowance\n        uint256 currentTemporaryAllowance = _temporaryAllowance(owner, spender);\n\n        // Check and update (if needed) the temporary allowance + set remaining value\n        if (currentTemporaryAllowance > 0) {\n            // All value is covered by the infinite allowance. nothing left to spend, we can return early\n            if (currentTemporaryAllowance == type(uint256).max) {\n                return;\n            }\n            // check how much of the value is covered by the transient allowance\n            uint256 spendTemporaryAllowance = Math.min(currentTemporaryAllowance, value);\n            unchecked {\n                // decrease transient allowance accordingly\n                _temporaryApprove(owner, spender, currentTemporaryAllowance - spendTemporaryAllowance);\n                // update value necessary\n                value -= spendTemporaryAllowance;\n            }\n        }\n        // reduce any remaining value from the persistent allowance\n        if (value > 0) {\n            super._spendAllowance(owner, spender, value);\n        }\n    }",
                    "start": "91",
                    "end": "114",
                    "class": "ERC20TemporaryApproval",
                    "signature": " _spendAllowanceaddress owner, address spender, uint256 value",
                    "full_signature": "function _spendAllowance(address owner, address spender, uint256 value) internal virtual override ",
                    "class_method_signature": "ERC20TemporaryApproval._spendAllowanceaddress owner, address spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev {_spendAllowance} override that consumes the temporary allowance (if any) before eventually falling back\n     * to consuming the persistent allowance.\n     * NOTE: This function skips calling `super._spendAllowance` if the temporary allowance\n     * is enough to cover the spending.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Wrapper.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "decimals",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint8)",
                    "body": "function decimals() public view virtual override returns (uint8) {\n        try IERC20Metadata(address(_underlying)).decimals() returns (uint8 value) {\n            return value;\n        } catch {\n            return super.decimals();\n        }\n    }",
                    "start": "39",
                    "end": "45",
                    "class": "ERC20Wrapper",
                    "signature": "returns (uint8) decimals",
                    "full_signature": "function decimals() public virtual override returns (uint8)",
                    "class_method_signature": "ERC20Wrapper.decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The underlying token couldn't be wrapped.\n     */\n/**\n     * @dev See {ERC20-decimals}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "underlying",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (IERC20)",
                    "body": "function underlying() public view returns (IERC20) {\n        return _underlying;\n    }",
                    "start": "50",
                    "end": "52",
                    "class": "ERC20Wrapper",
                    "signature": "returns (IERC20) underlying",
                    "full_signature": "function underlying() public  view returns (IERC20)",
                    "class_method_signature": "ERC20Wrapper.underlying",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the address of the underlying ERC-20 token that is being wrapped.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "depositFor",
                    "parameters": "address account, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function depositFor(address account, uint256 value) public virtual returns (bool) {\n        address sender = _msgSender();\n        if (sender == address(this)) {\n            revert ERC20InvalidSender(address(this));\n        }\n        if (account == address(this)) {\n            revert ERC20InvalidReceiver(account);\n        }\n        SafeERC20.safeTransferFrom(_underlying, sender, address(this), value);\n        _mint(account, value);\n        return true;\n    }",
                    "start": "57",
                    "end": "68",
                    "class": "ERC20Wrapper",
                    "signature": "returns (bool) depositForaddress account, uint256 value",
                    "full_signature": "function depositFor(address account, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20Wrapper.depositForaddress account, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Allow a user to deposit underlying tokens and mint the corresponding number of wrapped tokens.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "withdrawTo",
                    "parameters": "address account, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function withdrawTo(address account, uint256 value) public virtual returns (bool) {\n        if (account == address(this)) {\n            revert ERC20InvalidReceiver(account);\n        }\n        _burn(_msgSender(), value);\n        SafeERC20.safeTransfer(_underlying, account, value);\n        return true;\n    }",
                    "start": "73",
                    "end": "80",
                    "class": "ERC20Wrapper",
                    "signature": "returns (bool) withdrawToaddress account, uint256 value",
                    "full_signature": "function withdrawTo(address account, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20Wrapper.withdrawToaddress account, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Allow a user to burn a number of wrapped tokens and withdraw the corresponding number of underlying tokens.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_recover",
                    "parameters": "address account",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function _recover(address account) internal virtual returns (uint256) {\n        uint256 value = _underlying.balanceOf(address(this)) - totalSupply();\n        _mint(account, value);\n        return value;\n    }",
                    "start": "86",
                    "end": "90",
                    "class": "ERC20Wrapper",
                    "signature": "returns (uint256) _recoveraddress account",
                    "full_signature": "function _recover(address account) internal virtual  returns (uint256)",
                    "class_method_signature": "ERC20Wrapper._recoveraddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mint wrapped token to cover any underlyingTokens that would have been transferred by mistake or acquired from\n     * rebasing mechanisms. Internal function that can be exposed with access control if desired.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_tryGetAssetDecimals",
                    "parameters": "IERC20 asset_",
                    "modifiers": "view",
                    "return": "returns (bool ok, uint8 assetDecimals)",
                    "body": "function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool ok, uint8 assetDecimals) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeCall(IERC20Metadata.decimals, ())\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }",
                    "start": "86",
                    "end": "97",
                    "class": "ERC4626",
                    "signature": "returns (bool ok, uint8 assetDecimals) _tryGetAssetDecimalsIERC20 asset_",
                    "full_signature": "function _tryGetAssetDecimals(IERC20 asset_) private  view returns (bool ok, uint8 assetDecimals)",
                    "class_method_signature": "ERC4626._tryGetAssetDecimalsIERC20 asset_",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n/**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n/**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n/**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n/**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC-20 or ERC-777).\n     */\n/**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "decimals",
                    "parameters": "",
                    "modifiers": "override(IERC20Metadata, ERC20)",
                    "return": "returns (uint8)",
                    "body": "function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }",
                    "start": "106",
                    "end": "108",
                    "class": "ERC4626",
                    "signature": "returns (uint8) decimals",
                    "full_signature": "function decimals() public virtual override(IERC20Metadata, ERC20) returns (uint8)",
                    "class_method_signature": "ERC4626.decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "asset",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function asset() public view virtual returns (address) {\n        return address(_asset);\n    }",
                    "start": "111",
                    "end": "113",
                    "class": "ERC4626",
                    "signature": "returns (address) asset",
                    "full_signature": "function asset() public virtual view returns (address)",
                    "class_method_signature": "ERC4626.asset",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-asset}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "totalAssets",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function totalAssets() public view virtual returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }",
                    "start": "116",
                    "end": "118",
                    "class": "ERC4626",
                    "signature": "returns (uint256) totalAssets",
                    "full_signature": "function totalAssets() public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.totalAssets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-totalAssets}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "convertToShares",
                    "parameters": "uint256 assets",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }",
                    "start": "121",
                    "end": "123",
                    "class": "ERC4626",
                    "signature": "returns (uint256) convertToSharesuint256 assets",
                    "full_signature": "function convertToShares(uint256 assets) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.convertToSharesuint256 assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-convertToShares}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "convertToAssets",
                    "parameters": "uint256 shares",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }",
                    "start": "126",
                    "end": "128",
                    "class": "ERC4626",
                    "signature": "returns (uint256) convertToAssetsuint256 shares",
                    "full_signature": "function convertToAssets(uint256 shares) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.convertToAssetsuint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-convertToAssets}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "maxDeposit",
                    "parameters": "address",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }",
                    "start": "131",
                    "end": "133",
                    "class": "ERC4626",
                    "signature": "returns (uint256) maxDepositaddress",
                    "full_signature": "function maxDeposit(address) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.maxDepositaddress",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-maxDeposit}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "maxMint",
                    "parameters": "address",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }",
                    "start": "136",
                    "end": "138",
                    "class": "ERC4626",
                    "signature": "returns (uint256) maxMintaddress",
                    "full_signature": "function maxMint(address) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.maxMintaddress",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-maxMint}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "maxWithdraw",
                    "parameters": "address owner",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }",
                    "start": "141",
                    "end": "143",
                    "class": "ERC4626",
                    "signature": "returns (uint256) maxWithdrawaddress owner",
                    "full_signature": "function maxWithdraw(address owner) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.maxWithdrawaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-maxWithdraw}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "maxRedeem",
                    "parameters": "address owner",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }",
                    "start": "146",
                    "end": "148",
                    "class": "ERC4626",
                    "signature": "returns (uint256) maxRedeemaddress owner",
                    "full_signature": "function maxRedeem(address owner) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.maxRedeemaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-maxRedeem}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewDeposit",
                    "parameters": "uint256 assets",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }",
                    "start": "151",
                    "end": "153",
                    "class": "ERC4626",
                    "signature": "returns (uint256) previewDeposituint256 assets",
                    "full_signature": "function previewDeposit(uint256 assets) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.previewDeposituint256 assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-previewDeposit}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewMint",
                    "parameters": "uint256 shares",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }",
                    "start": "156",
                    "end": "158",
                    "class": "ERC4626",
                    "signature": "returns (uint256) previewMintuint256 shares",
                    "full_signature": "function previewMint(uint256 shares) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.previewMintuint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-previewMint}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewWithdraw",
                    "parameters": "uint256 assets",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }",
                    "start": "161",
                    "end": "163",
                    "class": "ERC4626",
                    "signature": "returns (uint256) previewWithdrawuint256 assets",
                    "full_signature": "function previewWithdraw(uint256 assets) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.previewWithdrawuint256 assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-previewWithdraw}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewRedeem",
                    "parameters": "uint256 shares",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }",
                    "start": "166",
                    "end": "168",
                    "class": "ERC4626",
                    "signature": "returns (uint256) previewRedeemuint256 shares",
                    "full_signature": "function previewRedeem(uint256 shares) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.previewRedeemuint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-previewRedeem}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "deposit",
                    "parameters": "uint256 assets, address receiver",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }",
                    "start": "171",
                    "end": "181",
                    "class": "ERC4626",
                    "signature": "returns (uint256) deposituint256 assets, address receiver",
                    "full_signature": "function deposit(uint256 assets, address receiver) public virtual  returns (uint256)",
                    "class_method_signature": "ERC4626.deposituint256 assets, address receiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-deposit}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "mint",
                    "parameters": "uint256 shares, address receiver",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }",
                    "start": "184",
                    "end": "194",
                    "class": "ERC4626",
                    "signature": "returns (uint256) mintuint256 shares, address receiver",
                    "full_signature": "function mint(uint256 shares, address receiver) public virtual  returns (uint256)",
                    "class_method_signature": "ERC4626.mintuint256 shares, address receiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-mint}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "withdraw",
                    "parameters": "uint256 assets, address receiver, address owner",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }",
                    "start": "197",
                    "end": "207",
                    "class": "ERC4626",
                    "signature": "returns (uint256) withdrawuint256 assets, address receiver, address owner",
                    "full_signature": "function withdraw(uint256 assets, address receiver, address owner) public virtual  returns (uint256)",
                    "class_method_signature": "ERC4626.withdrawuint256 assets, address receiver, address owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-withdraw}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "redeem",
                    "parameters": "uint256 shares, address receiver, address owner",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }",
                    "start": "210",
                    "end": "220",
                    "class": "ERC4626",
                    "signature": "returns (uint256) redeemuint256 shares, address receiver, address owner",
                    "full_signature": "function redeem(uint256 shares, address receiver, address owner) public virtual  returns (uint256)",
                    "class_method_signature": "ERC4626.redeemuint256 shares, address receiver, address owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-redeem}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_convertToShares",
                    "parameters": "uint256 assets, Math.Rounding rounding",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }",
                    "start": "225",
                    "end": "227",
                    "class": "ERC4626",
                    "signature": "returns (uint256) _convertToSharesuint256 assets, Math.Rounding rounding",
                    "full_signature": "function _convertToShares(uint256 assets, Math.Rounding rounding) internal virtual view returns (uint256)",
                    "class_method_signature": "ERC4626._convertToSharesuint256 assets, Math.Rounding rounding",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_convertToAssets",
                    "parameters": "uint256 shares, Math.Rounding rounding",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }",
                    "start": "232",
                    "end": "234",
                    "class": "ERC4626",
                    "signature": "returns (uint256) _convertToAssetsuint256 shares, Math.Rounding rounding",
                    "full_signature": "function _convertToAssets(uint256 shares, Math.Rounding rounding) internal virtual view returns (uint256)",
                    "class_method_signature": "ERC4626._convertToAssetsuint256 shares, Math.Rounding rounding",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_deposit",
                    "parameters": "address caller, address receiver, uint256 assets, uint256 shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }",
                    "start": "239",
                    "end": "251",
                    "class": "ERC4626",
                    "signature": " _depositaddress caller, address receiver, uint256 assets, uint256 shares",
                    "full_signature": "function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual  ",
                    "class_method_signature": "ERC4626._depositaddress caller, address receiver, uint256 assets, uint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Deposit/mint common workflow.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_withdraw",
                    "parameters": "address caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }",
                    "start": "256",
                    "end": "277",
                    "class": "ERC4626",
                    "signature": " _withdrawaddress caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "full_signature": "function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares) internal virtual  ",
                    "class_method_signature": "ERC4626._withdrawaddress caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Withdraw/redeem common workflow.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC1363.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(ERC165, IERC165)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "45",
                    "end": "47",
                    "class": "ERC1363",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(ERC165, IERC165) returns (bool)",
                    "class_method_signature": "ERC1363.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Indicates a failure within the {transfer} part of a transferAndCall operation.\n     * @param receiver Address to which tokens are being transferred.\n     * @param value Amount of tokens to be transferred.\n     */\n/**\n     * @dev Indicates a failure within the {transferFrom} part of a transferFromAndCall operation.\n     * @param sender Address from which to send tokens.\n     * @param receiver Address to which tokens are being transferred.\n     * @param value Amount of tokens to be transferred.\n     */\n/**\n     * @dev Indicates a failure within the {approve} part of a approveAndCall operation.\n     * @param spender Address which will spend the funds.\n     * @param value Amount of tokens to be spent.\n     */\n/**\n     * @inheritdoc IERC165\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferAndCall",
                    "parameters": "address to, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transferAndCall(address to, uint256 value) public returns (bool) {\n        return transferAndCall(to, value, \"\");\n    }",
                    "start": "60",
                    "end": "62",
                    "class": "ERC1363",
                    "signature": "returns (bool) transferAndCalladdress to, uint256 value",
                    "full_signature": "function transferAndCall(address to, uint256 value) public   returns (bool)",
                    "class_method_signature": "ERC1363.transferAndCalladdress to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `to` must implement the {IERC1363Receiver} interface.\n     * - The target must return the {IERC1363Receiver-onTransferReceived} selector to accept the transfer.\n     * - The internal {transfer} must succeed (returned `true`).\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferAndCall",
                    "parameters": "address to, uint256 value, bytes memory data",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transferAndCall(address to, uint256 value, bytes memory data) public virtual returns (bool) {\n        if (!transfer(to, value)) {\n            revert ERC1363TransferFailed(to, value);\n        }\n        ERC1363Utils.checkOnERC1363TransferReceived(_msgSender(), _msgSender(), to, value, data);\n        return true;\n    }",
                    "start": "68",
                    "end": "74",
                    "class": "ERC1363",
                    "signature": "returns (bool) transferAndCalladdress to, uint256 value, bytes memory data",
                    "full_signature": "function transferAndCall(address to, uint256 value, bytes memory data) public virtual  returns (bool)",
                    "class_method_signature": "ERC1363.transferAndCalladdress to, uint256 value, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Variant of {transferAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferFromAndCall",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transferFromAndCall(address from, address to, uint256 value) public returns (bool) {\n        return transferFromAndCall(from, to, value, \"\");\n    }",
                    "start": "87",
                    "end": "89",
                    "class": "ERC1363",
                    "signature": "returns (bool) transferFromAndCalladdress from, address to, uint256 value",
                    "full_signature": "function transferFromAndCall(address from, address to, uint256 value) public   returns (bool)",
                    "class_method_signature": "ERC1363.transferFromAndCalladdress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `to` must implement the {IERC1363Receiver} interface.\n     * - The target must return the {IERC1363Receiver-onTransferReceived} selector to accept the transfer.\n     * - The internal {transferFrom} must succeed (returned `true`).\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferFromAndCall",
                    "parameters": "address from, address to, uint256 value, bytes memory data",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transferFromAndCall(\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) public virtual returns (bool) {\n        if (!transferFrom(from, to, value)) {\n            revert ERC1363TransferFromFailed(from, to, value);\n        }\n        ERC1363Utils.checkOnERC1363TransferReceived(_msgSender(), from, to, value, data);\n        return true;\n    }",
                    "start": "95",
                    "end": "106",
                    "class": "ERC1363",
                    "signature": "returns (bool) transferFromAndCalladdress from, address to, uint256 value, bytes memory data",
                    "full_signature": "function transferFromAndCall(address from, address to, uint256 value, bytes memory data) public virtual  returns (bool)",
                    "class_method_signature": "ERC1363.transferFromAndCalladdress from, address to, uint256 value, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Variant of {transferFromAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "approveAndCall",
                    "parameters": "address spender, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function approveAndCall(address spender, uint256 value) public returns (bool) {\n        return approveAndCall(spender, value, \"\");\n    }",
                    "start": "119",
                    "end": "121",
                    "class": "ERC1363",
                    "signature": "returns (bool) approveAndCalladdress spender, uint256 value",
                    "full_signature": "function approveAndCall(address spender, uint256 value) public   returns (bool)",
                    "class_method_signature": "ERC1363.approveAndCalladdress spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `spender` must implement the {IERC1363Spender} interface.\n     * - The target must return the {IERC1363Spender-onApprovalReceived} selector to accept the approval.\n     * - The internal {approve} must succeed (returned `true`).\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "approveAndCall",
                    "parameters": "address spender, uint256 value, bytes memory data",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function approveAndCall(address spender, uint256 value, bytes memory data) public virtual returns (bool) {\n        if (!approve(spender, value)) {\n            revert ERC1363ApproveFailed(spender, value);\n        }\n        ERC1363Utils.checkOnERC1363ApprovalReceived(_msgSender(), spender, value, data);\n        return true;\n    }",
                    "start": "127",
                    "end": "133",
                    "class": "ERC1363",
                    "signature": "returns (bool) approveAndCalladdress spender, uint256 value, bytes memory data",
                    "full_signature": "function approveAndCall(address spender, uint256 value, bytes memory data) public virtual  returns (bool)",
                    "class_method_signature": "ERC1363.approveAndCalladdress spender, uint256 value, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Variant of {approveAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_maxSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _maxSupply() internal view virtual returns (uint256) {\n        return type(uint208).max;\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "ERC20Votes",
                    "signature": "returns (uint256) _maxSupply",
                    "full_signature": "function _maxSupply() internal virtual view returns (uint256)",
                    "class_method_signature": "ERC20Votes._maxSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Total supply cap has been exceeded, introducing a risk of votes overflowing.\n     */\n/**\n     * @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\n     *\n     * This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\n     * so that checkpoints can be stored in the Trace208 structure used by {Votes}. Increasing this value will not\n     * remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\n     * {Votes-_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\n     * additional logic requires it. When resolving override conflicts on this function, the minimum should be\n     * returned.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 value) internal virtual override {\n        super._update(from, to, value);\n        if (from == address(0)) {\n            uint256 supply = totalSupply();\n            uint256 cap = _maxSupply();\n            if (supply > cap) {\n                revert ERC20ExceededSafeSupply(supply, cap);\n            }\n        }\n        _transferVotingUnits(from, to, value);\n    }",
                    "start": "48",
                    "end": "58",
                    "class": "ERC20Votes",
                    "signature": " _updateaddress from, address to, uint256 value",
                    "full_signature": "function _update(address from, address to, uint256 value) internal virtual override ",
                    "class_method_signature": "ERC20Votes._updateaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getVotingUnits",
                    "parameters": "address account",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _getVotingUnits(address account) internal view virtual override returns (uint256) {\n        return balanceOf(account);\n    }",
                    "start": "66",
                    "end": "68",
                    "class": "ERC20Votes",
                    "signature": "returns (uint256) _getVotingUnitsaddress account",
                    "full_signature": "function _getVotingUnits(address account) internal virtual override returns (uint256)",
                    "class_method_signature": "ERC20Votes._getVotingUnitsaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the voting units of an `account`.\n     *\n     * WARNING: Overriding this function may compromise the internal vote accounting.\n     * `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "numCheckpoints",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function numCheckpoints(address account) public view virtual returns (uint32) {\n        return _numCheckpoints(account);\n    }",
                    "start": "73",
                    "end": "75",
                    "class": "ERC20Votes",
                    "signature": "returns (uint32) numCheckpointsaddress account",
                    "full_signature": "function numCheckpoints(address account) public virtual view returns (uint32)",
                    "class_method_signature": "ERC20Votes.numCheckpointsaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get number of checkpoints for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "checkpoints",
                    "parameters": "address account, uint32 pos",
                    "modifiers": "view",
                    "return": "returns (Checkpoints.Checkpoint208 memory)",
                    "body": "function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoints.Checkpoint208 memory) {\n        return _checkpoints(account, pos);\n    }",
                    "start": "80",
                    "end": "82",
                    "class": "ERC20Votes",
                    "signature": "returns (Checkpoints.Checkpoint208 memory) checkpointsaddress account, uint32 pos",
                    "full_signature": "function checkpoints(address account, uint32 pos) public virtual view returns (Checkpoints.Checkpoint208 memory)",
                    "class_method_signature": "ERC20Votes.checkpointsaddress account, uint32 pos",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Capped.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "cap",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function cap() public view virtual returns (uint256) {\n        return _cap;\n    }",
                    "start": "38",
                    "end": "40",
                    "class": "ERC20Capped",
                    "signature": "returns (uint256) cap",
                    "full_signature": "function cap() public virtual view returns (uint256)",
                    "class_method_signature": "ERC20Capped.cap",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Total supply cap has been exceeded.\n     */\n/**\n     * @dev The supplied cap is not a valid cap.\n     */\n/**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n/**\n     * @dev Returns the cap on the token's total supply.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 value) internal virtual override {\n        super._update(from, to, value);\n\n        if (from == address(0)) {\n            uint256 maxSupply = cap();\n            uint256 supply = totalSupply();\n            if (supply > maxSupply) {\n                revert ERC20ExceededCap(supply, maxSupply);\n            }\n        }\n    }",
                    "start": "45",
                    "end": "55",
                    "class": "ERC20Capped",
                    "signature": " _updateaddress from, address to, uint256 value",
                    "full_signature": "function _update(address from, address to, uint256 value) internal virtual override ",
                    "class_method_signature": "ERC20Capped._updateaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC20-_update}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "burn",
                    "parameters": "uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }",
                    "start": "20",
                    "end": "22",
                    "class": "ERC20Burnable",
                    "signature": " burnuint256 value",
                    "full_signature": "function burn(uint256 value) public virtual  ",
                    "class_method_signature": "ERC20Burnable.burnuint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "burnFrom",
                    "parameters": "address account, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }",
                    "start": "35",
                    "end": "38",
                    "class": "ERC20Burnable",
                    "signature": " burnFromaddress account, uint256 value",
                    "full_signature": "function burnFrom(address account, uint256 value) public virtual  ",
                    "class_method_signature": "ERC20Burnable.burnFromaddress account, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "permit",
                    "parameters": "address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "modifiers": "",
                    "return": "",
                    "body": "function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }",
                    "start": "44",
                    "end": "67",
                    "class": "ERC20Permit",
                    "signature": " permitaddress owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "full_signature": "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual  ",
                    "class_method_signature": "ERC20Permit.permitaddress owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Permit deadline has expired.\n     */\n/**\n     * @dev Mismatched signature.\n     */\n/**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\n     */\n/**\n     * @inheritdoc IERC20Permit\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "nonces",
                    "parameters": "address owner",
                    "modifiers": "override(IERC20Permit, Nonces)",
                    "return": "returns (uint256)",
                    "body": "function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }",
                    "start": "72",
                    "end": "74",
                    "class": "ERC20Permit",
                    "signature": "returns (uint256) noncesaddress owner",
                    "full_signature": "function nonces(address owner) public virtual override(IERC20Permit, Nonces) returns (uint256)",
                    "class_method_signature": "ERC20Permit.noncesaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IERC20Permit\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "DOMAIN_SEPARATOR",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }",
                    "start": "80",
                    "end": "82",
                    "class": "ERC20Permit",
                    "signature": "returns (bytes32) DOMAIN_SEPARATOR",
                    "full_signature": "function DOMAIN_SEPARATOR() external virtual view returns (bytes32)",
                    "class_method_signature": "ERC20Permit.DOMAIN_SEPARATOR",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IERC20Permit\n     */\n// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/vendor/compound/ICompoundTimelock.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_delegate",
                    "parameters": "address implementation",
                    "modifiers": "",
                    "return": "",
                    "body": "function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }",
                    "start": "22",
                    "end": "45",
                    "class": "Proxy",
                    "signature": " _delegateaddress implementation",
                    "full_signature": "function _delegate(address implementation) internal virtual  ",
                    "class_method_signature": "Proxy._delegateaddress implementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_implementation",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _implementation() internal view virtual returns (address);",
                    "start": "51",
                    "end": "51",
                    "class": "Proxy",
                    "signature": "returns (address) _implementation",
                    "full_signature": "function _implementation() internal virtual view returns (address)",
                    "class_method_signature": "Proxy._implementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n     * function and {_fallback} should delegate.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_fallback",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _fallback() internal virtual {\n        _delegate(_implementation());\n    }",
                    "start": "58",
                    "end": "60",
                    "class": "Proxy",
                    "signature": " _fallback",
                    "full_signature": "function _fallback() internal virtual  ",
                    "class_method_signature": "Proxy._fallback",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/proxy/Clones.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "proxiableUUID",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }",
                    "start": "72",
                    "end": "74",
                    "class": "UUPSUpgradeable",
                    "signature": "returns (bytes32) proxiableUUID",
                    "full_signature": "function proxiableUUID() external virtual view returns (bytes32)",
                    "class_method_signature": "UUPSUpgradeable.proxiableUUID",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n/**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n/**\n     * @dev The call is from an unauthorized context.\n     */\n/**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n/**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n/**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n/**\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "upgradeToAndCall",
                    "parameters": "address newImplementation, bytes memory data",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }",
                    "start": "86",
                    "end": "89",
                    "class": "UUPSUpgradeable",
                    "signature": " upgradeToAndCalladdress newImplementation, bytes memory data",
                    "full_signature": "function upgradeToAndCall(address newImplementation, bytes memory data) public virtual payable ",
                    "class_method_signature": "UUPSUpgradeable.upgradeToAndCalladdress newImplementation, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkProxy",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }",
                    "start": "96",
                    "end": "103",
                    "class": "UUPSUpgradeable",
                    "signature": " _checkProxy",
                    "full_signature": "function _checkProxy() internal virtual view ",
                    "class_method_signature": "UUPSUpgradeable._checkProxy",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_checkNotDelegated",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }",
                    "start": "109",
                    "end": "114",
                    "class": "UUPSUpgradeable",
                    "signature": " _checkNotDelegated",
                    "full_signature": "function _checkNotDelegated() internal virtual view ",
                    "class_method_signature": "UUPSUpgradeable._checkNotDelegated",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_authorizeUpgrade",
                    "parameters": "address newImplementation",
                    "modifiers": "",
                    "return": "",
                    "body": "function _authorizeUpgrade(address newImplementation) internal virtual;",
                    "start": "126",
                    "end": "126",
                    "class": "UUPSUpgradeable",
                    "signature": " _authorizeUpgradeaddress newImplementation",
                    "full_signature": "function _authorizeUpgrade(address newImplementation) internal virtual  ",
                    "class_method_signature": "UUPSUpgradeable._authorizeUpgradeaddress newImplementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_upgradeToAndCallUUPS",
                    "parameters": "address newImplementation, bytes memory data",
                    "modifiers": "",
                    "return": "",
                    "body": "function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }",
                    "start": "136",
                    "end": "146",
                    "class": "UUPSUpgradeable",
                    "signature": " _upgradeToAndCallUUPSaddress newImplementation, bytes memory data",
                    "full_signature": "function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private   ",
                    "class_method_signature": "UUPSUpgradeable._upgradeToAndCallUUPSaddress newImplementation, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC-1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_checkInitializing",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }",
                    "start": "178",
                    "end": "182",
                    "class": "Initializable",
                    "signature": " _checkInitializing",
                    "full_signature": "function _checkInitializing() internal virtual view ",
                    "class_method_signature": "Initializable._checkInitializing",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n// keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n/**\n     * @dev The contract is already initialized.\n     */\n/**\n     * @dev The contract is not initializing.\n     */\n/**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n/**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n/**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n/**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n/**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_disableInitializers",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }",
                    "start": "192",
                    "end": "203",
                    "class": "Initializable",
                    "signature": " _disableInitializers",
                    "full_signature": "function _disableInitializers() internal virtual  ",
                    "class_method_signature": "Initializable._disableInitializers",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getInitializedVersion",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint64)",
                    "body": "function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }",
                    "start": "208",
                    "end": "210",
                    "class": "Initializable",
                    "signature": "returns (uint64) _getInitializedVersion",
                    "full_signature": "function _getInitializedVersion() internal  view returns (uint64)",
                    "class_method_signature": "Initializable._getInitializedVersion",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_isInitializing",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }",
                    "start": "215",
                    "end": "217",
                    "class": "Initializable",
                    "signature": "returns (bool) _isInitializing",
                    "full_signature": "function _isInitializing() internal  view returns (bool)",
                    "class_method_signature": "Initializable._isInitializing",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getInitializableStorage",
                    "parameters": "",
                    "modifiers": "pure",
                    "return": "returns (InitializableStorage storage $)",
                    "body": "function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }",
                    "start": "223",
                    "end": "227",
                    "class": "Initializable",
                    "signature": "returns (InitializableStorage storage $) _getInitializableStorage",
                    "full_signature": "function _getInitializableStorage() private  pure returns (InitializableStorage storage $)",
                    "class_method_signature": "Initializable._getInitializableStorage",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns a pointer to the storage namespace.\n     */\n// solhint-disable-next-line var-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "implementation",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function implementation() public view virtual returns (address) {\n        return _implementation;\n    }",
                    "start": "38",
                    "end": "40",
                    "class": "UpgradeableBeacon",
                    "signature": "returns (address) implementation",
                    "full_signature": "function implementation() public virtual view returns (address)",
                    "class_method_signature": "UpgradeableBeacon.implementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The `implementation` of the beacon is invalid.\n     */\n/**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n/**\n     * @dev Sets the address of the initial implementation, and the initial owner who can upgrade the beacon.\n     */\n/**\n     * @dev Returns the current implementation address.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "upgradeTo",
                    "parameters": "address newImplementation",
                    "modifiers": "",
                    "return": "",
                    "body": "function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n    }",
                    "start": "52",
                    "end": "54",
                    "class": "UpgradeableBeacon",
                    "signature": " upgradeToaddress newImplementation",
                    "full_signature": "function upgradeTo(address newImplementation) public virtual  ",
                    "class_method_signature": "UpgradeableBeacon.upgradeToaddress newImplementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setImplementation",
                    "parameters": "address newImplementation",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert BeaconInvalidImplementation(newImplementation);\n        }\n        _implementation = newImplementation;\n        emit Upgraded(newImplementation);\n    }",
                    "start": "63",
                    "end": "69",
                    "class": "UpgradeableBeacon",
                    "signature": " _setImplementationaddress newImplementation",
                    "full_signature": "function _setImplementation(address newImplementation) private   ",
                    "class_method_signature": "UpgradeableBeacon._setImplementationaddress newImplementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_implementation",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }",
                    "start": "47",
                    "end": "49",
                    "class": "BeaconProxy",
                    "signature": "returns (address) _implementation",
                    "full_signature": "function _implementation() internal virtual override returns (address)",
                    "class_method_signature": "BeaconProxy._implementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\n/**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n/**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getBeacon",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _getBeacon() internal view virtual returns (address) {\n        return _beacon;\n    }",
                    "start": "54",
                    "end": "56",
                    "class": "BeaconProxy",
                    "signature": "returns (address) _getBeacon",
                    "full_signature": "function _getBeacon() internal virtual view returns (address)",
                    "class_method_signature": "BeaconProxy._getBeacon",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the beacon.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_implementation",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _implementation() internal view virtual override returns (address) {\n        return ERC1967Utils.getImplementation();\n    }",
                    "start": "37",
                    "end": "39",
                    "class": "ERC1967Proxy",
                    "signature": "returns (address) _implementation",
                    "full_signature": "function _implementation() internal virtual override returns (address)",
                    "class_method_signature": "ERC1967Proxy._implementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n/**\n     * @dev Returns the current implementation address.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_proxyAdmin",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _proxyAdmin() internal view virtual returns (address) {\n        return _admin;\n    }",
                    "start": "88",
                    "end": "90",
                    "class": "TransparentUpgradeableProxy",
                    "signature": "returns (address) _proxyAdmin",
                    "full_signature": "function _proxyAdmin() internal virtual view returns (address)",
                    "class_method_signature": "TransparentUpgradeableProxy._proxyAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// An immutable address for the admin to avoid unnecessary SLOADs before each call\n// at the expense of removing the ability to change the admin once it's set.\n// This is acceptable if the admin is always a ProxyAdmin instance or similar contract\n// with its own ability to transfer the permissions to another account.\n/**\n     * @dev The proxy caller is the current admin, and can't fallback to the proxy target.\n     */\n/**\n     * @dev Initializes an upgradeable proxy managed by an instance of a {ProxyAdmin} with an `initialOwner`,\n     * backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in\n     * {ERC1967Proxy-constructor}.\n     */\n/**\n     * @dev Returns the admin of this proxy.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_fallback",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _fallback() internal virtual override {\n        if (msg.sender == _proxyAdmin()) {\n            if (msg.sig != ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                revert ProxyDeniedAdminAccess();\n            } else {\n                _dispatchUpgradeToAndCall();\n            }\n        } else {\n            super._fallback();\n        }\n    }",
                    "start": "95",
                    "end": "105",
                    "class": "TransparentUpgradeableProxy",
                    "signature": " _fallback",
                    "full_signature": "function _fallback() internal virtual override ",
                    "class_method_signature": "TransparentUpgradeableProxy._fallback",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_dispatchUpgradeToAndCall",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _dispatchUpgradeToAndCall() private {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        ERC1967Utils.upgradeToAndCall(newImplementation, data);\n    }",
                    "start": "114",
                    "end": "117",
                    "class": "TransparentUpgradeableProxy",
                    "signature": " _dispatchUpgradeToAndCall",
                    "full_signature": "function _dispatchUpgradeToAndCall() private   ",
                    "class_method_signature": "TransparentUpgradeableProxy._dispatchUpgradeToAndCall",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Upgrade the implementation of the proxy. See {ERC1967Utils-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "upgradeAndCall",
                    "parameters": "ITransparentUpgradeableProxy proxy, address implementation, bytes memory data",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }",
                    "start": "38",
                    "end": "44",
                    "class": "ProxyAdmin",
                    "signature": " upgradeAndCallITransparentUpgradeableProxy proxy, address implementation, bytes memory data",
                    "full_signature": "function upgradeAndCall(ITransparentUpgradeableProxy proxy, address implementation, bytes memory data) public virtual payable ",
                    "class_method_signature": "ProxyAdmin.upgradeAndCallITransparentUpgradeableProxy proxy, address implementation, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgrade(address,address)`\n     * and `upgradeAndCall(address,address,bytes)` are present, and `upgrade` must be used if no function should be called,\n     * while `upgradeAndCall` will invoke the `receive` function if the third argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeAndCall(address,address,bytes)` is present, and the third argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n/**\n     * @dev Sets the initial owner who can perform upgrades.\n     */\n/**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation.\n     * See {TransparentUpgradeableProxy-_dispatchUpgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/MerkleTreeMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "setup",
                    "parameters": "uint8 _depth, bytes32 _zero",
                    "modifiers": "",
                    "return": "",
                    "body": "function setup(uint8 _depth, bytes32 _zero) public {\n        root = _tree.setup(_depth, _zero);\n    }",
                    "start": "18",
                    "end": "20",
                    "class": "MerkleTreeMock",
                    "signature": " setupuint8 _depth, bytes32 _zero",
                    "full_signature": "function setup(uint8 _depth, bytes32 _zero) public   ",
                    "class_method_signature": "MerkleTreeMock.setupuint8 _depth, bytes32 _zero",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// This mock only stored the latest root.\n// Production contract may want to store historical values.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "nextLeafIndex",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function nextLeafIndex() public view returns (uint256) {\n        return _tree._nextLeafIndex;\n    }",
                    "start": "33",
                    "end": "35",
                    "class": "MerkleTreeMock",
                    "signature": "returns (uint256) nextLeafIndex",
                    "full_signature": "function nextLeafIndex() public  view returns (uint256)",
                    "class_method_signature": "MerkleTreeMock.nextLeafIndex",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// internal state\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/PausableMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ERC1271WalletMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/RegressionImplementation.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ContextMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/MultipleInheritanceInitializableMocks.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "__SampleHuman_init",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleHuman_init() internal onlyInitializing {\n        __SampleHuman_init_unchained();\n    }",
                    "start": "29",
                    "end": "31",
                    "class": "SampleHuman",
                    "signature": " __SampleHuman_init",
                    "full_signature": "function __SampleHuman_init() internal   ",
                    "class_method_signature": "SampleHuman.__SampleHuman_init",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "__SampleHuman_init_unchained",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleHuman_init_unchained() internal onlyInitializing {\n        isHuman = true;\n    }",
                    "start": "34",
                    "end": "36",
                    "class": "SampleHuman",
                    "signature": " __SampleHuman_init_unchained",
                    "full_signature": "function __SampleHuman_init_unchained() internal   ",
                    "class_method_signature": "SampleHuman.__SampleHuman_init_unchained",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "__SampleMother_init",
                    "parameters": "uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleMother_init(uint256 value) internal onlyInitializing {\n        __SampleHuman_init();\n        __SampleMother_init_unchained(value);\n    }",
                    "start": "50",
                    "end": "53",
                    "class": "SampleMother",
                    "signature": " __SampleMother_inituint256 value",
                    "full_signature": "function __SampleMother_init(uint256 value) internal   ",
                    "class_method_signature": "SampleMother.__SampleMother_inituint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "__SampleMother_init_unchained",
                    "parameters": "uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleMother_init_unchained(uint256 value) internal onlyInitializing {\n        mother = value;\n    }",
                    "start": "56",
                    "end": "58",
                    "class": "SampleMother",
                    "signature": " __SampleMother_init_unchaineduint256 value",
                    "full_signature": "function __SampleMother_init_unchained(uint256 value) internal   ",
                    "class_method_signature": "SampleMother.__SampleMother_init_unchaineduint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "__SampleGramps_init",
                    "parameters": "string memory value",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleGramps_init(string memory value) internal onlyInitializing {\n        __SampleHuman_init();\n        __SampleGramps_init_unchained(value);\n    }",
                    "start": "72",
                    "end": "75",
                    "class": "SampleGramps",
                    "signature": " __SampleGramps_initstring memory value",
                    "full_signature": "function __SampleGramps_init(string memory value) internal   ",
                    "class_method_signature": "SampleGramps.__SampleGramps_initstring memory value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "__SampleGramps_init_unchained",
                    "parameters": "string memory value",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleGramps_init_unchained(string memory value) internal onlyInitializing {\n        gramps = value;\n    }",
                    "start": "78",
                    "end": "80",
                    "class": "SampleGramps",
                    "signature": " __SampleGramps_init_unchainedstring memory value",
                    "full_signature": "function __SampleGramps_init_unchained(string memory value) internal   ",
                    "class_method_signature": "SampleGramps.__SampleGramps_init_unchainedstring memory value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "__SampleFather_init",
                    "parameters": "string memory _gramps, uint256 _father",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleFather_init(string memory _gramps, uint256 _father) internal onlyInitializing {\n        __SampleGramps_init(_gramps);\n        __SampleFather_init_unchained(_father);\n    }",
                    "start": "94",
                    "end": "97",
                    "class": "SampleFather",
                    "signature": " __SampleFather_initstring memory _gramps, uint256 _father",
                    "full_signature": "function __SampleFather_init(string memory _gramps, uint256 _father) internal   ",
                    "class_method_signature": "SampleFather.__SampleFather_initstring memory _gramps, uint256 _father",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "__SampleFather_init_unchained",
                    "parameters": "uint256 _father",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleFather_init_unchained(uint256 _father) internal onlyInitializing {\n        father = _father;\n    }",
                    "start": "100",
                    "end": "102",
                    "class": "SampleFather",
                    "signature": " __SampleFather_init_unchaineduint256 _father",
                    "full_signature": "function __SampleFather_init_unchained(uint256 _father) internal   ",
                    "class_method_signature": "SampleFather.__SampleFather_init_unchaineduint256 _father",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "__SampleChild_init",
                    "parameters": "uint256 _mother, string memory _gramps, uint256 _father, uint256 _child",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleChild_init(\n        uint256 _mother,\n        string memory _gramps,\n        uint256 _father,\n        uint256 _child\n    ) internal onlyInitializing {\n        __SampleMother_init(_mother);\n        __SampleFather_init(_gramps, _father);\n        __SampleChild_init_unchained(_child);\n    }",
                    "start": "116",
                    "end": "125",
                    "class": "SampleChild",
                    "signature": " __SampleChild_inituint256 _mother, string memory _gramps, uint256 _father, uint256 _child",
                    "full_signature": "function __SampleChild_init(uint256 _mother, string memory _gramps, uint256 _father, uint256 _child) internal   ",
                    "class_method_signature": "SampleChild.__SampleChild_inituint256 _mother, string memory _gramps, uint256 _father, uint256 _child",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "__SampleChild_init_unchained",
                    "parameters": "uint256 _child",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleChild_init_unchained(uint256 _child) internal onlyInitializing {\n        child = _child;\n    }",
                    "start": "128",
                    "end": "130",
                    "class": "SampleChild",
                    "signature": " __SampleChild_init_unchaineduint256 _child",
                    "full_signature": "function __SampleChild_init_unchained(uint256 _child) internal   ",
                    "class_method_signature": "SampleChild.__SampleChild_init_unchaineduint256 _child",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ERC2771ContextMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_msgSender",
                    "parameters": "",
                    "modifiers": "override(Context, ERC2771Context)",
                    "return": "returns (address)",
                    "body": "function _msgSender() internal view override(Context, ERC2771Context) returns (address) {\n        return ERC2771Context._msgSender();\n    }",
                    "start": "17",
                    "end": "19",
                    "class": "ERC2771ContextMock",
                    "signature": "returns (address) _msgSender",
                    "full_signature": "function _msgSender() internal  override(Context, ERC2771Context) returns (address)",
                    "class_method_signature": "ERC2771ContextMock._msgSender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @custom:oz-upgrades-unsafe-allow constructor\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/SingleInheritanceInitializableMocks.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/CallReceiverMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/DummyImplementation.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "unsafeOverrideAdmin",
                    "parameters": "address newAdmin",
                    "modifiers": "",
                    "return": "",
                    "body": "function unsafeOverrideAdmin(address newAdmin) public {\n        StorageSlot.getAddressSlot(ERC1967Utils.ADMIN_SLOT).value = newAdmin;\n    }",
                    "start": "52",
                    "end": "54",
                    "class": "DummyImplementation",
                    "signature": " unsafeOverrideAdminaddress newAdmin",
                    "full_signature": "function unsafeOverrideAdmin(address newAdmin) public   ",
                    "class_method_signature": "DummyImplementation.unsafeOverrideAdminaddress newAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Use for forcing an unsafe TransparentUpgradeableProxy admin override\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/Base64Dirty.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ArraysMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/AccessManagedTarget.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/Stateless.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ERC3156FlashBorrowerMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "onFlashLoan",
                    "parameters": "address, address token, uint256 amount, uint256 fee, bytes calldata data",
                    "modifiers": "",
                    "return": "returns (bytes32)",
                    "body": "function onFlashLoan(\n        address /*initiator*/,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) public returns (bytes32) {\n        require(msg.sender == token);\n\n        emit BalanceOf(token, address(this), IERC20(token).balanceOf(address(this)));\n        emit TotalSupply(token, IERC20(token).totalSupply());\n\n        if (data.length > 0) {\n            // WARNING: This code is for testing purposes only! Do not use.\n            Address.functionCall(token, data);\n        }\n\n        if (_enableApprove) {\n            IERC20(token).approve(token, amount + fee);\n        }\n\n        return _enableReturn ? _RETURN_VALUE : bytes32(0);\n    }",
                    "start": "30",
                    "end": "52",
                    "class": "ERC3156FlashBorrowerMock",
                    "signature": "returns (bytes32) onFlashLoanaddress, address token, uint256 amount, uint256 fee, bytes calldata data",
                    "full_signature": "function onFlashLoan(address, address token, uint256 amount, uint256 fee, bytes calldata data) public   returns (bytes32)",
                    "class_method_signature": "ERC3156FlashBorrowerMock.onFlashLoanaddress, address token, uint256 amount, uint256 fee, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/*initiator*/'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/MerkleProofCustomHashMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ReentrancyTransientMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/AccessManagerMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/UpgradeableBeaconMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/EIP712Verifier.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/TransientSlotMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/StorageSlotMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/InitializableMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/VotesMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public view virtual override returns (string memory) {\n        return \"mode=timestamp\";\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "VotesTimestampMock",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "VotesTimestampMock.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/AuthorityMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address, address, bytes4",
                    "modifiers": "pure",
                    "return": "returns (bool)",
                    "body": "function canCall(address /* caller */, address /* target */, bytes4 /* selector */) external pure returns (bool) {\n        revert(\"AuthorityNoDelayMock: not implemented\");\n    }",
                    "start": "9",
                    "end": "11",
                    "class": "NotAuthorityMock",
                    "signature": "returns (bool) canCalladdress, address, bytes4",
                    "full_signature": "function canCall(address, address, bytes4) external  pure returns (bool)",
                    "class_method_signature": "NotAuthorityMock.canCalladdress, address, bytes4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/* selector */'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address, address, bytes4",
                    "modifiers": "view",
                    "return": "returns (bool immediate)",
                    "body": "function canCall(\n        address /* caller */,\n        address /* target */,\n        bytes4 /* selector */\n    ) external view returns (bool immediate) {\n        return _immediate;\n    }",
                    "start": "17",
                    "end": "23",
                    "class": "AuthorityNoDelayMock",
                    "signature": "returns (bool immediate) canCalladdress, address, bytes4",
                    "full_signature": "function canCall(address, address, bytes4) external  view returns (bool immediate)",
                    "class_method_signature": "AuthorityNoDelayMock.canCalladdress, address, bytes4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/* selector */'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address, address, bytes4",
                    "modifiers": "view",
                    "return": "returns (bool immediate, uint32 delay)",
                    "body": "function canCall(\n        address /* caller */,\n        address /* target */,\n        bytes4 /* selector */\n    ) external view returns (bool immediate, uint32 delay) {\n        return (_immediate, _delay);\n    }",
                    "start": "34",
                    "end": "40",
                    "class": "AuthorityDelayMock",
                    "signature": "returns (bool immediate, uint32 delay) canCalladdress, address, bytes4",
                    "full_signature": "function canCall(address, address, bytes4) external  view returns (bool immediate, uint32 delay)",
                    "class_method_signature": "AuthorityDelayMock.canCalladdress, address, bytes4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/* selector */'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address, address, bytes4",
                    "modifiers": "view",
                    "return": "",
                    "body": "function canCall(address /* caller */, address /* target */, bytes4 /* selector */) external view {}",
                    "start": "52",
                    "end": "52",
                    "class": "AuthorityNoResponse",
                    "signature": " canCalladdress, address, bytes4",
                    "full_signature": "function canCall(address, address, bytes4) external  view ",
                    "class_method_signature": "AuthorityNoResponse.canCalladdress, address, bytes4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/* selector */'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address, address, bytes4",
                    "modifiers": "pure",
                    "return": "returns (bool immediate, uint32 delay)",
                    "body": "function canCall(\n        address /* caller */,\n        address /* target */,\n        bytes4 /* selector */\n    ) external pure returns (bool immediate, uint32 delay) {\n        return (false, 1);\n    }",
                    "start": "58",
                    "end": "64",
                    "class": "AuthorityObserveIsConsuming",
                    "signature": "returns (bool immediate, uint32 delay) canCalladdress, address, bytes4",
                    "full_signature": "function canCall(address, address, bytes4) external  pure returns (bool immediate, uint32 delay)",
                    "class_method_signature": "AuthorityObserveIsConsuming.canCalladdress, address, bytes4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/* selector */'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ConstructorMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/BatchCaller.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/MulticallHelper.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/TimelockReentrant.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/EtherReceiverMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165MissingData.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165MaliciousData.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165NotSupported.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165ReturnBomb.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/ERC165/ERC165InterfacesSupported.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "SupportsInterfaceWithLookupMock",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public  override returns (bool)",
                    "class_method_signature": "SupportsInterfaceWithLookupMock.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n/**\n     * @dev A mapping of interface id to whether or not it's supported.\n     */\n/**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC-165 itself.\n     */\n/**\n     * @dev Implement supportsInterface(bytes4) using a lookup table.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_registerInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165InterfacesSupported: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }",
                    "start": "46",
                    "end": "49",
                    "class": "SupportsInterfaceWithLookupMock",
                    "signature": " _registerInterfacebytes4 interfaceId",
                    "full_signature": "function _registerInterface(bytes4 interfaceId) internal   ",
                    "class_method_signature": "SupportsInterfaceWithLookupMock._registerInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Private method for registering an interface.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/governance/GovernorMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/governance/GovernorStorageMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/governance/GovernorFractionalMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/governance/GovernorWithParamsMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/governance/GovernorVoteMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/governance/GovernorPreventLateQuorumMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/governance/GovernorTimelockCompoundMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/governance/GovernorTimelockAccessMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/governance/GovernorTimelockControlMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/ERC20WithAutoMinerReward.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "previewDeposit",
                    "parameters": "uint256 assets",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\n        uint256 fee = _feeOnTotal(assets, _entryFeeBasisPoints());\n        return super.previewDeposit(assets - fee);\n    }",
                    "start": "25",
                    "end": "28",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) previewDeposituint256 assets",
                    "full_signature": "function previewDeposit(uint256 assets) public virtual override returns (uint256)",
                    "class_method_signature": "ERC4626Fees.previewDeposituint256 assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// === Overrides ===\n/// @dev Preview taking an entry fee on deposit. See {IERC4626-previewDeposit}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewMint",
                    "parameters": "uint256 shares",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function previewMint(uint256 shares) public view virtual override returns (uint256) {\n        uint256 assets = super.previewMint(shares);\n        return assets + _feeOnRaw(assets, _entryFeeBasisPoints());\n    }",
                    "start": "31",
                    "end": "34",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) previewMintuint256 shares",
                    "full_signature": "function previewMint(uint256 shares) public virtual override returns (uint256)",
                    "class_method_signature": "ERC4626Fees.previewMintuint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Preview adding an entry fee on mint. See {IERC4626-previewMint}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewWithdraw",
                    "parameters": "uint256 assets",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\n        uint256 fee = _feeOnRaw(assets, _exitFeeBasisPoints());\n        return super.previewWithdraw(assets + fee);\n    }",
                    "start": "37",
                    "end": "40",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) previewWithdrawuint256 assets",
                    "full_signature": "function previewWithdraw(uint256 assets) public virtual override returns (uint256)",
                    "class_method_signature": "ERC4626Fees.previewWithdrawuint256 assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Preview adding an exit fee on withdraw. See {IERC4626-previewWithdraw}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewRedeem",
                    "parameters": "uint256 shares",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\n        uint256 assets = super.previewRedeem(shares);\n        return assets - _feeOnTotal(assets, _exitFeeBasisPoints());\n    }",
                    "start": "43",
                    "end": "46",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) previewRedeemuint256 shares",
                    "full_signature": "function previewRedeem(uint256 shares) public virtual override returns (uint256)",
                    "class_method_signature": "ERC4626Fees.previewRedeemuint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Preview taking an exit fee on redeem. See {IERC4626-previewRedeem}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_deposit",
                    "parameters": "address caller, address receiver, uint256 assets, uint256 shares",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual override {\n        uint256 fee = _feeOnTotal(assets, _entryFeeBasisPoints());\n        address recipient = _entryFeeRecipient();\n\n        super._deposit(caller, receiver, assets, shares);\n\n        if (fee > 0 && recipient != address(this)) {\n            SafeERC20.safeTransfer(IERC20(asset()), recipient, fee);\n        }\n    }",
                    "start": "49",
                    "end": "58",
                    "class": "ERC4626Fees",
                    "signature": " _depositaddress caller, address receiver, uint256 assets, uint256 shares",
                    "full_signature": "function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual override ",
                    "class_method_signature": "ERC4626Fees._depositaddress caller, address receiver, uint256 assets, uint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Send entry fee to {_entryFeeRecipient}. See {IERC4626-_deposit}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_withdraw",
                    "parameters": "address caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual override {\n        uint256 fee = _feeOnRaw(assets, _exitFeeBasisPoints());\n        address recipient = _exitFeeRecipient();\n\n        super._withdraw(caller, receiver, owner, assets, shares);\n\n        if (fee > 0 && recipient != address(this)) {\n            SafeERC20.safeTransfer(IERC20(asset()), recipient, fee);\n        }\n    }",
                    "start": "61",
                    "end": "76",
                    "class": "ERC4626Fees",
                    "signature": " _withdrawaddress caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "full_signature": "function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares) internal virtual override ",
                    "class_method_signature": "ERC4626Fees._withdrawaddress caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Send exit fee to {_exitFeeRecipient}. See {IERC4626-_deposit}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_entryFeeBasisPoints",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _entryFeeBasisPoints() internal view virtual returns (uint256) {\n        return 0; // replace with e.g. 100 for 1%\n    }",
                    "start": "80",
                    "end": "82",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) _entryFeeBasisPoints",
                    "full_signature": "function _entryFeeBasisPoints() internal virtual view returns (uint256)",
                    "class_method_signature": "ERC4626Fees._entryFeeBasisPoints",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// === Fee configuration ===\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_feeOnRaw",
                    "parameters": "uint256 assets, uint256 feeBasisPoints",
                    "modifiers": "pure",
                    "return": "returns (uint256)",
                    "body": "function _feeOnRaw(uint256 assets, uint256 feeBasisPoints) private pure returns (uint256) {\n        return assets.mulDiv(feeBasisPoints, _BASIS_POINT_SCALE, Math.Rounding.Ceil);\n    }",
                    "start": "100",
                    "end": "102",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) _feeOnRawuint256 assets, uint256 feeBasisPoints",
                    "full_signature": "function _feeOnRaw(uint256 assets, uint256 feeBasisPoints) private  pure returns (uint256)",
                    "class_method_signature": "ERC4626Fees._feeOnRawuint256 assets, uint256 feeBasisPoints",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// === Fee operations ===\n/// @dev Calculates the fees that should be added to an amount `assets` that does not already include fees.\n/// Used in {IERC4626-mint} and {IERC4626-withdraw} operations.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_feeOnTotal",
                    "parameters": "uint256 assets, uint256 feeBasisPoints",
                    "modifiers": "pure",
                    "return": "returns (uint256)",
                    "body": "function _feeOnTotal(uint256 assets, uint256 feeBasisPoints) private pure returns (uint256) {\n        return assets.mulDiv(feeBasisPoints, feeBasisPoints + _BASIS_POINT_SCALE, Math.Rounding.Ceil);\n    }",
                    "start": "106",
                    "end": "108",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) _feeOnTotaluint256 assets, uint256 feeBasisPoints",
                    "full_signature": "function _feeOnTotal(uint256 assets, uint256 feeBasisPoints) private  pure returns (uint256)",
                    "class_method_signature": "ERC4626Fees._feeOnTotaluint256 assets, uint256 feeBasisPoints",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Calculates the fee part of an amount `assets` that already includes fees.\n/// Used in {IERC4626-deposit} and {IERC4626-redeem} operations.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/MyNFT.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessControlERC20MintMissing.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessManagedERC20MintBase.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "mint",
                    "parameters": "address to, uint256 amount",
                    "modifiers": "",
                    "return": "",
                    "body": "function mint(address to, uint256 amount) public restricted {\n        _mint(to, amount);\n    }",
                    "start": "13",
                    "end": "15",
                    "class": "AccessManagedERC20Mint",
                    "signature": " mintaddress to, uint256 amount",
                    "full_signature": "function mint(address to, uint256 amount) public   ",
                    "class_method_signature": "AccessManagedERC20Mint.mintaddress to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Minting is restricted according to the manager rules for this function.\n// The function is identified by its selector: 0x40c10f19.\n// Calculated with bytes4(keccak256('mint(address,uint256)'))\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/access-control/MyContractOwnable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessControlUnrevokableAdmin.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessControlERC20MintBase.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "mint",
                    "parameters": "address to, uint256 amount",
                    "modifiers": "",
                    "return": "",
                    "body": "function mint(address to, uint256 amount) public {\n        // Check that the calling account has the minter role\n        if (!hasRole(MINTER_ROLE, msg.sender)) {\n            revert CallerNotMinter(msg.sender);\n        }\n        _mint(to, amount);\n    }",
                    "start": "18",
                    "end": "24",
                    "class": "AccessControlERC20MintBase",
                    "signature": " mintaddress to, uint256 amount",
                    "full_signature": "function mint(address to, uint256 amount) public   ",
                    "class_method_signature": "AccessControlERC20MintBase.mintaddress to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Create a new role identifier for the minter role\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessControlERC20MintOnlyRole.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessControlModified.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "revokeRole",
                    "parameters": "bytes32, address",
                    "modifiers": "override",
                    "return": "",
                    "body": "function revokeRole(bytes32, address) public pure override {\n        revert AccessControlNonRevokable();\n    }",
                    "start": "11",
                    "end": "13",
                    "class": "AccessControlModified",
                    "signature": " revokeRolebytes32, address",
                    "full_signature": "function revokeRole(bytes32, address) public  override ",
                    "class_method_signature": "AccessControlModified.revokeRolebytes32, address",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Override the revokeRole function\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/governance/MyToken.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 amount",
                    "modifiers": "override(ERC20, ERC20Votes)",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._update(from, to, amount);\n    }",
                    "start": "14",
                    "end": "16",
                    "class": "MyToken",
                    "signature": " _updateaddress from, address to, uint256 amount",
                    "full_signature": "function _update(address from, address to, uint256 amount) internal  override(ERC20, ERC20Votes) ",
                    "class_method_signature": "MyToken._updateaddress from, address to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// The functions below are overrides required by Solidity.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/governance/MyGovernor.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "state",
                    "parameters": "uint256 proposalId",
                    "modifiers": "override(Governor, GovernorTimelockControl)",
                    "return": "returns (ProposalState)",
                    "body": "function state(uint256 proposalId) public view override(Governor, GovernorTimelockControl) returns (ProposalState) {\n        return super.state(proposalId);\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "MyGovernor",
                    "signature": "returns (ProposalState) stateuint256 proposalId",
                    "full_signature": "function state(uint256 proposalId) public  override(Governor, GovernorTimelockControl) returns (ProposalState)",
                    "class_method_signature": "MyGovernor.stateuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// The functions below are overrides required by Solidity.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/governance/MyTokenWrapped.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "decimals",
                    "parameters": "",
                    "modifiers": "override(ERC20, ERC20Wrapper)",
                    "return": "returns (uint8)",
                    "body": "function decimals() public view override(ERC20, ERC20Wrapper) returns (uint8) {\n        return super.decimals();\n    }",
                    "start": "17",
                    "end": "19",
                    "class": "MyTokenWrapped",
                    "signature": "returns (uint8) decimals",
                    "full_signature": "function decimals() public  override(ERC20, ERC20Wrapper) returns (uint8)",
                    "class_method_signature": "MyTokenWrapped.decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// The functions below are overrides required by Solidity.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/governance/MyTokenTimestampBased.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "clock",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint48)",
                    "body": "function clock() public view override returns (uint48) {\n        return uint48(block.timestamp);\n    }",
                    "start": "14",
                    "end": "16",
                    "class": "MyTokenTimestampBased",
                    "signature": "returns (uint48) clock",
                    "full_signature": "function clock() public  override returns (uint48)",
                    "class_method_signature": "MyTokenTimestampBased.clock",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Overrides IERC6372 functions to make the token & governor timestamp-based\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public pure override returns (string memory) {\n        return \"mode=timestamp\";\n    }",
                    "start": "19",
                    "end": "21",
                    "class": "MyTokenTimestampBased",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public  override returns (string memory)",
                    "class_method_signature": "MyTokenTimestampBased.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 amount",
                    "modifiers": "override(ERC20, ERC20Votes)",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._update(from, to, amount);\n    }",
                    "start": "25",
                    "end": "27",
                    "class": "MyTokenTimestampBased",
                    "signature": " _updateaddress from, address to, uint256 amount",
                    "full_signature": "function _update(address from, address to, uint256 amount) internal  override(ERC20, ERC20Votes) ",
                    "class_method_signature": "MyTokenTimestampBased._updateaddress from, address to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// The functions below are overrides required by Solidity.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/token/ERC1155/MyERC115HolderContract.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/token/ERC1155/GameItems.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/token/ERC721/GameItem.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/token/ERC20/GLDToken.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/utilities/Multicall.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/docs/utilities/Base64NFT.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "tokenURI",
                    "parameters": "uint256 tokenId",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function tokenURI(uint256 tokenId) public pure override returns (string memory) {\n        // Equivalent to:\n        // {\n        //   \"name\": \"Base64NFT #1\",\n        //   // Replace with extra ERC-721 Metadata properties\n        // }\n        // prettier-ignore\n        string memory dataURI = string.concat(\"{\\\"name\\\": \\\"Base64NFT #\", tokenId.toString(), \"\\\"}\");\n\n        return string.concat(\"data:application/json;base64,\", Base64.encode(bytes(dataURI)));\n    }",
                    "start": "16",
                    "end": "26",
                    "class": "Base64NFT",
                    "signature": "returns (string memory) tokenURIuint256 tokenId",
                    "full_signature": "function tokenURI(uint256 tokenId) public  override returns (string memory)",
                    "class_method_signature": "Base64NFT.tokenURIuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// ...\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20ReturnFalseMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC1363ReceiverMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC4626LimitsMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20Reentrant.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20DecimalsMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20ApprovalMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20MulticallMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20ExcessDecimalsMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC1155ReceiverMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20VotesTimestampMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public view virtual override returns (string memory) {\n        return \"mode=timestamp\";\n    }",
                    "start": "15",
                    "end": "17",
                    "class": "ERC20VotesTimestampMock",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "ERC20VotesTimestampMock.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public view virtual override returns (string memory) {\n        return \"mode=timestamp\";\n    }",
                    "start": "26",
                    "end": "28",
                    "class": "ERC721VotesTimestampMock",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "ERC721VotesTimestampMock.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20NoReturnMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20GetterHelper.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC721URIStorageMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC1363ReturnFalseMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC4626OffsetMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC1363NoReturnMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC4626Mock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC4646FeesMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC721ConsecutiveEnumerableMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20ForceApproveMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20VotesLegacyMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "checkpoints",
                    "parameters": "address account, uint32 pos",
                    "modifiers": "view",
                    "return": "returns (Checkpoint memory)",
                    "body": "function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }",
                    "start": "30",
                    "end": "32",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (Checkpoint memory) checkpointsaddress account, uint32 pos",
                    "full_signature": "function checkpoints(address account, uint32 pos) public virtual view returns (Checkpoint memory)",
                    "class_method_signature": "ERC20VotesLegacyMock.checkpointsaddress account, uint32 pos",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "numCheckpoints",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCast.toUint32(_checkpoints[account].length);\n    }",
                    "start": "37",
                    "end": "39",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint32) numCheckpointsaddress account",
                    "full_signature": "function numCheckpoints(address account) public virtual view returns (uint32)",
                    "class_method_signature": "ERC20VotesLegacyMock.numCheckpointsaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get number of checkpoints for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "delegates",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function delegates(address account) public view virtual returns (address) {\n        return _delegatee[account];\n    }",
                    "start": "44",
                    "end": "46",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (address) delegatesaddress account",
                    "full_signature": "function delegates(address account) public virtual view returns (address)",
                    "class_method_signature": "ERC20VotesLegacyMock.delegatesaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the address `account` is currently delegating to.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getVotes",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getVotes(address account) public view virtual returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        unchecked {\n            return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n        }\n    }",
                    "start": "51",
                    "end": "56",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint256) getVotesaddress account",
                    "full_signature": "function getVotes(address account) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20VotesLegacyMock.getVotesaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Gets the current votes balance for `account`\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getPastVotes",
                    "parameters": "address account, uint256 blockNumber",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getPastVotes(address account, uint256 blockNumber) public view virtual returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\n    }",
                    "start": "65",
                    "end": "68",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint256) getPastVotesaddress account, uint256 blockNumber",
                    "full_signature": "function getPastVotes(address account, uint256 blockNumber) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20VotesLegacyMock.getPastVotesaddress account, uint256 blockNumber",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getPastTotalSupply",
                    "parameters": "uint256 blockNumber",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getPastTotalSupply(uint256 blockNumber) public view virtual returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\n    }",
                    "start": "78",
                    "end": "81",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint256) getPastTotalSupplyuint256 blockNumber",
                    "full_signature": "function getPastTotalSupply(uint256 blockNumber) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20VotesLegacyMock.getPastTotalSupplyuint256 blockNumber",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\n     * It is NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkpointsLookup",
                    "parameters": "Checkpoint[] storage ckpts, uint256 blockNumber",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\n        //\n        // Initially we check if the block is recent to narrow the search range.\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the\n        // invariant.\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\n        // the same.\n        uint256 length = ckpts.length;\n\n        uint256 low = 0;\n        uint256 high = length;\n\n        if (length > 5) {\n            uint256 mid = length - Math.sqrt(length);\n            if (_unsafeAccess(ckpts, mid).fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(ckpts, mid).fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        unchecked {\n            return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\n        }\n    }",
                    "start": "86",
                    "end": "126",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint256) _checkpointsLookupCheckpoint[] storage ckpts, uint256 blockNumber",
                    "full_signature": "function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private  view returns (uint256)",
                    "class_method_signature": "ERC20VotesLegacyMock._checkpointsLookupCheckpoint[] storage ckpts, uint256 blockNumber",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "delegate",
                    "parameters": "address delegatee",
                    "modifiers": "",
                    "return": "",
                    "body": "function delegate(address delegatee) public virtual {\n        _delegate(_msgSender(), delegatee);\n    }",
                    "start": "131",
                    "end": "133",
                    "class": "ERC20VotesLegacyMock",
                    "signature": " delegateaddress delegatee",
                    "full_signature": "function delegate(address delegatee) public virtual  ",
                    "class_method_signature": "ERC20VotesLegacyMock.delegateaddress delegatee",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "delegateBySig",
                    "parameters": "address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "modifiers": "",
                    "return": "",
                    "body": "function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        _delegate(signer, delegatee);\n    }",
                    "start": "138",
                    "end": "155",
                    "class": "ERC20VotesLegacyMock",
                    "signature": " delegateBySigaddress delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "full_signature": "function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) public virtual  ",
                    "class_method_signature": "ERC20VotesLegacyMock.delegateBySigaddress delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_maxSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint224)",
                    "body": "function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }",
                    "start": "160",
                    "end": "162",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint224) _maxSupply",
                    "full_signature": "function _maxSupply() internal virtual view returns (uint224)",
                    "class_method_signature": "ERC20VotesLegacyMock._maxSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 amount",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 amount) internal virtual override {\n        super._update(from, to, amount);\n\n        if (from == address(0)) {\n            require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n            _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n        }\n\n        if (to == address(0)) {\n            _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n        }\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }",
                    "start": "169",
                    "end": "182",
                    "class": "ERC20VotesLegacyMock",
                    "signature": " _updateaddress from, address to, uint256 amount",
                    "full_signature": "function _update(address from, address to, uint256 amount) internal virtual override ",
                    "class_method_signature": "ERC20VotesLegacyMock._updateaddress from, address to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_delegate",
                    "parameters": "address delegator, address delegatee",
                    "modifiers": "",
                    "return": "",
                    "body": "function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegatee[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }",
                    "start": "189",
                    "end": "197",
                    "class": "ERC20VotesLegacyMock",
                    "signature": " _delegateaddress delegator, address delegatee",
                    "full_signature": "function _delegate(address delegator, address delegatee) internal virtual  ",
                    "class_method_signature": "ERC20VotesLegacyMock._delegateaddress delegator, address delegatee",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_unsafeAccess",
                    "parameters": "Checkpoint[] storage ckpts, uint256 pos",
                    "modifiers": "pure",
                    "return": "returns (Checkpoint storage result)",
                    "body": "function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\n        assembly {\n            mstore(0, ckpts.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }",
                    "start": "247",
                    "end": "252",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (Checkpoint storage result) _unsafeAccessCheckpoint[] storage ckpts, uint256 pos",
                    "full_signature": "function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private  pure returns (Checkpoint storage result)",
                    "class_method_signature": "ERC20VotesLegacyMock._unsafeAccessCheckpoint[] storage ckpts, uint256 pos",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC20FlashMintMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC1363ForceApproveMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC1363SpenderMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC721ConsecutiveMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/token/ERC721ReceiverMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/proxy/UUPSUpgradeableMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_authorizeUpgrade",
                    "parameters": "address",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _authorizeUpgrade(address) internal override {}",
                    "start": "22",
                    "end": "22",
                    "class": "UUPSUpgradeableMock",
                    "signature": " _authorizeUpgradeaddress",
                    "full_signature": "function _authorizeUpgrade(address) internal  override ",
                    "class_method_signature": "UUPSUpgradeableMock._authorizeUpgradeaddress",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Not having any checks in this function is dangerous! Do not do this outside tests!\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/proxy/ClashingImplementation.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/mocks/proxy/BadBeacon.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "pendingOwner",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }",
                    "start": "33",
                    "end": "35",
                    "class": "Ownable2Step",
                    "signature": "returns (address) pendingOwner",
                    "full_signature": "function pendingOwner() public virtual view returns (address)",
                    "class_method_signature": "Ownable2Step.pendingOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the address of the pending owner.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferOwnership",
                    "parameters": "address newOwner",
                    "modifiers": "override",
                    "return": "",
                    "body": "function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }",
                    "start": "43",
                    "end": "46",
                    "class": "Ownable2Step",
                    "signature": " transferOwnershipaddress newOwner",
                    "full_signature": "function transferOwnership(address newOwner) public virtual override ",
                    "class_method_signature": "Ownable2Step.transferOwnershipaddress newOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     *\n     * Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_transferOwnership",
                    "parameters": "address newOwner",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }",
                    "start": "52",
                    "end": "55",
                    "class": "Ownable2Step",
                    "signature": " _transferOwnershipaddress newOwner",
                    "full_signature": "function _transferOwnership(address newOwner) internal virtual override ",
                    "class_method_signature": "Ownable2Step._transferOwnershipaddress newOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "acceptOwnership",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }",
                    "start": "60",
                    "end": "66",
                    "class": "Ownable2Step",
                    "signature": " acceptOwnership",
                    "full_signature": "function acceptOwnership() public virtual  ",
                    "class_method_signature": "Ownable2Step.acceptOwnership",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The new owner accepts the ownership transfer.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/AccessControl.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "71",
                    "end": "73",
                    "class": "AccessControl",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override returns (bool)",
                    "class_method_signature": "AccessControl.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "hasRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }",
                    "start": "78",
                    "end": "80",
                    "class": "AccessControl",
                    "signature": "returns (bool) hasRolebytes32 role, address account",
                    "full_signature": "function hasRole(bytes32 role, address account) public virtual view returns (bool)",
                    "class_method_signature": "AccessControl.hasRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkRole",
                    "parameters": "bytes32 role",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }",
                    "start": "86",
                    "end": "88",
                    "class": "AccessControl",
                    "signature": " _checkRolebytes32 role",
                    "full_signature": "function _checkRole(bytes32 role) internal virtual view ",
                    "class_method_signature": "AccessControl._checkRolebytes32 role",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_checkRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }",
                    "start": "94",
                    "end": "98",
                    "class": "AccessControl",
                    "signature": " _checkRolebytes32 role, address account",
                    "full_signature": "function _checkRole(bytes32 role, address account) internal virtual view ",
                    "class_method_signature": "AccessControl._checkRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "getRoleAdmin",
                    "parameters": "bytes32 role",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }",
                    "start": "106",
                    "end": "108",
                    "class": "AccessControl",
                    "signature": "returns (bytes32) getRoleAdminbytes32 role",
                    "full_signature": "function getRoleAdmin(bytes32 role) public virtual view returns (bytes32)",
                    "class_method_signature": "AccessControl.getRoleAdminbytes32 role",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "grantRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "",
                    "return": "",
                    "body": "function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }",
                    "start": "122",
                    "end": "124",
                    "class": "AccessControl",
                    "signature": " grantRolebytes32 role, address account",
                    "full_signature": "function grantRole(bytes32 role, address account) public virtual  ",
                    "class_method_signature": "AccessControl.grantRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "revokeRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "",
                    "return": "",
                    "body": "function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }",
                    "start": "137",
                    "end": "139",
                    "class": "AccessControl",
                    "signature": " revokeRolebytes32 role, address account",
                    "full_signature": "function revokeRole(bytes32 role, address account) public virtual  ",
                    "class_method_signature": "AccessControl.revokeRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "renounceRole",
                    "parameters": "bytes32 role, address callerConfirmation",
                    "modifiers": "",
                    "return": "",
                    "body": "function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }",
                    "start": "157",
                    "end": "163",
                    "class": "AccessControl",
                    "signature": " renounceRolebytes32 role, address callerConfirmation",
                    "full_signature": "function renounceRole(bytes32 role, address callerConfirmation) public virtual  ",
                    "class_method_signature": "AccessControl.renounceRolebytes32 role, address callerConfirmation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setRoleAdmin",
                    "parameters": "bytes32 role, bytes32 adminRole",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }",
                    "start": "170",
                    "end": "174",
                    "class": "AccessControl",
                    "signature": " _setRoleAdminbytes32 role, bytes32 adminRole",
                    "full_signature": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual  ",
                    "class_method_signature": "AccessControl._setRoleAdminbytes32 role, bytes32 adminRole",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_grantRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }",
                    "start": "183",
                    "end": "191",
                    "class": "AccessControl",
                    "signature": "returns (bool) _grantRolebytes32 role, address account",
                    "full_signature": "function _grantRole(bytes32 role, address account) internal virtual  returns (bool)",
                    "class_method_signature": "AccessControl._grantRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_revokeRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }",
                    "start": "200",
                    "end": "208",
                    "class": "AccessControl",
                    "signature": "returns (bool) _revokeRolebytes32 role, address account",
                    "full_signature": "function _revokeRole(bytes32 role, address account) internal virtual  returns (bool)",
                    "class_method_signature": "AccessControl._revokeRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/Ownable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "owner",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function owner() public view virtual returns (address) {\n        return _owner;\n    }",
                    "start": "56",
                    "end": "58",
                    "class": "Ownable",
                    "signature": "returns (address) owner",
                    "full_signature": "function owner() public virtual view returns (address)",
                    "class_method_signature": "Ownable.owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n/**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n/**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n/**\n     * @dev Throws if called by any account other than the owner.\n     */\n/**\n     * @dev Returns the address of the current owner.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkOwner",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }",
                    "start": "63",
                    "end": "67",
                    "class": "Ownable",
                    "signature": " _checkOwner",
                    "full_signature": "function _checkOwner() internal virtual view ",
                    "class_method_signature": "Ownable._checkOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Throws if the sender is not the owner.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "renounceOwnership",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }",
                    "start": "76",
                    "end": "78",
                    "class": "Ownable",
                    "signature": " renounceOwnership",
                    "full_signature": "function renounceOwnership() public virtual  ",
                    "class_method_signature": "Ownable.renounceOwnership",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferOwnership",
                    "parameters": "address newOwner",
                    "modifiers": "",
                    "return": "",
                    "body": "function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }",
                    "start": "84",
                    "end": "89",
                    "class": "Ownable",
                    "signature": " transferOwnershipaddress newOwner",
                    "full_signature": "function transferOwnership(address newOwner) public virtual  ",
                    "class_method_signature": "Ownable.transferOwnershipaddress newOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_transferOwnership",
                    "parameters": "address newOwner",
                    "modifiers": "",
                    "return": "",
                    "body": "function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }",
                    "start": "95",
                    "end": "99",
                    "class": "Ownable",
                    "signature": " _transferOwnershipaddress newOwner",
                    "full_signature": "function _transferOwnership(address newOwner) internal virtual  ",
                    "class_method_signature": "Ownable._transferOwnershipaddress newOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/manager/AuthorityUtils.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/manager/IAuthority.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/manager/IAccessManager.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/manager/AccessManaged.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "authority",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function authority() public view virtual returns (address) {\n        return _authority;\n    }",
                    "start": "62",
                    "end": "64",
                    "class": "AccessManaged",
                    "signature": "returns (address) authority",
                    "full_signature": "function authority() public virtual view returns (address)",
                    "class_method_signature": "AccessManaged.authority",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Initializes the contract connected to an initial authority.\n     */\n/**\n     * @dev Restricts access to a function as defined by the connected Authority for this contract and the\n     * caller and selector of the function that entered the contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * In general, this modifier should only be used on `external` functions. It is okay to use it on `public`\n     * functions that are used as external entry points and are not called internally. Unless you know what you're\n     * doing, it should never be used on `internal` functions. Failure to follow these rules can have critical security\n     * implications! This is because the permissions are determined by the function that entered the contract, i.e. the\n     * function at the bottom of the call stack, and not the function where the modifier is visible in the source code.\n     * ====\n     *\n     * [WARNING]\n     * ====\n     * Avoid adding this modifier to the https://docs.soliditylang.org/en/v0.8.20/contracts.html#receive-ether-function[`receive()`]\n     * function or the https://docs.soliditylang.org/en/v0.8.20/contracts.html#fallback-function[`fallback()`]. These\n     * functions are the only execution paths where a function selector cannot be unambiguously determined from the calldata\n     * since the selector defaults to `0x00000000` in the `receive()` function and similarly in the `fallback()` function\n     * if no calldata is provided. (See {_checkCanCall}).\n     *\n     * The `receive()` function will always panic whereas the `fallback()` may panic depending on the calldata length.\n     * ====\n     */\n/// @inheritdoc IAccessManaged\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setAuthority",
                    "parameters": "address newAuthority",
                    "modifiers": "",
                    "return": "",
                    "body": "function setAuthority(address newAuthority) public virtual {\n        address caller = _msgSender();\n        if (caller != authority()) {\n            revert AccessManagedUnauthorized(caller);\n        }\n        if (newAuthority.code.length == 0) {\n            revert AccessManagedInvalidAuthority(newAuthority);\n        }\n        _setAuthority(newAuthority);\n    }",
                    "start": "67",
                    "end": "76",
                    "class": "AccessManaged",
                    "signature": " setAuthorityaddress newAuthority",
                    "full_signature": "function setAuthority(address newAuthority) public virtual  ",
                    "class_method_signature": "AccessManaged.setAuthorityaddress newAuthority",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManaged\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isConsumingScheduledOp",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bytes4)",
                    "body": "function isConsumingScheduledOp() public view returns (bytes4) {\n        return _consumingSchedule ? this.isConsumingScheduledOp.selector : bytes4(0);\n    }",
                    "start": "79",
                    "end": "81",
                    "class": "AccessManaged",
                    "signature": "returns (bytes4) isConsumingScheduledOp",
                    "full_signature": "function isConsumingScheduledOp() public  view returns (bytes4)",
                    "class_method_signature": "AccessManaged.isConsumingScheduledOp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManaged\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setAuthority",
                    "parameters": "address newAuthority",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setAuthority(address newAuthority) internal virtual {\n        _authority = newAuthority;\n        emit AuthorityUpdated(newAuthority);\n    }",
                    "start": "87",
                    "end": "90",
                    "class": "AccessManaged",
                    "signature": " _setAuthorityaddress newAuthority",
                    "full_signature": "function _setAuthority(address newAuthority) internal virtual  ",
                    "class_method_signature": "AccessManaged._setAuthorityaddress newAuthority",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers control to a new authority. Internal function with no access restriction. Allows bypassing the\n     * permissions set by the current authority.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_checkCanCall",
                    "parameters": "address caller, bytes calldata data",
                    "modifiers": "",
                    "return": "",
                    "body": "function _checkCanCall(address caller, bytes calldata data) internal virtual {\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\n            authority(),\n            caller,\n            address(this),\n            bytes4(data[0:4])\n        );\n        if (!immediate) {\n            if (delay > 0) {\n                _consumingSchedule = true;\n                IAccessManager(authority()).consumeScheduledOp(caller, data);\n                _consumingSchedule = false;\n            } else {\n                revert AccessManagedUnauthorized(caller);\n            }\n        }\n    }",
                    "start": "96",
                    "end": "112",
                    "class": "AccessManaged",
                    "signature": " _checkCanCalladdress caller, bytes calldata data",
                    "full_signature": "function _checkCanCall(address caller, bytes calldata data) internal virtual  ",
                    "class_method_signature": "AccessManaged._checkCanCalladdress caller, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts if the caller is not allowed to call the function identified by a selector. Panics if the calldata\n     * is less than 4 bytes long.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/manager/IAccessManaged.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/manager/AccessManager.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address caller, address target, bytes4 selector",
                    "modifiers": "view",
                    "return": "returns (bool immediate, uint32 delay)",
                    "body": "function canCall(\n        address caller,\n        address target,\n        bytes4 selector\n    ) public view virtual returns (bool immediate, uint32 delay) {\n        if (isTargetClosed(target)) {\n            return (false, 0);\n        } else if (caller == address(this)) {\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\n            // permissions. We verify that the call \"identifier\", which is set during {execute}, is correct.\n            return (_isExecuting(target, selector), 0);\n        } else {\n            uint64 roleId = getTargetFunctionRole(target, selector);\n            (bool isMember, uint32 currentDelay) = hasRole(roleId, caller);\n            return isMember ? (currentDelay == 0, currentDelay) : (false, 0);\n        }\n    }",
                    "start": "139",
                    "end": "155",
                    "class": "AccessManager",
                    "signature": "returns (bool immediate, uint32 delay) canCalladdress caller, address target, bytes4 selector",
                    "full_signature": "function canCall(address caller, address target, bytes4 selector) public virtual view returns (bool immediate, uint32 delay)",
                    "class_method_signature": "AccessManager.canCalladdress caller, address target, bytes4 selector",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Structure that stores the details for a target contract.\n// Structure that stores the details for a role/account pair. This structures fit into a single slot.\n// Structure that stores the details of a role.\n// Structure that stores the details for a scheduled operation. This structure fits into a single slot.\n/**\n     * @dev The identifier of the admin role. Required to perform most configuration operations including\n     * other roles' management and target restrictions.\n     */\n// 0\n/**\n     * @dev The identifier of the public role. Automatically granted to all addresses with no delay.\n     */\n// 2**64-1\n// Used to identify operations that are currently being executed via {execute}.\n// This should be transient storage when supported by the EVM.\n/**\n     * @dev Check that the caller is authorized to perform the operation.\n     * See {AccessManager} description for a detailed breakdown of the authorization logic.\n     */\n// =================================================== GETTERS ====================================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "expiration",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function expiration() public view virtual returns (uint32) {\n        return 1 weeks;\n    }",
                    "start": "158",
                    "end": "160",
                    "class": "AccessManager",
                    "signature": "returns (uint32) expiration",
                    "full_signature": "function expiration() public virtual view returns (uint32)",
                    "class_method_signature": "AccessManager.expiration",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "minSetback",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function minSetback() public view virtual returns (uint32) {\n        return 5 days;\n    }",
                    "start": "163",
                    "end": "165",
                    "class": "AccessManager",
                    "signature": "returns (uint32) minSetback",
                    "full_signature": "function minSetback() public virtual view returns (uint32)",
                    "class_method_signature": "AccessManager.minSetback",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isTargetClosed",
                    "parameters": "address target",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isTargetClosed(address target) public view virtual returns (bool) {\n        return _targets[target].closed;\n    }",
                    "start": "168",
                    "end": "170",
                    "class": "AccessManager",
                    "signature": "returns (bool) isTargetClosedaddress target",
                    "full_signature": "function isTargetClosed(address target) public virtual view returns (bool)",
                    "class_method_signature": "AccessManager.isTargetClosedaddress target",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getTargetFunctionRole",
                    "parameters": "address target, bytes4 selector",
                    "modifiers": "view",
                    "return": "returns (uint64)",
                    "body": "function getTargetFunctionRole(address target, bytes4 selector) public view virtual returns (uint64) {\n        return _targets[target].allowedRoles[selector];\n    }",
                    "start": "173",
                    "end": "175",
                    "class": "AccessManager",
                    "signature": "returns (uint64) getTargetFunctionRoleaddress target, bytes4 selector",
                    "full_signature": "function getTargetFunctionRole(address target, bytes4 selector) public virtual view returns (uint64)",
                    "class_method_signature": "AccessManager.getTargetFunctionRoleaddress target, bytes4 selector",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getTargetAdminDelay",
                    "parameters": "address target",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function getTargetAdminDelay(address target) public view virtual returns (uint32) {\n        return _targets[target].adminDelay.get();\n    }",
                    "start": "178",
                    "end": "180",
                    "class": "AccessManager",
                    "signature": "returns (uint32) getTargetAdminDelayaddress target",
                    "full_signature": "function getTargetAdminDelay(address target) public virtual view returns (uint32)",
                    "class_method_signature": "AccessManager.getTargetAdminDelayaddress target",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleAdmin",
                    "parameters": "uint64 roleId",
                    "modifiers": "view",
                    "return": "returns (uint64)",
                    "body": "function getRoleAdmin(uint64 roleId) public view virtual returns (uint64) {\n        return _roles[roleId].admin;\n    }",
                    "start": "183",
                    "end": "185",
                    "class": "AccessManager",
                    "signature": "returns (uint64) getRoleAdminuint64 roleId",
                    "full_signature": "function getRoleAdmin(uint64 roleId) public virtual view returns (uint64)",
                    "class_method_signature": "AccessManager.getRoleAdminuint64 roleId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleGuardian",
                    "parameters": "uint64 roleId",
                    "modifiers": "view",
                    "return": "returns (uint64)",
                    "body": "function getRoleGuardian(uint64 roleId) public view virtual returns (uint64) {\n        return _roles[roleId].guardian;\n    }",
                    "start": "188",
                    "end": "190",
                    "class": "AccessManager",
                    "signature": "returns (uint64) getRoleGuardianuint64 roleId",
                    "full_signature": "function getRoleGuardian(uint64 roleId) public virtual view returns (uint64)",
                    "class_method_signature": "AccessManager.getRoleGuardianuint64 roleId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleGrantDelay",
                    "parameters": "uint64 roleId",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function getRoleGrantDelay(uint64 roleId) public view virtual returns (uint32) {\n        return _roles[roleId].grantDelay.get();\n    }",
                    "start": "193",
                    "end": "195",
                    "class": "AccessManager",
                    "signature": "returns (uint32) getRoleGrantDelayuint64 roleId",
                    "full_signature": "function getRoleGrantDelay(uint64 roleId) public virtual view returns (uint32)",
                    "class_method_signature": "AccessManager.getRoleGrantDelayuint64 roleId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getAccess",
                    "parameters": "uint64 roleId, address account",
                    "modifiers": "view",
                    "return": "returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect)",
                    "body": "function getAccess(\n        uint64 roleId,\n        address account\n    ) public view virtual returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect) {\n        Access storage access = _roles[roleId].members[account];\n\n        since = access.since;\n        (currentDelay, pendingDelay, effect) = access.delay.getFull();\n\n        return (since, currentDelay, pendingDelay, effect);\n    }",
                    "start": "198",
                    "end": "208",
                    "class": "AccessManager",
                    "signature": "returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect) getAccessuint64 roleId, address account",
                    "full_signature": "function getAccess(uint64 roleId, address account) public virtual view returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect)",
                    "class_method_signature": "AccessManager.getAccessuint64 roleId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "hasRole",
                    "parameters": "uint64 roleId, address account",
                    "modifiers": "view",
                    "return": "returns (bool isMember, uint32 executionDelay)",
                    "body": "function hasRole(\n        uint64 roleId,\n        address account\n    ) public view virtual returns (bool isMember, uint32 executionDelay) {\n        if (roleId == PUBLIC_ROLE) {\n            return (true, 0);\n        } else {\n            (uint48 hasRoleSince, uint32 currentDelay, , ) = getAccess(roleId, account);\n            return (hasRoleSince != 0 && hasRoleSince <= Time.timestamp(), currentDelay);\n        }\n    }",
                    "start": "211",
                    "end": "221",
                    "class": "AccessManager",
                    "signature": "returns (bool isMember, uint32 executionDelay) hasRoleuint64 roleId, address account",
                    "full_signature": "function hasRole(uint64 roleId, address account) public virtual view returns (bool isMember, uint32 executionDelay)",
                    "class_method_signature": "AccessManager.hasRoleuint64 roleId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "labelRole",
                    "parameters": "uint64 roleId, string calldata label",
                    "modifiers": "",
                    "return": "",
                    "body": "function labelRole(uint64 roleId, string calldata label) public virtual onlyAuthorized {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n        emit RoleLabel(roleId, label);\n    }",
                    "start": "225",
                    "end": "230",
                    "class": "AccessManager",
                    "signature": " labelRoleuint64 roleId, string calldata label",
                    "full_signature": "function labelRole(uint64 roleId, string calldata label) public virtual  ",
                    "class_method_signature": "AccessManager.labelRoleuint64 roleId, string calldata label",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// =============================================== ROLE MANAGEMENT ===============================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "grantRole",
                    "parameters": "uint64 roleId, address account, uint32 executionDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function grantRole(uint64 roleId, address account, uint32 executionDelay) public virtual onlyAuthorized {\n        _grantRole(roleId, account, getRoleGrantDelay(roleId), executionDelay);\n    }",
                    "start": "233",
                    "end": "235",
                    "class": "AccessManager",
                    "signature": " grantRoleuint64 roleId, address account, uint32 executionDelay",
                    "full_signature": "function grantRole(uint64 roleId, address account, uint32 executionDelay) public virtual  ",
                    "class_method_signature": "AccessManager.grantRoleuint64 roleId, address account, uint32 executionDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "revokeRole",
                    "parameters": "uint64 roleId, address account",
                    "modifiers": "",
                    "return": "",
                    "body": "function revokeRole(uint64 roleId, address account) public virtual onlyAuthorized {\n        _revokeRole(roleId, account);\n    }",
                    "start": "238",
                    "end": "240",
                    "class": "AccessManager",
                    "signature": " revokeRoleuint64 roleId, address account",
                    "full_signature": "function revokeRole(uint64 roleId, address account) public virtual  ",
                    "class_method_signature": "AccessManager.revokeRoleuint64 roleId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "renounceRole",
                    "parameters": "uint64 roleId, address callerConfirmation",
                    "modifiers": "",
                    "return": "",
                    "body": "function renounceRole(uint64 roleId, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessManagerBadConfirmation();\n        }\n        _revokeRole(roleId, callerConfirmation);\n    }",
                    "start": "243",
                    "end": "248",
                    "class": "AccessManager",
                    "signature": " renounceRoleuint64 roleId, address callerConfirmation",
                    "full_signature": "function renounceRole(uint64 roleId, address callerConfirmation) public virtual  ",
                    "class_method_signature": "AccessManager.renounceRoleuint64 roleId, address callerConfirmation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setRoleAdmin",
                    "parameters": "uint64 roleId, uint64 admin",
                    "modifiers": "",
                    "return": "",
                    "body": "function setRoleAdmin(uint64 roleId, uint64 admin) public virtual onlyAuthorized {\n        _setRoleAdmin(roleId, admin);\n    }",
                    "start": "251",
                    "end": "253",
                    "class": "AccessManager",
                    "signature": " setRoleAdminuint64 roleId, uint64 admin",
                    "full_signature": "function setRoleAdmin(uint64 roleId, uint64 admin) public virtual  ",
                    "class_method_signature": "AccessManager.setRoleAdminuint64 roleId, uint64 admin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setRoleGuardian",
                    "parameters": "uint64 roleId, uint64 guardian",
                    "modifiers": "",
                    "return": "",
                    "body": "function setRoleGuardian(uint64 roleId, uint64 guardian) public virtual onlyAuthorized {\n        _setRoleGuardian(roleId, guardian);\n    }",
                    "start": "256",
                    "end": "258",
                    "class": "AccessManager",
                    "signature": " setRoleGuardianuint64 roleId, uint64 guardian",
                    "full_signature": "function setRoleGuardian(uint64 roleId, uint64 guardian) public virtual  ",
                    "class_method_signature": "AccessManager.setRoleGuardianuint64 roleId, uint64 guardian",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setGrantDelay",
                    "parameters": "uint64 roleId, uint32 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function setGrantDelay(uint64 roleId, uint32 newDelay) public virtual onlyAuthorized {\n        _setGrantDelay(roleId, newDelay);\n    }",
                    "start": "261",
                    "end": "263",
                    "class": "AccessManager",
                    "signature": " setGrantDelayuint64 roleId, uint32 newDelay",
                    "full_signature": "function setGrantDelay(uint64 roleId, uint32 newDelay) public virtual  ",
                    "class_method_signature": "AccessManager.setGrantDelayuint64 roleId, uint32 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_grantRole",
                    "parameters": "uint64 roleId, address account, uint32 grantDelay, uint32 executionDelay",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function _grantRole(\n        uint64 roleId,\n        address account,\n        uint32 grantDelay,\n        uint32 executionDelay\n    ) internal virtual returns (bool) {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        bool newMember = _roles[roleId].members[account].since == 0;\n        uint48 since;\n\n        if (newMember) {\n            since = Time.timestamp() + grantDelay;\n            _roles[roleId].members[account] = Access({since: since, delay: executionDelay.toDelay()});\n        } else {\n            // No setback here. Value can be reset by doing revoke + grant, effectively allowing the admin to perform\n            // any change to the execution delay within the duration of the role admin delay.\n            (_roles[roleId].members[account].delay, since) = _roles[roleId].members[account].delay.withUpdate(\n                executionDelay,\n                0\n            );\n        }\n\n        emit RoleGranted(roleId, account, executionDelay, since, newMember);\n        return newMember;\n    }",
                    "start": "270",
                    "end": "297",
                    "class": "AccessManager",
                    "signature": "returns (bool) _grantRoleuint64 roleId, address account, uint32 grantDelay, uint32 executionDelay",
                    "full_signature": "function _grantRole(uint64 roleId, address account, uint32 grantDelay, uint32 executionDelay) internal virtual  returns (bool)",
                    "class_method_signature": "AccessManager._grantRoleuint64 roleId, address account, uint32 grantDelay, uint32 executionDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {grantRole} without access control. Returns true if the role was newly granted.\n     *\n     * Emits a {RoleGranted} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_revokeRole",
                    "parameters": "uint64 roleId, address account",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function _revokeRole(uint64 roleId, address account) internal virtual returns (bool) {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        if (_roles[roleId].members[account].since == 0) {\n            return false;\n        }\n\n        delete _roles[roleId].members[account];\n\n        emit RoleRevoked(roleId, account);\n        return true;\n    }",
                    "start": "305",
                    "end": "318",
                    "class": "AccessManager",
                    "signature": "returns (bool) _revokeRoleuint64 roleId, address account",
                    "full_signature": "function _revokeRole(uint64 roleId, address account) internal virtual  returns (bool)",
                    "class_method_signature": "AccessManager._revokeRoleuint64 roleId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {revokeRole} without access control. This logic is also used by {renounceRole}.\n     * Returns true if the role was previously granted.\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setRoleAdmin",
                    "parameters": "uint64 roleId, uint64 admin",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setRoleAdmin(uint64 roleId, uint64 admin) internal virtual {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        _roles[roleId].admin = admin;\n\n        emit RoleAdminChanged(roleId, admin);\n    }",
                    "start": "328",
                    "end": "336",
                    "class": "AccessManager",
                    "signature": " _setRoleAdminuint64 roleId, uint64 admin",
                    "full_signature": "function _setRoleAdmin(uint64 roleId, uint64 admin) internal virtual  ",
                    "class_method_signature": "AccessManager._setRoleAdminuint64 roleId, uint64 admin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {setRoleAdmin} without access control.\n     *\n     * Emits a {RoleAdminChanged} event.\n     *\n     * NOTE: Setting the admin role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n     * anyone to set grant or revoke such role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setRoleGuardian",
                    "parameters": "uint64 roleId, uint64 guardian",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setRoleGuardian(uint64 roleId, uint64 guardian) internal virtual {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        _roles[roleId].guardian = guardian;\n\n        emit RoleGuardianChanged(roleId, guardian);\n    }",
                    "start": "346",
                    "end": "354",
                    "class": "AccessManager",
                    "signature": " _setRoleGuardianuint64 roleId, uint64 guardian",
                    "full_signature": "function _setRoleGuardian(uint64 roleId, uint64 guardian) internal virtual  ",
                    "class_method_signature": "AccessManager._setRoleGuardianuint64 roleId, uint64 guardian",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {setRoleGuardian} without access control.\n     *\n     * Emits a {RoleGuardianChanged} event.\n     *\n     * NOTE: Setting the guardian role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n     * anyone to cancel any scheduled operation for such role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setGrantDelay",
                    "parameters": "uint64 roleId, uint32 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setGrantDelay(uint64 roleId, uint32 newDelay) internal virtual {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        uint48 effect;\n        (_roles[roleId].grantDelay, effect) = _roles[roleId].grantDelay.withUpdate(newDelay, minSetback());\n\n        emit RoleGrantDelayChanged(roleId, newDelay, effect);\n    }",
                    "start": "361",
                    "end": "370",
                    "class": "AccessManager",
                    "signature": " _setGrantDelayuint64 roleId, uint32 newDelay",
                    "full_signature": "function _setGrantDelay(uint64 roleId, uint32 newDelay) internal virtual  ",
                    "class_method_signature": "AccessManager._setGrantDelayuint64 roleId, uint32 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {setGrantDelay} without access control.\n     *\n     * Emits a {RoleGrantDelayChanged} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "setTargetFunctionRole",
                    "parameters": "address target, bytes4[] calldata selectors, uint64 roleId",
                    "modifiers": "",
                    "return": "",
                    "body": "function setTargetFunctionRole(\n        address target,\n        bytes4[] calldata selectors,\n        uint64 roleId\n    ) public virtual onlyAuthorized {\n        for (uint256 i = 0; i < selectors.length; ++i) {\n            _setTargetFunctionRole(target, selectors[i], roleId);\n        }\n    }",
                    "start": "374",
                    "end": "382",
                    "class": "AccessManager",
                    "signature": " setTargetFunctionRoleaddress target, bytes4[] calldata selectors, uint64 roleId",
                    "full_signature": "function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) public virtual  ",
                    "class_method_signature": "AccessManager.setTargetFunctionRoleaddress target, bytes4[] calldata selectors, uint64 roleId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// ============================================= FUNCTION MANAGEMENT ==============================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setTargetFunctionRole",
                    "parameters": "address target, bytes4 selector, uint64 roleId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setTargetFunctionRole(address target, bytes4 selector, uint64 roleId) internal virtual {\n        _targets[target].allowedRoles[selector] = roleId;\n        emit TargetFunctionRoleUpdated(target, selector, roleId);\n    }",
                    "start": "389",
                    "end": "392",
                    "class": "AccessManager",
                    "signature": " _setTargetFunctionRoleaddress target, bytes4 selector, uint64 roleId",
                    "full_signature": "function _setTargetFunctionRole(address target, bytes4 selector, uint64 roleId) internal virtual  ",
                    "class_method_signature": "AccessManager._setTargetFunctionRoleaddress target, bytes4 selector, uint64 roleId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {setTargetFunctionRole} without access control.\n     *\n     * Emits a {TargetFunctionRoleUpdated} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "setTargetAdminDelay",
                    "parameters": "address target, uint32 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function setTargetAdminDelay(address target, uint32 newDelay) public virtual onlyAuthorized {\n        _setTargetAdminDelay(target, newDelay);\n    }",
                    "start": "395",
                    "end": "397",
                    "class": "AccessManager",
                    "signature": " setTargetAdminDelayaddress target, uint32 newDelay",
                    "full_signature": "function setTargetAdminDelay(address target, uint32 newDelay) public virtual  ",
                    "class_method_signature": "AccessManager.setTargetAdminDelayaddress target, uint32 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setTargetAdminDelay",
                    "parameters": "address target, uint32 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setTargetAdminDelay(address target, uint32 newDelay) internal virtual {\n        uint48 effect;\n        (_targets[target].adminDelay, effect) = _targets[target].adminDelay.withUpdate(newDelay, minSetback());\n\n        emit TargetAdminDelayUpdated(target, newDelay, effect);\n    }",
                    "start": "404",
                    "end": "409",
                    "class": "AccessManager",
                    "signature": " _setTargetAdminDelayaddress target, uint32 newDelay",
                    "full_signature": "function _setTargetAdminDelay(address target, uint32 newDelay) internal virtual  ",
                    "class_method_signature": "AccessManager._setTargetAdminDelayaddress target, uint32 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {setTargetAdminDelay} without access control.\n     *\n     * Emits a {TargetAdminDelayUpdated} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "setTargetClosed",
                    "parameters": "address target, bool closed",
                    "modifiers": "",
                    "return": "",
                    "body": "function setTargetClosed(address target, bool closed) public virtual onlyAuthorized {\n        _setTargetClosed(target, closed);\n    }",
                    "start": "413",
                    "end": "415",
                    "class": "AccessManager",
                    "signature": " setTargetClosedaddress target, bool closed",
                    "full_signature": "function setTargetClosed(address target, bool closed) public virtual  ",
                    "class_method_signature": "AccessManager.setTargetClosedaddress target, bool closed",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// =============================================== MODE MANAGEMENT ================================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setTargetClosed",
                    "parameters": "address target, bool closed",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setTargetClosed(address target, bool closed) internal virtual {\n        _targets[target].closed = closed;\n        emit TargetClosed(target, closed);\n    }",
                    "start": "422",
                    "end": "425",
                    "class": "AccessManager",
                    "signature": " _setTargetClosedaddress target, bool closed",
                    "full_signature": "function _setTargetClosed(address target, bool closed) internal virtual  ",
                    "class_method_signature": "AccessManager._setTargetClosedaddress target, bool closed",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Set the closed flag for a contract. This is an internal setter with no access restrictions.\n     *\n     * Emits a {TargetClosed} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "getSchedule",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function getSchedule(bytes32 id) public view virtual returns (uint48) {\n        uint48 timepoint = _schedules[id].timepoint;\n        return _isExpired(timepoint) ? 0 : timepoint;\n    }",
                    "start": "429",
                    "end": "432",
                    "class": "AccessManager",
                    "signature": "returns (uint48) getSchedulebytes32 id",
                    "full_signature": "function getSchedule(bytes32 id) public virtual view returns (uint48)",
                    "class_method_signature": "AccessManager.getSchedulebytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// ============================================== DELAYED OPERATIONS ==============================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getNonce",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function getNonce(bytes32 id) public view virtual returns (uint32) {\n        return _schedules[id].nonce;\n    }",
                    "start": "435",
                    "end": "437",
                    "class": "AccessManager",
                    "signature": "returns (uint32) getNoncebytes32 id",
                    "full_signature": "function getNonce(bytes32 id) public virtual view returns (uint32)",
                    "class_method_signature": "AccessManager.getNoncebytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "schedule",
                    "parameters": "address target, bytes calldata data, uint48 when",
                    "modifiers": "",
                    "return": "returns (bytes32 operationId, uint32 nonce)",
                    "body": "function schedule(\n        address target,\n        bytes calldata data,\n        uint48 when\n    ) public virtual returns (bytes32 operationId, uint32 nonce) {\n        address caller = _msgSender();\n\n        // Fetch restrictions that apply to the caller on the targeted function\n        (, uint32 setback) = _canCallExtended(caller, target, data);\n\n        uint48 minWhen = Time.timestamp() + setback;\n\n        // If call with delay is not authorized, or if requested timing is too soon, revert\n        if (setback == 0 || (when > 0 && when < minWhen)) {\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\n        }\n\n        // Reuse variable due to stack too deep\n        when = uint48(Math.max(when, minWhen)); // cast is safe: both inputs are uint48\n\n        // If caller is authorised, schedule operation\n        operationId = hashOperation(caller, target, data);\n\n        _checkNotScheduled(operationId);\n\n        unchecked {\n            // It's not feasible to overflow the nonce in less than 1000 years\n            nonce = _schedules[operationId].nonce + 1;\n        }\n        _schedules[operationId].timepoint = when;\n        _schedules[operationId].nonce = nonce;\n        emit OperationScheduled(operationId, nonce, when, caller, target, data);\n\n        // Using named return values because otherwise we get stack too deep\n    }",
                    "start": "440",
                    "end": "474",
                    "class": "AccessManager",
                    "signature": "returns (bytes32 operationId, uint32 nonce) scheduleaddress target, bytes calldata data, uint48 when",
                    "full_signature": "function schedule(address target, bytes calldata data, uint48 when) public virtual  returns (bytes32 operationId, uint32 nonce)",
                    "class_method_signature": "AccessManager.scheduleaddress target, bytes calldata data, uint48 when",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkNotScheduled",
                    "parameters": "bytes32 operationId",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkNotScheduled(bytes32 operationId) private view {\n        uint48 prevTimepoint = _schedules[operationId].timepoint;\n        if (prevTimepoint != 0 && !_isExpired(prevTimepoint)) {\n            revert AccessManagerAlreadyScheduled(operationId);\n        }\n    }",
                    "start": "481",
                    "end": "486",
                    "class": "AccessManager",
                    "signature": " _checkNotScheduledbytes32 operationId",
                    "full_signature": "function _checkNotScheduled(bytes32 operationId) private  view ",
                    "class_method_signature": "AccessManager._checkNotScheduledbytes32 operationId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts if the operation is currently scheduled and has not expired.\n     *\n     * NOTE: This function was introduced due to stack too deep errors in schedule.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "execute",
                    "parameters": "address target, bytes calldata data",
                    "modifiers": "payable",
                    "return": "returns (uint32)",
                    "body": "function execute(address target, bytes calldata data) public payable virtual returns (uint32) {\n        address caller = _msgSender();\n\n        // Fetch restrictions that apply to the caller on the targeted function\n        (bool immediate, uint32 setback) = _canCallExtended(caller, target, data);\n\n        // If call is not authorized, revert\n        if (!immediate && setback == 0) {\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\n        }\n\n        bytes32 operationId = hashOperation(caller, target, data);\n        uint32 nonce;\n\n        // If caller is authorised, check operation was scheduled early enough\n        // Consume an available schedule even if there is no currently enforced delay\n        if (setback != 0 || getSchedule(operationId) != 0) {\n            nonce = _consumeScheduledOp(operationId);\n        }\n\n        // Mark the target and selector as authorised\n        bytes32 executionIdBefore = _executionId;\n        _executionId = _hashExecutionId(target, _checkSelector(data));\n\n        // Perform call\n        Address.functionCallWithValue(target, data, msg.value);\n\n        // Reset execute identifier\n        _executionId = executionIdBefore;\n\n        return nonce;\n    }",
                    "start": "492",
                    "end": "523",
                    "class": "AccessManager",
                    "signature": "returns (uint32) executeaddress target, bytes calldata data",
                    "full_signature": "function execute(address target, bytes calldata data) public virtual payable returns (uint32)",
                    "class_method_signature": "AccessManager.executeaddress target, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n// Reentrancy is not an issue because permissions are checked on msg.sender. Additionally,\n// _consumeScheduledOp guarantees a scheduled operation is only executed once.\n// slither-disable-next-line reentrancy-no-eth\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "cancel",
                    "parameters": "address caller, address target, bytes calldata data",
                    "modifiers": "",
                    "return": "returns (uint32)",
                    "body": "function cancel(address caller, address target, bytes calldata data) public virtual returns (uint32) {\n        address msgsender = _msgSender();\n        bytes4 selector = _checkSelector(data);\n\n        bytes32 operationId = hashOperation(caller, target, data);\n        if (_schedules[operationId].timepoint == 0) {\n            revert AccessManagerNotScheduled(operationId);\n        } else if (caller != msgsender) {\n            // calls can only be canceled by the account that scheduled them, a global admin, or by a guardian of the required role.\n            (bool isAdmin, ) = hasRole(ADMIN_ROLE, msgsender);\n            (bool isGuardian, ) = hasRole(getRoleGuardian(getTargetFunctionRole(target, selector)), msgsender);\n            if (!isAdmin && !isGuardian) {\n                revert AccessManagerUnauthorizedCancel(msgsender, caller, target, selector);\n            }\n        }\n\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\n        uint32 nonce = _schedules[operationId].nonce;\n        emit OperationCanceled(operationId, nonce);\n\n        return nonce;\n    }",
                    "start": "526",
                    "end": "547",
                    "class": "AccessManager",
                    "signature": "returns (uint32) canceladdress caller, address target, bytes calldata data",
                    "full_signature": "function cancel(address caller, address target, bytes calldata data) public virtual  returns (uint32)",
                    "class_method_signature": "AccessManager.canceladdress caller, address target, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "consumeScheduledOp",
                    "parameters": "address caller, bytes calldata data",
                    "modifiers": "",
                    "return": "",
                    "body": "function consumeScheduledOp(address caller, bytes calldata data) public virtual {\n        address target = _msgSender();\n        if (IAccessManaged(target).isConsumingScheduledOp() != IAccessManaged.isConsumingScheduledOp.selector) {\n            revert AccessManagerUnauthorizedConsume(target);\n        }\n        _consumeScheduledOp(hashOperation(caller, target, data));\n    }",
                    "start": "550",
                    "end": "556",
                    "class": "AccessManager",
                    "signature": " consumeScheduledOpaddress caller, bytes calldata data",
                    "full_signature": "function consumeScheduledOp(address caller, bytes calldata data) public virtual  ",
                    "class_method_signature": "AccessManager.consumeScheduledOpaddress caller, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_consumeScheduledOp",
                    "parameters": "bytes32 operationId",
                    "modifiers": "",
                    "return": "returns (uint32)",
                    "body": "function _consumeScheduledOp(bytes32 operationId) internal virtual returns (uint32) {\n        uint48 timepoint = _schedules[operationId].timepoint;\n        uint32 nonce = _schedules[operationId].nonce;\n\n        if (timepoint == 0) {\n            revert AccessManagerNotScheduled(operationId);\n        } else if (timepoint > Time.timestamp()) {\n            revert AccessManagerNotReady(operationId);\n        } else if (_isExpired(timepoint)) {\n            revert AccessManagerExpired(operationId);\n        }\n\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\n        emit OperationExecuted(operationId, nonce);\n\n        return nonce;\n    }",
                    "start": "563",
                    "end": "579",
                    "class": "AccessManager",
                    "signature": "returns (uint32) _consumeScheduledOpbytes32 operationId",
                    "full_signature": "function _consumeScheduledOp(bytes32 operationId) internal virtual  returns (uint32)",
                    "class_method_signature": "AccessManager._consumeScheduledOpbytes32 operationId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal variant of {consumeScheduledOp} that operates on bytes32 operationId.\n     *\n     * Returns the nonce of the scheduled operation that is consumed.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "hashOperation",
                    "parameters": "address caller, address target, bytes calldata data",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function hashOperation(address caller, address target, bytes calldata data) public view virtual returns (bytes32) {\n        return keccak256(abi.encode(caller, target, data));\n    }",
                    "start": "582",
                    "end": "584",
                    "class": "AccessManager",
                    "signature": "returns (bytes32) hashOperationaddress caller, address target, bytes calldata data",
                    "full_signature": "function hashOperation(address caller, address target, bytes calldata data) public virtual view returns (bytes32)",
                    "class_method_signature": "AccessManager.hashOperationaddress caller, address target, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "updateAuthority",
                    "parameters": "address target, address newAuthority",
                    "modifiers": "",
                    "return": "",
                    "body": "function updateAuthority(address target, address newAuthority) public virtual onlyAuthorized {\n        IAccessManaged(target).setAuthority(newAuthority);\n    }",
                    "start": "588",
                    "end": "590",
                    "class": "AccessManager",
                    "signature": " updateAuthorityaddress target, address newAuthority",
                    "full_signature": "function updateAuthority(address target, address newAuthority) public virtual  ",
                    "class_method_signature": "AccessManager.updateAuthorityaddress target, address newAuthority",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// ==================================================== OTHERS ====================================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkAuthorized",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _checkAuthorized() private {\n        address caller = _msgSender();\n        (bool immediate, uint32 delay) = _canCallSelf(caller, _msgData());\n        if (!immediate) {\n            if (delay == 0) {\n                (, uint64 requiredRole, ) = _getAdminRestrictions(_msgData());\n                revert AccessManagerUnauthorizedAccount(caller, requiredRole);\n            } else {\n                _consumeScheduledOp(hashOperation(caller, address(this), _msgData()));\n            }\n        }\n    }",
                    "start": "598",
                    "end": "609",
                    "class": "AccessManager",
                    "signature": " _checkAuthorized",
                    "full_signature": "function _checkAuthorized() private   ",
                    "class_method_signature": "AccessManager._checkAuthorized",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// ================================================= ADMIN LOGIC ==================================================\n/**\n     * @dev Check if the current call is authorized according to admin and roles logic.\n     *\n     * WARNING: Carefully review the considerations of {AccessManaged-restricted} since they apply to this modifier.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_getAdminRestrictions",
                    "parameters": "bytes calldata data",
                    "modifiers": "view",
                    "return": "returns (bool adminRestricted, uint64 roleAdminId, uint32 executionDelay)",
                    "body": "function _getAdminRestrictions(\n        bytes calldata data\n    ) private view returns (bool adminRestricted, uint64 roleAdminId, uint32 executionDelay) {\n        if (data.length < 4) {\n            return (false, 0, 0);\n        }\n\n        bytes4 selector = _checkSelector(data);\n\n        // Restricted to ADMIN with no delay beside any execution delay the caller may have\n        if (\n            selector == this.labelRole.selector ||\n            selector == this.setRoleAdmin.selector ||\n            selector == this.setRoleGuardian.selector ||\n            selector == this.setGrantDelay.selector ||\n            selector == this.setTargetAdminDelay.selector\n        ) {\n            return (true, ADMIN_ROLE, 0);\n        }\n\n        // Restricted to ADMIN with the admin delay corresponding to the target\n        if (\n            selector == this.updateAuthority.selector ||\n            selector == this.setTargetClosed.selector ||\n            selector == this.setTargetFunctionRole.selector\n        ) {\n            // First argument is a target.\n            address target = abi.decode(data[0x04:0x24], (address));\n            uint32 delay = getTargetAdminDelay(target);\n            return (true, ADMIN_ROLE, delay);\n        }\n\n        // Restricted to that role's admin with no delay beside any execution delay the caller may have.\n        if (selector == this.grantRole.selector || selector == this.revokeRole.selector) {\n            // First argument is a roleId.\n            uint64 roleId = abi.decode(data[0x04:0x24], (uint64));\n            return (true, getRoleAdmin(roleId), 0);\n        }\n\n        return (false, getTargetFunctionRole(address(this), selector), 0);\n    }",
                    "start": "619",
                    "end": "659",
                    "class": "AccessManager",
                    "signature": "returns (bool adminRestricted, uint64 roleAdminId, uint32 executionDelay) _getAdminRestrictionsbytes calldata data",
                    "full_signature": "function _getAdminRestrictions(bytes calldata data) private  view returns (bool adminRestricted, uint64 roleAdminId, uint32 executionDelay)",
                    "class_method_signature": "AccessManager._getAdminRestrictionsbytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the admin restrictions of a given function call based on the function and arguments involved.\n     *\n     * Returns:\n     * - bool restricted: does this data match a restricted operation\n     * - uint64: which role is this operation restricted to\n     * - uint32: minimum delay to enforce for that operation (max between operation's delay and admin's execution delay)\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_canCallExtended",
                    "parameters": "address caller, address target, bytes calldata data",
                    "modifiers": "view",
                    "return": "returns (bool immediate, uint32 delay)",
                    "body": "function _canCallExtended(\n        address caller,\n        address target,\n        bytes calldata data\n    ) private view returns (bool immediate, uint32 delay) {\n        if (target == address(this)) {\n            return _canCallSelf(caller, data);\n        } else {\n            return data.length < 4 ? (false, 0) : canCall(caller, target, _checkSelector(data));\n        }\n    }",
                    "start": "670",
                    "end": "680",
                    "class": "AccessManager",
                    "signature": "returns (bool immediate, uint32 delay) _canCallExtendedaddress caller, address target, bytes calldata data",
                    "full_signature": "function _canCallExtended(address caller, address target, bytes calldata data) private  view returns (bool immediate, uint32 delay)",
                    "class_method_signature": "AccessManager._canCallExtendedaddress caller, address target, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// =================================================== HELPERS ====================================================\n/**\n     * @dev An extended version of {canCall} for internal usage that checks {_canCallSelf}\n     * when the target is this contract.\n     *\n     * Returns:\n     * - bool immediate: whether the operation can be executed immediately (with no delay)\n     * - uint32 delay: the execution delay\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_canCallSelf",
                    "parameters": "address caller, bytes calldata data",
                    "modifiers": "view",
                    "return": "returns (bool immediate, uint32 delay)",
                    "body": "function _canCallSelf(address caller, bytes calldata data) private view returns (bool immediate, uint32 delay) {\n        if (data.length < 4) {\n            return (false, 0);\n        }\n\n        if (caller == address(this)) {\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\n            // permissions. We verify that the call \"identifier\", which is set during {execute}, is correct.\n            return (_isExecuting(address(this), _checkSelector(data)), 0);\n        }\n\n        (bool adminRestricted, uint64 roleId, uint32 operationDelay) = _getAdminRestrictions(data);\n\n        // isTargetClosed apply to non-admin-restricted function\n        if (!adminRestricted && isTargetClosed(address(this))) {\n            return (false, 0);\n        }\n\n        (bool inRole, uint32 executionDelay) = hasRole(roleId, caller);\n        if (!inRole) {\n            return (false, 0);\n        }\n\n        // downcast is safe because both options are uint32\n        delay = uint32(Math.max(operationDelay, executionDelay));\n        return (delay == 0, delay);\n    }",
                    "start": "685",
                    "end": "711",
                    "class": "AccessManager",
                    "signature": "returns (bool immediate, uint32 delay) _canCallSelfaddress caller, bytes calldata data",
                    "full_signature": "function _canCallSelf(address caller, bytes calldata data) private  view returns (bool immediate, uint32 delay)",
                    "class_method_signature": "AccessManager._canCallSelfaddress caller, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev A version of {canCall} that checks for restrictions in this contract.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_isExecuting",
                    "parameters": "address target, bytes4 selector",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isExecuting(address target, bytes4 selector) private view returns (bool) {\n        return _executionId == _hashExecutionId(target, selector);\n    }",
                    "start": "716",
                    "end": "718",
                    "class": "AccessManager",
                    "signature": "returns (bool) _isExecutingaddress target, bytes4 selector",
                    "full_signature": "function _isExecuting(address target, bytes4 selector) private  view returns (bool)",
                    "class_method_signature": "AccessManager._isExecutingaddress target, bytes4 selector",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns true if a call with `target` and `selector` is being executed via {executed}.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_isExpired",
                    "parameters": "uint48 timepoint",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isExpired(uint48 timepoint) private view returns (bool) {\n        return timepoint + expiration() <= Time.timestamp();\n    }",
                    "start": "723",
                    "end": "725",
                    "class": "AccessManager",
                    "signature": "returns (bool) _isExpireduint48 timepoint",
                    "full_signature": "function _isExpired(uint48 timepoint) private  view returns (bool)",
                    "class_method_signature": "AccessManager._isExpireduint48 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns true if a schedule timepoint is past its expiration deadline.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_checkSelector",
                    "parameters": "bytes calldata data",
                    "modifiers": "pure",
                    "return": "returns (bytes4)",
                    "body": "function _checkSelector(bytes calldata data) private pure returns (bytes4) {\n        return bytes4(data[0:4]);\n    }",
                    "start": "730",
                    "end": "732",
                    "class": "AccessManager",
                    "signature": "returns (bytes4) _checkSelectorbytes calldata data",
                    "full_signature": "function _checkSelector(bytes calldata data) private  pure returns (bytes4)",
                    "class_method_signature": "AccessManager._checkSelectorbytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Extracts the selector from calldata. Panics if data is not at least 4 bytes\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_hashExecutionId",
                    "parameters": "address target, bytes4 selector",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function _hashExecutionId(address target, bytes4 selector) private pure returns (bytes32) {\n        return keccak256(abi.encode(target, selector));\n    }",
                    "start": "737",
                    "end": "739",
                    "class": "AccessManager",
                    "signature": "returns (bytes32) _hashExecutionIdaddress target, bytes4 selector",
                    "full_signature": "function _hashExecutionId(address target, bytes4 selector) private  pure returns (bytes32)",
                    "class_method_signature": "AccessManager._hashExecutionIdaddress target, bytes4 selector",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Hashing function for execute protection\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/extensions/AccessControlEnumerable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "21",
                    "end": "23",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override returns (bool)",
                    "class_method_signature": "AccessControlEnumerable.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleMember",
                    "parameters": "bytes32 role, uint256 index",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\n        return _roleMembers[role].at(index);\n    }",
                    "start": "37",
                    "end": "39",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (address) getRoleMemberbytes32 role, uint256 index",
                    "full_signature": "function getRoleMember(bytes32 role, uint256 index) public virtual view returns (address)",
                    "class_method_signature": "AccessControlEnumerable.getRoleMemberbytes32 role, uint256 index",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleMemberCount",
                    "parameters": "bytes32 role",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\n        return _roleMembers[role].length();\n    }",
                    "start": "45",
                    "end": "47",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (uint256) getRoleMemberCountbytes32 role",
                    "full_signature": "function getRoleMemberCount(bytes32 role) public virtual view returns (uint256)",
                    "class_method_signature": "AccessControlEnumerable.getRoleMemberCountbytes32 role",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleMembers",
                    "parameters": "bytes32 role",
                    "modifiers": "view",
                    "return": "returns (address[] memory)",
                    "body": "function getRoleMembers(bytes32 role) public view virtual returns (address[] memory) {\n        return _roleMembers[role].values();\n    }",
                    "start": "57",
                    "end": "59",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (address[] memory) getRoleMembersbytes32 role",
                    "full_signature": "function getRoleMembers(bytes32 role) public virtual view returns (address[] memory)",
                    "class_method_signature": "AccessControlEnumerable.getRoleMembersbytes32 role",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Return all accounts that have `role`\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_grantRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\n        bool granted = super._grantRole(role, account);\n        if (granted) {\n            _roleMembers[role].add(account);\n        }\n        return granted;\n    }",
                    "start": "64",
                    "end": "70",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (bool) _grantRolebytes32 role, address account",
                    "full_signature": "function _grantRole(bytes32 role, address account) internal virtual override returns (bool)",
                    "class_method_signature": "AccessControlEnumerable._grantRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_revokeRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\n        bool revoked = super._revokeRole(role, account);\n        if (revoked) {\n            _roleMembers[role].remove(account);\n        }\n        return revoked;\n    }",
                    "start": "75",
                    "end": "81",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (bool) _revokeRolebytes32 role, address account",
                    "full_signature": "function _revokeRole(bytes32 role, address account) internal virtual override returns (bool)",
                    "class_method_signature": "AccessControlEnumerable._revokeRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlEnumerable.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlDefaultAdminRules.sol": [],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/contracts/access/extensions/AccessControlDefaultAdminRules.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlDefaultAdminRules).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "65",
                    "end": "67",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override returns (bool)",
                    "class_method_signature": "AccessControlDefaultAdminRules.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// pending admin pair read/written together frequently\n// 0 == unset\n// pending delay pair read/written together frequently\n// 0 == unset\n/**\n     * @dev Sets the initial values for {defaultAdminDelay} and {defaultAdmin} address.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "owner",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function owner() public view virtual returns (address) {\n        return defaultAdmin();\n    }",
                    "start": "72",
                    "end": "74",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (address) owner",
                    "full_signature": "function owner() public virtual view returns (address)",
                    "class_method_signature": "AccessControlDefaultAdminRules.owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC5313-owner}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "grantRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override(AccessControl, IAccessControl)",
                    "return": "",
                    "body": "function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super.grantRole(role, account);\n    }",
                    "start": "83",
                    "end": "88",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " grantRolebytes32 role, address account",
                    "full_signature": "function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) ",
                    "class_method_signature": "AccessControlDefaultAdminRules.grantRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// Override AccessControl role management\n///\n/**\n     * @dev See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "revokeRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override(AccessControl, IAccessControl)",
                    "return": "",
                    "body": "function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super.revokeRole(role, account);\n    }",
                    "start": "93",
                    "end": "98",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " revokeRolebytes32 role, address account",
                    "full_signature": "function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) ",
                    "class_method_signature": "AccessControlDefaultAdminRules.revokeRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "renounceRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override(AccessControl, IAccessControl)",
                    "return": "",
                    "body": "function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\n            (address newDefaultAdmin, uint48 schedule) = pendingDefaultAdmin();\n            if (newDefaultAdmin != address(0) || !_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\n                revert AccessControlEnforcedDefaultAdminDelay(schedule);\n            }\n            delete _pendingDefaultAdminSchedule;\n        }\n        super.renounceRole(role, account);\n    }",
                    "start": "113",
                    "end": "122",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " renounceRolebytes32 role, address account",
                    "full_signature": "function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) ",
                    "class_method_signature": "AccessControlDefaultAdminRules.renounceRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {AccessControl-renounceRole}.\n     *\n     * For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling\n     * {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule\n     * has also passed when calling this function.\n     *\n     * After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions.\n     *\n     * NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin},\n     * thereby disabling any functionality that is only available for it, and the possibility of reassigning a\n     * non-administrated role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_grantRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            if (defaultAdmin() != address(0)) {\n                revert AccessControlEnforcedDefaultAdminRules();\n            }\n            _currentDefaultAdmin = account;\n        }\n        return super._grantRole(role, account);\n    }",
                    "start": "133",
                    "end": "141",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (bool) _grantRolebytes32 role, address account",
                    "full_signature": "function _grantRole(bytes32 role, address account) internal virtual override returns (bool)",
                    "class_method_signature": "AccessControlDefaultAdminRules._grantRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {AccessControl-_grantRole}.\n     *\n     * For `DEFAULT_ADMIN_ROLE`, it only allows granting if there isn't already a {defaultAdmin} or if the\n     * role has been previously renounced.\n     *\n     * NOTE: Exposing this function through another mechanism may make the `DEFAULT_ADMIN_ROLE`\n     * assignable again. Make sure to guarantee this is the expected behavior in your implementation.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_revokeRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\n            delete _currentDefaultAdmin;\n        }\n        return super._revokeRole(role, account);\n    }",
                    "start": "146",
                    "end": "151",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (bool) _revokeRolebytes32 role, address account",
                    "full_signature": "function _revokeRole(bytes32 role, address account) internal virtual override returns (bool)",
                    "class_method_signature": "AccessControlDefaultAdminRules._revokeRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {AccessControl-_revokeRole}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setRoleAdmin",
                    "parameters": "bytes32 role, bytes32 adminRole",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual override {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super._setRoleAdmin(role, adminRole);\n    }",
                    "start": "156",
                    "end": "161",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _setRoleAdminbytes32 role, bytes32 adminRole",
                    "full_signature": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual override ",
                    "class_method_signature": "AccessControlDefaultAdminRules._setRoleAdminbytes32 role, bytes32 adminRole",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {AccessControl-_setRoleAdmin}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "defaultAdmin",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function defaultAdmin() public view virtual returns (address) {\n        return _currentDefaultAdmin;\n    }",
                    "start": "170",
                    "end": "172",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (address) defaultAdmin",
                    "full_signature": "function defaultAdmin() public virtual view returns (address)",
                    "class_method_signature": "AccessControlDefaultAdminRules.defaultAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// AccessControlDefaultAdminRules accessors\n///\n/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "pendingDefaultAdmin",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address newAdmin, uint48 schedule)",
                    "body": "function pendingDefaultAdmin() public view virtual returns (address newAdmin, uint48 schedule) {\n        return (_pendingDefaultAdmin, _pendingDefaultAdminSchedule);\n    }",
                    "start": "177",
                    "end": "179",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (address newAdmin, uint48 schedule) pendingDefaultAdmin",
                    "full_signature": "function pendingDefaultAdmin() public virtual view returns (address newAdmin, uint48 schedule)",
                    "class_method_signature": "AccessControlDefaultAdminRules.pendingDefaultAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "defaultAdminDelay",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function defaultAdminDelay() public view virtual returns (uint48) {\n        uint48 schedule = _pendingDelaySchedule;\n        return (_isScheduleSet(schedule) && _hasSchedulePassed(schedule)) ? _pendingDelay : _currentDelay;\n    }",
                    "start": "184",
                    "end": "187",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (uint48) defaultAdminDelay",
                    "full_signature": "function defaultAdminDelay() public virtual view returns (uint48)",
                    "class_method_signature": "AccessControlDefaultAdminRules.defaultAdminDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "pendingDefaultAdminDelay",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint48 newDelay, uint48 schedule)",
                    "body": "function pendingDefaultAdminDelay() public view virtual returns (uint48 newDelay, uint48 schedule) {\n        schedule = _pendingDelaySchedule;\n        return (_isScheduleSet(schedule) && !_hasSchedulePassed(schedule)) ? (_pendingDelay, schedule) : (0, 0);\n    }",
                    "start": "192",
                    "end": "195",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (uint48 newDelay, uint48 schedule) pendingDefaultAdminDelay",
                    "full_signature": "function pendingDefaultAdminDelay() public virtual view returns (uint48 newDelay, uint48 schedule)",
                    "class_method_signature": "AccessControlDefaultAdminRules.pendingDefaultAdminDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "defaultAdminDelayIncreaseWait",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function defaultAdminDelayIncreaseWait() public view virtual returns (uint48) {\n        return 5 days;\n    }",
                    "start": "200",
                    "end": "202",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (uint48) defaultAdminDelayIncreaseWait",
                    "full_signature": "function defaultAdminDelayIncreaseWait() public virtual view returns (uint48)",
                    "class_method_signature": "AccessControlDefaultAdminRules.defaultAdminDelayIncreaseWait",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "beginDefaultAdminTransfer",
                    "parameters": "address newAdmin",
                    "modifiers": "",
                    "return": "",
                    "body": "function beginDefaultAdminTransfer(address newAdmin) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _beginDefaultAdminTransfer(newAdmin);\n    }",
                    "start": "211",
                    "end": "213",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " beginDefaultAdminTransferaddress newAdmin",
                    "full_signature": "function beginDefaultAdminTransfer(address newAdmin) public virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules.beginDefaultAdminTransferaddress newAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// AccessControlDefaultAdminRules public and internal setters for defaultAdmin/pendingDefaultAdmin\n///\n/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_beginDefaultAdminTransfer",
                    "parameters": "address newAdmin",
                    "modifiers": "",
                    "return": "",
                    "body": "function _beginDefaultAdminTransfer(address newAdmin) internal virtual {\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay();\n        _setPendingDefaultAdmin(newAdmin, newSchedule);\n        emit DefaultAdminTransferScheduled(newAdmin, newSchedule);\n    }",
                    "start": "220",
                    "end": "224",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _beginDefaultAdminTransferaddress newAdmin",
                    "full_signature": "function _beginDefaultAdminTransfer(address newAdmin) internal virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules._beginDefaultAdminTransferaddress newAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {beginDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "cancelDefaultAdminTransfer",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function cancelDefaultAdminTransfer() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _cancelDefaultAdminTransfer();\n    }",
                    "start": "229",
                    "end": "231",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " cancelDefaultAdminTransfer",
                    "full_signature": "function cancelDefaultAdminTransfer() public virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules.cancelDefaultAdminTransfer",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_cancelDefaultAdminTransfer",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _cancelDefaultAdminTransfer() internal virtual {\n        _setPendingDefaultAdmin(address(0), 0);\n    }",
                    "start": "238",
                    "end": "240",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _cancelDefaultAdminTransfer",
                    "full_signature": "function _cancelDefaultAdminTransfer() internal virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules._cancelDefaultAdminTransfer",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {cancelDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "acceptDefaultAdminTransfer",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function acceptDefaultAdminTransfer() public virtual {\n        (address newDefaultAdmin, ) = pendingDefaultAdmin();\n        if (_msgSender() != newDefaultAdmin) {\n            // Enforce newDefaultAdmin explicit acceptance.\n            revert AccessControlInvalidDefaultAdmin(_msgSender());\n        }\n        _acceptDefaultAdminTransfer();\n    }",
                    "start": "245",
                    "end": "252",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " acceptDefaultAdminTransfer",
                    "full_signature": "function acceptDefaultAdminTransfer() public virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules.acceptDefaultAdminTransfer",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_acceptDefaultAdminTransfer",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _acceptDefaultAdminTransfer() internal virtual {\n        (address newAdmin, uint48 schedule) = pendingDefaultAdmin();\n        if (!_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\n            revert AccessControlEnforcedDefaultAdminDelay(schedule);\n        }\n        _revokeRole(DEFAULT_ADMIN_ROLE, defaultAdmin());\n        _grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        delete _pendingDefaultAdmin;\n        delete _pendingDefaultAdminSchedule;\n    }",
                    "start": "259",
                    "end": "268",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _acceptDefaultAdminTransfer",
                    "full_signature": "function _acceptDefaultAdminTransfer() internal virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules._acceptDefaultAdminTransfer",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {acceptDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "changeDefaultAdminDelay",
                    "parameters": "uint48 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function changeDefaultAdminDelay(uint48 newDelay) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _changeDefaultAdminDelay(newDelay);\n    }",
                    "start": "277",
                    "end": "279",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " changeDefaultAdminDelayuint48 newDelay",
                    "full_signature": "function changeDefaultAdminDelay(uint48 newDelay) public virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules.changeDefaultAdminDelayuint48 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// AccessControlDefaultAdminRules public and internal setters for defaultAdminDelay/pendingDefaultAdminDelay\n///\n/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_changeDefaultAdminDelay",
                    "parameters": "uint48 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function _changeDefaultAdminDelay(uint48 newDelay) internal virtual {\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay);\n        _setPendingDelay(newDelay, newSchedule);\n        emit DefaultAdminDelayChangeScheduled(newDelay, newSchedule);\n    }",
                    "start": "286",
                    "end": "290",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _changeDefaultAdminDelayuint48 newDelay",
                    "full_signature": "function _changeDefaultAdminDelay(uint48 newDelay) internal virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules._changeDefaultAdminDelayuint48 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {changeDefaultAdminDelay}.\n     *\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "rollbackDefaultAdminDelay",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function rollbackDefaultAdminDelay() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _rollbackDefaultAdminDelay();\n    }",
                    "start": "295",
                    "end": "297",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " rollbackDefaultAdminDelay",
                    "full_signature": "function rollbackDefaultAdminDelay() public virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules.rollbackDefaultAdminDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_rollbackDefaultAdminDelay",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _rollbackDefaultAdminDelay() internal virtual {\n        _setPendingDelay(0, 0);\n    }",
                    "start": "304",
                    "end": "306",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _rollbackDefaultAdminDelay",
                    "full_signature": "function _rollbackDefaultAdminDelay() internal virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules._rollbackDefaultAdminDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {rollbackDefaultAdminDelay}.\n     *\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_delayChangeWait",
                    "parameters": "uint48 newDelay",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function _delayChangeWait(uint48 newDelay) internal view virtual returns (uint48) {\n        uint48 currentDelay = defaultAdminDelay();\n\n        // When increasing the delay, we schedule the delay change to occur after a period of \"new delay\" has passed, up\n        // to a maximum given by defaultAdminDelayIncreaseWait, by default 5 days. For example, if increasing from 1 day\n        // to 3 days, the new delay will come into effect after 3 days. If increasing from 1 day to 10 days, the new\n        // delay will come into effect after 5 days. The 5 day wait period is intended to be able to fix an error like\n        // using milliseconds instead of seconds.\n        //\n        // When decreasing the delay, we wait the difference between \"current delay\" and \"new delay\". This guarantees\n        // that an admin transfer cannot be made faster than \"current delay\" at the time the delay change is scheduled.\n        // For example, if decreasing from 10 days to 3 days, the new delay will come into effect after 7 days.\n        return\n            newDelay > currentDelay\n                ? uint48(Math.min(newDelay, defaultAdminDelayIncreaseWait())) // no need to safecast, both inputs are uint48\n                : currentDelay - newDelay;\n    }",
                    "start": "317",
                    "end": "333",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (uint48) _delayChangeWaituint48 newDelay",
                    "full_signature": "function _delayChangeWait(uint48 newDelay) internal virtual view returns (uint48)",
                    "class_method_signature": "AccessControlDefaultAdminRules._delayChangeWaituint48 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the amount of seconds to wait after the `newDelay` will\n     * become the new {defaultAdminDelay}.\n     *\n     * The value returned guarantees that if the delay is reduced, it will go into effect\n     * after a wait that honors the previously set delay.\n     *\n     * See {defaultAdminDelayIncreaseWait}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setPendingDefaultAdmin",
                    "parameters": "address newAdmin, uint48 newSchedule",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setPendingDefaultAdmin(address newAdmin, uint48 newSchedule) private {\n        (, uint48 oldSchedule) = pendingDefaultAdmin();\n\n        _pendingDefaultAdmin = newAdmin;\n        _pendingDefaultAdminSchedule = newSchedule;\n\n        // An `oldSchedule` from `pendingDefaultAdmin()` is only set if it hasn't been accepted.\n        if (_isScheduleSet(oldSchedule)) {\n            // Emit for implicit cancellations when another default admin was scheduled.\n            emit DefaultAdminTransferCanceled();\n        }\n    }",
                    "start": "344",
                    "end": "355",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _setPendingDefaultAdminaddress newAdmin, uint48 newSchedule",
                    "full_signature": "function _setPendingDefaultAdmin(address newAdmin, uint48 newSchedule) private   ",
                    "class_method_signature": "AccessControlDefaultAdminRules._setPendingDefaultAdminaddress newAdmin, uint48 newSchedule",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// Private setters\n///\n/**\n     * @dev Setter of the tuple for pending admin and its schedule.\n     *\n     * May emit a DefaultAdminTransferCanceled event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_setPendingDelay",
                    "parameters": "uint48 newDelay, uint48 newSchedule",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setPendingDelay(uint48 newDelay, uint48 newSchedule) private {\n        uint48 oldSchedule = _pendingDelaySchedule;\n\n        if (_isScheduleSet(oldSchedule)) {\n            if (_hasSchedulePassed(oldSchedule)) {\n                // Materialize a virtual delay\n                _currentDelay = _pendingDelay;\n            } else {\n                // Emit for implicit cancellations when another delay was scheduled.\n                emit DefaultAdminDelayChangeCanceled();\n            }\n        }\n\n        _pendingDelay = newDelay;\n        _pendingDelaySchedule = newSchedule;\n    }",
                    "start": "362",
                    "end": "377",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _setPendingDelayuint48 newDelay, uint48 newSchedule",
                    "full_signature": "function _setPendingDelay(uint48 newDelay, uint48 newSchedule) private   ",
                    "class_method_signature": "AccessControlDefaultAdminRules._setPendingDelayuint48 newDelay, uint48 newSchedule",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Setter of the tuple for pending delay and its schedule.\n     *\n     * May emit a DefaultAdminDelayChangeCanceled event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_isScheduleSet",
                    "parameters": "uint48 schedule",
                    "modifiers": "pure",
                    "return": "returns (bool)",
                    "body": "function _isScheduleSet(uint48 schedule) private pure returns (bool) {\n        return schedule != 0;\n    }",
                    "start": "386",
                    "end": "388",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (bool) _isScheduleSetuint48 schedule",
                    "full_signature": "function _isScheduleSet(uint48 schedule) private  pure returns (bool)",
                    "class_method_signature": "AccessControlDefaultAdminRules._isScheduleSetuint48 schedule",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// Private helpers\n///\n/**\n     * @dev Defines if an `schedule` is considered set. For consistency purposes.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_hasSchedulePassed",
                    "parameters": "uint48 schedule",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _hasSchedulePassed(uint48 schedule) private view returns (bool) {\n        return schedule < block.timestamp;\n    }",
                    "start": "393",
                    "end": "395",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (bool) _hasSchedulePasseduint48 schedule",
                    "full_signature": "function _hasSchedulePassed(uint48 schedule) private  view returns (bool)",
                    "class_method_signature": "AccessControlDefaultAdminRules._hasSchedulePasseduint48 schedule",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Defines if an `schedule` is considered passed. For consistency purposes.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/AccessManagedHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/ERC721Harness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/ERC20PermitHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/TimelockControllerHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/EnumerableSetHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/ERC3156FlashBorrowerHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/OwnableHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/PausableHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/Ownable2StepHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/AccessControlHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/ERC721ReceiverHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/AccessControlDefaultAdminRulesHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "pendingDefaultAdmin_",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function pendingDefaultAdmin_() external view returns (address) {\n        (address newAdmin, ) = pendingDefaultAdmin();\n        return newAdmin;\n    }",
                    "start": "18",
                    "end": "21",
                    "class": "AccessControlDefaultAdminRulesHarness",
                    "signature": "returns (address) pendingDefaultAdmin_",
                    "full_signature": "function pendingDefaultAdmin_() external  view returns (address)",
                    "class_method_signature": "AccessControlDefaultAdminRulesHarness.pendingDefaultAdmin_",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// FV\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "defaultAdminDelayIncreaseWait",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint48)",
                    "body": "function defaultAdminDelayIncreaseWait() public view override returns (uint48) {\n        return _delayIncreaseWait;\n    }",
                    "start": "43",
                    "end": "45",
                    "class": "AccessControlDefaultAdminRulesHarness",
                    "signature": "returns (uint48) defaultAdminDelayIncreaseWait",
                    "full_signature": "function defaultAdminDelayIncreaseWait() public  override returns (uint48)",
                    "class_method_signature": "AccessControlDefaultAdminRulesHarness.defaultAdminDelayIncreaseWait",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Overrides\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/AccessManagerHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "minSetback",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint32)",
                    "body": "function minSetback() public view override returns (uint32) {\n        return _minSetback;\n    }",
                    "start": "14",
                    "end": "16",
                    "class": "AccessManagerHarness",
                    "signature": "returns (uint32) minSetback",
                    "full_signature": "function minSetback() public  override returns (uint32)",
                    "class_method_signature": "AccessManagerHarness.minSetback",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// override with a storage slot that can basically take any value.\n// FV\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getSelector",
                    "parameters": "bytes calldata data",
                    "modifiers": "pure",
                    "return": "returns (bytes4)",
                    "body": "function getSelector(bytes calldata data) external pure returns (bytes4) {\n        return bytes4(data);\n    }",
                    "start": "99",
                    "end": "101",
                    "class": "AccessManagerHarness",
                    "signature": "returns (bytes4) getSelectorbytes calldata data",
                    "full_signature": "function getSelector(bytes calldata data) external  pure returns (bytes4)",
                    "class_method_signature": "AccessManagerHarness.getSelectorbytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Pad with zeros (and don't revert) if data is too short.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/InitializableHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/EnumerableMapHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/ERC20FlashMintHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "flashFeeReceiver",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function flashFeeReceiver() public view returns (address) {\n        return someFeeReceiver;\n    }",
                    "start": "24",
                    "end": "26",
                    "class": "ERC20FlashMintHarness",
                    "signature": "returns (address) flashFeeReceiver",
                    "full_signature": "function flashFeeReceiver() public  view returns (address)",
                    "class_method_signature": "ERC20FlashMintHarness.flashFeeReceiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// public accessor\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_flashFee",
                    "parameters": "address, uint256",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _flashFee(address, uint256) internal view override returns (uint256) {\n        return someFee;\n    }",
                    "start": "29",
                    "end": "31",
                    "class": "ERC20FlashMintHarness",
                    "signature": "returns (uint256) _flashFeeaddress, uint256",
                    "full_signature": "function _flashFee(address, uint256) internal  override returns (uint256)",
                    "class_method_signature": "ERC20FlashMintHarness._flashFeeaddress, uint256",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// internal hook\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/DoubleEndedQueueHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/NoncesHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/openzeppelin-contracts/certora/harnesses/ERC20WrapperHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/StdJson.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/StdChains.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_testRpc",
                    "parameters": "string memory rpcAlias",
                    "modifiers": "",
                    "return": "",
                    "body": "function _testRpc(string memory rpcAlias) internal {\n        string memory rpcUrl = getChain(rpcAlias).rpcUrl;\n        vm.createSelectFork(rpcUrl);\n    }",
                    "start": "48",
                    "end": "51",
                    "class": "StdChainsTest",
                    "signature": " _testRpcstring memory rpcAlias",
                    "full_signature": "function _testRpc(string memory rpcAlias) internal   ",
                    "class_method_signature": "StdChainsTest._testRpcstring memory rpcAlias",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Named with a leading underscore to clarify this is not intended to be run as a normal test,\n// and is intended to be used in the below `test_Rpcs` test.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "test_RevertIf_ChainNotFound",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function test_RevertIf_ChainNotFound() public {\n        // We deploy a mock to properly test the revert.\n        StdChainsMock stdChainsMock = new StdChainsMock();\n\n        vm.expectRevert(\"StdChains getChain(string): Chain with alias \\\"does_not_exist\\\" not found.\");\n        stdChainsMock.exposed_getChain(\"does_not_exist\");\n    }",
                    "start": "87",
                    "end": "93",
                    "class": "StdChainsTest",
                    "signature": " test_RevertIf_ChainNotFound",
                    "full_signature": "function test_RevertIf_ChainNotFound() public   ",
                    "class_method_signature": "StdChainsTest.test_RevertIf_ChainNotFound",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// Ensure we can connect to the default RPC URL for each chain.\n// Currently commented out since this is slow and public RPCs are flaky, often resulting in failing CI.\n// function test_Rpcs() public {\n//     _testRpc(\"mainnet\");\n//     _testRpc(\"sepolia\");\n//     _testRpc(\"holesky\");\n//     _testRpc(\"optimism\");\n//     _testRpc(\"optimism_sepolia\");\n//     _testRpc(\"arbitrum_one\");\n//     _testRpc(\"arbitrum_one_sepolia\");\n//     _testRpc(\"arbitrum_nova\");\n//     _testRpc(\"polygon\");\n//     _testRpc(\"polygon_amoy\");\n//     _testRpc(\"avalanche\");\n//     _testRpc(\"avalanche_fuji\");\n//     _testRpc(\"bnb_smart_chain\");\n//     _testRpc(\"bnb_smart_chain_testnet\");\n//     _testRpc(\"gnosis_chain\");\n//     _testRpc(\"moonbeam\");\n//     _testRpc(\"moonriver\");\n//     _testRpc(\"moonbase\");\n//     _testRpc(\"base_sepolia\");\n//     _testRpc(\"base\");\n//     _testRpc(\"blast_sepolia\");\n//     _testRpc(\"blast\");\n//     _testRpc(\"fantom_opera\");\n//     _testRpc(\"fantom_opera_testnet\");\n//     _testRpc(\"fraxtal\");\n//     _testRpc(\"fraxtal_testnet\");\n//     _testRpc(\"berachain_bartio_testnet\");\n//     _testRpc(\"flare\");\n//     _testRpc(\"flare_coston2\");\n// }\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/StdToml.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/StdStyle.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/StdStorage.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "read_struct_upper",
                    "parameters": "address who",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function read_struct_upper(address who) public view returns (uint256) {\n        return map_packed[who] >> 128;\n    }",
                    "start": "397",
                    "end": "399",
                    "class": "StorageTest",
                    "signature": "returns (uint256) read_struct_upperaddress who",
                    "full_signature": "function read_struct_upper(address who) public  view returns (uint256)",
                    "class_method_signature": "StorageTest.read_struct_upperaddress who",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Array with length matching values of elements.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/Vm.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/StdMath.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "getAbs",
                    "parameters": "int256 a",
                    "modifiers": "pure",
                    "return": "returns (uint256)",
                    "body": "function getAbs(int256 a) private pure returns (uint256) {\n        if (a < 0) {\n            return a == type(int256).min ? uint256(type(int256).max) + 1 : uint256(-a);\n        }\n\n        return uint256(a);\n    }",
                    "start": "195",
                    "end": "201",
                    "class": "StdMathTest",
                    "signature": "returns (uint256) getAbsint256 a",
                    "full_signature": "function getAbs(int256 a) private  pure returns (uint256)",
                    "class_method_signature": "StdMathTest.getAbsint256 a",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                   HELPERS\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/StdAssertions.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "assertEqCallExternal",
                    "parameters": "address targetA, bytes memory callDataA, address targetB, bytes memory callDataB, bool strictRevertData",
                    "modifiers": "",
                    "return": "",
                    "body": "function assertEqCallExternal(\n        address targetA,\n        bytes memory callDataA,\n        address targetB,\n        bytes memory callDataB,\n        bool strictRevertData\n    ) public {\n        assertEqCall(targetA, callDataA, targetB, callDataB, strictRevertData);\n    }",
                    "start": "108",
                    "end": "116",
                    "class": "StdAssertionsTest",
                    "signature": " assertEqCallExternaladdress targetA, bytes memory callDataA, address targetB, bytes memory callDataB, bool strictRevertData",
                    "full_signature": "function assertEqCallExternal(address targetA, bytes memory callDataA, address targetB, bytes memory callDataB, bool strictRevertData) public   ",
                    "class_method_signature": "StdAssertionsTest.assertEqCallExternaladdress targetA, bytes memory callDataA, address targetB, bytes memory callDataB, bool strictRevertData",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Helper function to test outcome of assertEqCall via `expect` cheatcodes\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/StdUtils.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "exposed_getTokenBalances",
                    "parameters": "address token, address[] memory addresses",
                    "modifiers": "",
                    "return": "returns (uint256[] memory balances)",
                    "body": "function exposed_getTokenBalances(address token, address[] memory addresses)\n        external\n        returns (uint256[] memory balances)\n    {\n        return getTokenBalances(token, addresses);\n    }",
                    "start": "8",
                    "end": "13",
                    "class": "StdUtilsMock",
                    "signature": "returns (uint256[] memory balances) exposed_getTokenBalancesaddress token, address[] memory addresses",
                    "full_signature": "function exposed_getTokenBalances(address token, address[] memory addresses) external   returns (uint256[] memory balances)",
                    "class_method_signature": "StdUtilsMock.exposed_getTokenBalancesaddress token, address[] memory addresses",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// We deploy a mock version so we can properly test expected reverts.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "test_Bound",
                    "parameters": "",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function test_Bound() public pure {\n        assertEq(bound(uint256(5), 0, 4), 0);\n        assertEq(bound(uint256(0), 69, 69), 69);\n        assertEq(bound(uint256(0), 68, 69), 68);\n        assertEq(bound(uint256(10), 150, 190), 174);\n        assertEq(bound(uint256(300), 2800, 3200), 3107);\n        assertEq(bound(uint256(9999), 1337, 6666), 4669);\n    }",
                    "start": "33",
                    "end": "40",
                    "class": "StdUtilsTest",
                    "signature": " test_Bound",
                    "full_signature": "function test_Bound() public  pure ",
                    "class_method_signature": "StdUtilsTest.test_Bound",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                     BOUND UINT\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_BoundInt",
                    "parameters": "",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function test_BoundInt() public pure {\n        assertEq(bound(-3, 0, 4), 2);\n        assertEq(bound(0, -69, -69), -69);\n        assertEq(bound(0, -69, -68), -68);\n        assertEq(bound(-10, 150, 190), 154);\n        assertEq(bound(-300, 2800, 3200), 2908);\n        assertEq(bound(9999, -1337, 6666), 1995);\n    }",
                    "start": "113",
                    "end": "120",
                    "class": "StdUtilsTest",
                    "signature": " test_BoundInt",
                    "full_signature": "function test_BoundInt() public  pure ",
                    "class_method_signature": "StdUtilsTest.test_BoundInt",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                     BOUND INT\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_BoundPrivateKey",
                    "parameters": "",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function test_BoundPrivateKey() public pure {\n        assertEq(boundPrivateKey(0), 1);\n        assertEq(boundPrivateKey(1), 1);\n        assertEq(boundPrivateKey(300), 300);\n        assertEq(boundPrivateKey(9999), 9999);\n        assertEq(boundPrivateKey(SECP256K1_ORDER - 1), SECP256K1_ORDER - 1);\n        assertEq(boundPrivateKey(SECP256K1_ORDER), 1);\n        assertEq(boundPrivateKey(SECP256K1_ORDER + 1), 2);\n        assertEq(boundPrivateKey(UINT256_MAX), UINT256_MAX & SECP256K1_ORDER - 1); // x&y is equivalent to x-x%y\n    }",
                    "start": "207",
                    "end": "216",
                    "class": "StdUtilsTest",
                    "signature": " test_BoundPrivateKey",
                    "full_signature": "function test_BoundPrivateKey() public  pure ",
                    "class_method_signature": "StdUtilsTest.test_BoundPrivateKey",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                BOUND PRIVATE KEY\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "test_BytesToUint",
                    "parameters": "",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function test_BytesToUint() external pure {\n        bytes memory maxUint = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n        bytes memory two = hex\"02\";\n        bytes memory millionEther = hex\"d3c21bcecceda1000000\";\n\n        assertEq(bytesToUint(maxUint), type(uint256).max);\n        assertEq(bytesToUint(two), 2);\n        assertEq(bytesToUint(millionEther), 1_000_000 ether);\n    }",
                    "start": "222",
                    "end": "230",
                    "class": "StdUtilsTest",
                    "signature": " test_BytesToUint",
                    "full_signature": "function test_BytesToUint() external  pure ",
                    "class_method_signature": "StdUtilsTest.test_BytesToUint",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                   BYTES TO UINT\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "test_ComputeCreateAddress",
                    "parameters": "",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function test_ComputeCreateAddress() external pure {\n        address deployer = 0x6C9FC64A53c1b71FB3f9Af64d1ae3A4931A5f4E9;\n        uint256 nonce = 14;\n        address createAddress = computeCreateAddress(deployer, nonce);\n        assertEq(createAddress, 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\n    }",
                    "start": "245",
                    "end": "250",
                    "class": "StdUtilsTest",
                    "signature": " test_ComputeCreateAddress",
                    "full_signature": "function test_ComputeCreateAddress() external  pure ",
                    "class_method_signature": "StdUtilsTest.test_ComputeCreateAddress",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                               COMPUTE CREATE ADDRESS\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "test_ComputeCreate2Address",
                    "parameters": "",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function test_ComputeCreate2Address() external pure {\n        bytes32 salt = bytes32(uint256(31415));\n        bytes32 initcodeHash = keccak256(abi.encode(0x6080));\n        address deployer = 0x6C9FC64A53c1b71FB3f9Af64d1ae3A4931A5f4E9;\n        address create2Address = computeCreate2Address(salt, initcodeHash, deployer);\n        assertEq(create2Address, 0xB147a5d25748fda14b463EB04B111027C290f4d3);\n    }",
                    "start": "256",
                    "end": "262",
                    "class": "StdUtilsTest",
                    "signature": " test_ComputeCreate2Address",
                    "full_signature": "function test_ComputeCreate2Address() external  pure ",
                    "class_method_signature": "StdUtilsTest.test_ComputeCreate2Address",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                              COMPUTE CREATE2 ADDRESS\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "setUp",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function setUp() public {\n        // All tests of the `getTokenBalances` method are fork tests using live contracts.\n        vm.createSelectFork({urlOrAlias: \"mainnet\", blockNumber: 16_428_900});\n    }",
                    "start": "287",
                    "end": "290",
                    "class": "StdUtilsForkTest",
                    "signature": " setUp",
                    "full_signature": "function setUp() public   ",
                    "class_method_signature": "StdUtilsForkTest.setUp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                  GET TOKEN BALANCES\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/StdCheats.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "deployCodeHelper",
                    "parameters": "string memory what",
                    "modifiers": "",
                    "return": "",
                    "body": "function deployCodeHelper(string memory what) external {\n        deployCode(what);\n    }",
                    "start": "204",
                    "end": "206",
                    "class": "StdCheatsTest",
                    "signature": " deployCodeHelperstring memory what",
                    "full_signature": "function deployCodeHelper(string memory what) external   ",
                    "class_method_signature": "StdCheatsTest.deployCodeHelperstring memory what",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// We need this so we can call \"this.deployCode\" rather than \"deployCode\" directly\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "exposed_assumeNotBlacklisted",
                    "parameters": "address token, address addr",
                    "modifiers": "view",
                    "return": "",
                    "body": "function exposed_assumeNotBlacklisted(address token, address addr) external view {\n        return assumeNotBlacklisted(token, addr);\n    }",
                    "start": "456",
                    "end": "458",
                    "class": "StdCheatsMock",
                    "signature": " exposed_assumeNotBlacklistedaddress token, address addr",
                    "full_signature": "function exposed_assumeNotBlacklisted(address token, address addr) external  view ",
                    "class_method_signature": "StdCheatsMock.exposed_assumeNotBlacklistedaddress token, address addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// We deploy a mock version so we can properly test expected reverts.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "bar",
                    "parameters": "address expectedSender",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function bar(address expectedSender) public payable {\n        require(msg.sender == expectedSender, \"!prank\");\n    }",
                    "start": "528",
                    "end": "530",
                    "class": "Bar",
                    "signature": " baraddress expectedSender",
                    "full_signature": "function bar(address expectedSender) public  payable ",
                    "class_method_signature": "Bar.baraddress expectedSender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// `HOAX` and `CHANGEPRANK` STDCHEATS\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/StdError.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/mocks/MockERC20.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/mocks/MockERC721.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/compilation/CompilationTestBase.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/compilation/CompilationScript.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/compilation/CompilationScriptBase.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/test/compilation/CompilationTest.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/src/Test.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/src/StdCheats.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "assumeNotBlacklisted",
                    "parameters": "address token, address addr",
                    "modifiers": "view",
                    "return": "",
                    "body": "function assumeNotBlacklisted(address token, address addr) internal view virtual {\n        // Nothing to check if `token` is not a contract.\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\");\n\n        bool success;\n        bytes memory returnData;\n\n        // 4-byte selector for `isBlacklisted(address)`, used by USDC.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n\n        // 4-byte selector for `isBlackListed(address)`, used by USDT.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n    }",
                    "start": "209",
                    "end": "227",
                    "class": "StdCheatsSafe",
                    "signature": " assumeNotBlacklistedaddress token, address addr",
                    "full_signature": "function assumeNotBlacklisted(address token, address addr) internal virtual view ",
                    "class_method_signature": "StdCheatsSafe.assumeNotBlacklistedaddress token, address addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Data structures to parse Transaction objects from the broadcast artifact\n// that conform to EIP1559. The Raw structs is what is parsed from the JSON\n// and then converted to the one that is used by the user for better UX.\n// Data structures to parse Transaction objects from the broadcast artifact\n// that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\n// and then converted to the one that is used by the user for better UX.\n// Data structures to parse Receipt objects from the broadcast artifact.\n// The Raw structs is what is parsed from the JSON\n// and then converted to the one that is used by the user for better UX.\n// Data structures to parse the entire broadcast artifact, assuming the\n// transactions conform to EIP1559.\n// Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assumeNoBlacklisted",
                    "parameters": "address token, address addr",
                    "modifiers": "view",
                    "return": "",
                    "body": "function assumeNoBlacklisted(address token, address addr) internal view virtual {\n        assumeNotBlacklisted(token, addr);\n    }",
                    "start": "233",
                    "end": "235",
                    "class": "StdCheatsSafe",
                    "signature": " assumeNoBlacklistedaddress token, address addr",
                    "full_signature": "function assumeNoBlacklisted(address token, address addr) internal virtual view ",
                    "class_method_signature": "StdCheatsSafe.assumeNoBlacklistedaddress token, address addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n// This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for\n// backwards compatibility, since this name was used in the original PR which already has\n// a release. This function can be removed in a future release once we want a breaking change.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_isPayable",
                    "parameters": "address addr",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function _isPayable(address addr) private returns (bool) {\n        require(\n            addr.balance < UINT256_MAX,\n            \"StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds\"\n        );\n        uint256 origBalanceTest = address(this).balance;\n        uint256 origBalanceAddr = address(addr).balance;\n\n        vm.deal(address(this), 1);\n        (bool success,) = payable(addr).call{value: 1}(\"\");\n\n        // reset balances\n        vm.deal(address(this), origBalanceTest);\n        vm.deal(addr, origBalanceAddr);\n\n        return success;\n    }",
                    "start": "284",
                    "end": "300",
                    "class": "StdCheatsSafe",
                    "signature": "returns (bool) _isPayableaddress addr",
                    "full_signature": "function _isPayable(address addr) private   returns (bool)",
                    "class_method_signature": "StdCheatsSafe._isPayableaddress addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// This function checks whether an address, `addr`, is payable. It works by sending 1 wei to\n// `addr` and checking the `success` return value.\n// NOTE: This function may result in state changes depending on the fallback/receive logic\n// implemented by `addr`, which should be taken into account when this function is used.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "assumePayable",
                    "parameters": "address addr",
                    "modifiers": "",
                    "return": "",
                    "body": "function assumePayable(address addr) internal virtual {\n        vm.assume(_isPayable(addr));\n    }",
                    "start": "305",
                    "end": "307",
                    "class": "StdCheatsSafe",
                    "signature": " assumePayableaddress addr",
                    "full_signature": "function assumePayable(address addr) internal virtual  ",
                    "class_method_signature": "StdCheatsSafe.assumePayableaddress addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// NOTE: This function may result in state changes depending on the fallback/receive logic\n// implemented by `addr`, which should be taken into account when this function is used. See the\n// `_isPayable` method for more information.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "readReceipts",
                    "parameters": "string memory path",
                    "modifiers": "view",
                    "return": "returns (Receipt[] memory)",
                    "body": "function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\n        return rawToConvertedReceipts(rawReceipts);\n    }",
                    "start": "425",
                    "end": "430",
                    "class": "StdCheatsSafe",
                    "signature": "returns (Receipt[] memory) readReceiptsstring memory path",
                    "full_signature": "function readReceipts(string memory path) internal virtual view returns (Receipt[] memory)",
                    "class_method_signature": "StdCheatsSafe.readReceiptsstring memory path",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Analogous to readTransactions, but for receipts.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deployCode",
                    "parameters": "string memory what, bytes memory args",
                    "modifiers": "",
                    "return": "returns (address addr)",
                    "body": "function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes): Deployment failed.\");\n    }",
                    "start": "490",
                    "end": "498",
                    "class": "StdCheatsSafe",
                    "signature": "returns (address addr) deployCodestring memory what, bytes memory args",
                    "full_signature": "function deployCode(string memory what, bytes memory args) internal virtual  returns (address addr)",
                    "class_method_signature": "StdCheatsSafe.deployCodestring memory what, bytes memory args",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Deploy a contract by fetching the contract bytecode from\n// the artifacts directory\n// e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deployCode",
                    "parameters": "string memory what, bytes memory args, uint256 val",
                    "modifiers": "",
                    "return": "returns (address addr)",
                    "body": "function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes,uint256): Deployment failed.\");\n    }",
                    "start": "511",
                    "end": "519",
                    "class": "StdCheatsSafe",
                    "signature": "returns (address addr) deployCodestring memory what, bytes memory args, uint256 val",
                    "full_signature": "function deployCode(string memory what, bytes memory args, uint256 val) internal virtual  returns (address addr)",
                    "class_method_signature": "StdCheatsSafe.deployCodestring memory what, bytes memory args, uint256 val",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev deploy contract with value on construction\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "makeAddrAndKey",
                    "parameters": "string memory name",
                    "modifiers": "",
                    "return": "returns (address addr, uint256 privateKey)",
                    "body": "function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\n        addr = vm.addr(privateKey);\n        vm.label(addr, name);\n    }",
                    "start": "532",
                    "end": "536",
                    "class": "StdCheatsSafe",
                    "signature": "returns (address addr, uint256 privateKey) makeAddrAndKeystring memory name",
                    "full_signature": "function makeAddrAndKey(string memory name) internal virtual  returns (address addr, uint256 privateKey)",
                    "class_method_signature": "StdCheatsSafe.makeAddrAndKeystring memory name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// creates a labeled address and the corresponding private key\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "makeAddr",
                    "parameters": "string memory name",
                    "modifiers": "",
                    "return": "returns (address addr)",
                    "body": "function makeAddr(string memory name) internal virtual returns (address addr) {\n        (addr,) = makeAddrAndKey(name);\n    }",
                    "start": "539",
                    "end": "541",
                    "class": "StdCheatsSafe",
                    "signature": "returns (address addr) makeAddrstring memory name",
                    "full_signature": "function makeAddr(string memory name) internal virtual  returns (address addr)",
                    "class_method_signature": "StdCheatsSafe.makeAddrstring memory name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// creates a labeled address\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "destroyAccount",
                    "parameters": "address who, address beneficiary",
                    "modifiers": "",
                    "return": "",
                    "body": "function destroyAccount(address who, address beneficiary) internal virtual {\n        uint256 currBalance = who.balance;\n        vm.etch(who, abi.encode());\n        vm.deal(who, 0);\n        vm.resetNonce(who);\n\n        uint256 beneficiaryBalance = beneficiary.balance;\n        vm.deal(beneficiary, currBalance + beneficiaryBalance);\n    }",
                    "start": "547",
                    "end": "555",
                    "class": "StdCheatsSafe",
                    "signature": " destroyAccountaddress who, address beneficiary",
                    "full_signature": "function destroyAccount(address who, address beneficiary) internal virtual  ",
                    "class_method_signature": "StdCheatsSafe.destroyAccountaddress who, address beneficiary",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Destroys an account immediately, sending the balance to beneficiary.\n// Destroying means: balance will be zero, code will be empty, and nonce will be 0\n// This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce\n// only after tx ends, this will run immediately.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "makeAccount",
                    "parameters": "string memory name",
                    "modifiers": "",
                    "return": "returns (Account memory account)",
                    "body": "function makeAccount(string memory name) internal virtual returns (Account memory account) {\n        (account.addr, account.key) = makeAddrAndKey(name);\n    }",
                    "start": "558",
                    "end": "560",
                    "class": "StdCheatsSafe",
                    "signature": "returns (Account memory account) makeAccountstring memory name",
                    "full_signature": "function makeAccount(string memory name) internal virtual  returns (Account memory account)",
                    "class_method_signature": "StdCheatsSafe.makeAccountstring memory name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// creates a struct containing both a labeled address and the corresponding private key\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_viewChainId",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256 chainId)",
                    "body": "function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }",
                    "start": "619",
                    "end": "626",
                    "class": "StdCheatsSafe",
                    "signature": "returns (uint256 chainId) _viewChainId",
                    "full_signature": "function _viewChainId() private  view returns (uint256 chainId)",
                    "class_method_signature": "StdCheatsSafe._viewChainId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n// compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n// can't simply access the chain ID in a normal view or pure function because the solc View Pure\n// Checker changed `chainid` from pure to view in 0.8.0.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "skip",
                    "parameters": "uint256 time",
                    "modifiers": "",
                    "return": "",
                    "body": "function skip(uint256 time) internal virtual {\n        vm.warp(block.timestamp + time);\n    }",
                    "start": "647",
                    "end": "649",
                    "class": "StdCheats",
                    "signature": " skipuint256 time",
                    "full_signature": "function skip(uint256 time) internal virtual  ",
                    "class_method_signature": "StdCheats.skipuint256 time",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Skip forward or rewind time by the specified number of seconds\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "hoax",
                    "parameters": "address msgSender",
                    "modifiers": "",
                    "return": "",
                    "body": "function hoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender);\n    }",
                    "start": "656",
                    "end": "659",
                    "class": "StdCheats",
                    "signature": " hoaxaddress msgSender",
                    "full_signature": "function hoax(address msgSender) internal virtual  ",
                    "class_method_signature": "StdCheats.hoaxaddress msgSender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Setup a prank from an address that has some ether\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "startHoax",
                    "parameters": "address msgSender",
                    "modifiers": "",
                    "return": "",
                    "body": "function startHoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender);\n    }",
                    "start": "677",
                    "end": "680",
                    "class": "StdCheats",
                    "signature": " startHoaxaddress msgSender",
                    "full_signature": "function startHoax(address msgSender) internal virtual  ",
                    "class_method_signature": "StdCheats.startHoaxaddress msgSender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Start perpetual prank from an address that has some ether\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "startHoax",
                    "parameters": "address msgSender, address origin",
                    "modifiers": "",
                    "return": "",
                    "body": "function startHoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender, origin);\n    }",
                    "start": "689",
                    "end": "692",
                    "class": "StdCheats",
                    "signature": " startHoaxaddress msgSender, address origin",
                    "full_signature": "function startHoax(address msgSender, address origin) internal virtual  ",
                    "class_method_signature": "StdCheats.startHoaxaddress msgSender, address origin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Start perpetual prank from an address that has some ether\n// tx.origin is set to the origin parameter\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deal",
                    "parameters": "address to, uint256 give",
                    "modifiers": "",
                    "return": "",
                    "body": "function deal(address to, uint256 give) internal virtual {\n        vm.deal(to, give);\n    }",
                    "start": "712",
                    "end": "714",
                    "class": "StdCheats",
                    "signature": " dealaddress to, uint256 give",
                    "full_signature": "function deal(address to, uint256 give) internal virtual  ",
                    "class_method_signature": "StdCheats.dealaddress to, uint256 give",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// The same as Vm's `deal`\n// Use the alternative signature for ERC20 tokens\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deal",
                    "parameters": "address token, address to, uint256 give",
                    "modifiers": "",
                    "return": "",
                    "body": "function deal(address token, address to, uint256 give) internal virtual {\n        deal(token, to, give, false);\n    }",
                    "start": "718",
                    "end": "720",
                    "class": "StdCheats",
                    "signature": " dealaddress token, address to, uint256 give",
                    "full_signature": "function deal(address token, address to, uint256 give) internal virtual  ",
                    "class_method_signature": "StdCheats.dealaddress token, address to, uint256 give",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Set the balance of an account for any ERC20 token\n// Use the alternative signature to update `totalSupply`\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "dealERC1155",
                    "parameters": "address token, address to, uint256 id, uint256 give",
                    "modifiers": "",
                    "return": "",
                    "body": "function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\n        dealERC1155(token, to, id, give, false);\n    }",
                    "start": "724",
                    "end": "726",
                    "class": "StdCheats",
                    "signature": " dealERC1155address token, address to, uint256 id, uint256 give",
                    "full_signature": "function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual  ",
                    "class_method_signature": "StdCheats.dealERC1155address token, address to, uint256 id, uint256 give",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Set the balance of an account for any ERC1155 token\n// Use the alternative signature to update `totalSupply`\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "console2_log_StdCheats",
                    "parameters": "string memory p0",
                    "modifiers": "view",
                    "return": "",
                    "body": "function console2_log_StdCheats(string memory p0) private view {\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string)\", p0));\n        status;\n    }",
                    "start": "813",
                    "end": "816",
                    "class": "StdCheats",
                    "signature": " console2_log_StdCheatsstring memory p0",
                    "full_signature": "function console2_log_StdCheats(string memory p0) private  view ",
                    "class_method_signature": "StdCheats.console2_log_StdCheatsstring memory p0",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/src/StdJson.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/safeconsole.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/Script.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/src/StdStyle.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/Vm.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/StdUtils.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_bound",
                    "parameters": "uint256 x, uint256 min, uint256 max",
                    "modifiers": "pure",
                    "return": "returns (uint256 result)",
                    "body": "function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\n        if (x >= min && x <= max) return x;\n\n        uint256 size = max - min + 1;\n\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\n        // This helps ensure coverage of the min/max values.\n        if (x <= 3 && size > x) return min + x;\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\n\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\n        if (x > max) {\n            uint256 diff = x - max;\n            uint256 rem = diff % size;\n            if (rem == 0) return max;\n            result = min + rem - 1;\n        } else if (x < min) {\n            uint256 diff = min - x;\n            uint256 rem = diff % size;\n            if (rem == 0) return min;\n            result = max - rem + 1;\n        }\n    }",
                    "start": "33",
                    "end": "58",
                    "class": "StdUtils",
                    "signature": "returns (uint256 result) _bounduint256 x, uint256 min, uint256 max",
                    "full_signature": "function _bound(uint256 x, uint256 min, uint256 max) internal virtual pure returns (uint256 result)",
                    "class_method_signature": "StdUtils._bounduint256 x, uint256 min, uint256 max",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n// Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n/*//////////////////////////////////////////////////////////////////////////\n                                 INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "computeCreateAddress",
                    "parameters": "address deployer, uint256 nonce",
                    "modifiers": "pure",
                    "return": "returns (address)",
                    "body": "function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\n        console2_log_StdUtils(\"computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.\");\n        return vm.computeCreateAddress(deployer, nonce);\n    }",
                    "start": "101",
                    "end": "104",
                    "class": "StdUtils",
                    "signature": "returns (address) computeCreateAddressaddress deployer, uint256 nonce",
                    "full_signature": "function computeCreateAddress(address deployer, uint256 nonce) internal virtual pure returns (address)",
                    "class_method_signature": "StdUtils.computeCreateAddressaddress deployer, uint256 nonce",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\n/// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "computeCreate2Address",
                    "parameters": "bytes32 salt, bytes32 initCodeHash",
                    "modifiers": "pure",
                    "return": "returns (address)",
                    "body": "function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initCodeHash);\n    }",
                    "start": "117",
                    "end": "120",
                    "class": "StdUtils",
                    "signature": "returns (address) computeCreate2Addressbytes32 salt, bytes32 initCodeHash",
                    "full_signature": "function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal  pure returns (address)",
                    "class_method_signature": "StdUtils.computeCreate2Addressbytes32 salt, bytes32 initCodeHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deployMockERC20",
                    "parameters": "string memory name, string memory symbol, uint8 decimals",
                    "modifiers": "",
                    "return": "returns (MockERC20 mock)",
                    "body": "function deployMockERC20(string memory name, string memory symbol, uint8 decimals)\n        internal\n        returns (MockERC20 mock)\n    {\n        mock = new MockERC20();\n        mock.initialize(name, symbol, decimals);\n    }",
                    "start": "123",
                    "end": "129",
                    "class": "StdUtils",
                    "signature": "returns (MockERC20 mock) deployMockERC20string memory name, string memory symbol, uint8 decimals",
                    "full_signature": "function deployMockERC20(string memory name, string memory symbol, uint8 decimals) internal   returns (MockERC20 mock)",
                    "class_method_signature": "StdUtils.deployMockERC20string memory name, string memory symbol, uint8 decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev returns an initialized mock ERC20 contract\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "deployMockERC721",
                    "parameters": "string memory name, string memory symbol",
                    "modifiers": "",
                    "return": "returns (MockERC721 mock)",
                    "body": "function deployMockERC721(string memory name, string memory symbol) internal returns (MockERC721 mock) {\n        mock = new MockERC721();\n        mock.initialize(name, symbol);\n    }",
                    "start": "132",
                    "end": "135",
                    "class": "StdUtils",
                    "signature": "returns (MockERC721 mock) deployMockERC721string memory name, string memory symbol",
                    "full_signature": "function deployMockERC721(string memory name, string memory symbol) internal   returns (MockERC721 mock)",
                    "class_method_signature": "StdUtils.deployMockERC721string memory name, string memory symbol",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev returns an initialized mock ERC721 contract\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "hashInitCode",
                    "parameters": "bytes memory creationCode",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\n        return hashInitCode(creationCode, \"\");\n    }",
                    "start": "139",
                    "end": "141",
                    "class": "StdUtils",
                    "signature": "returns (bytes32) hashInitCodebytes memory creationCode",
                    "full_signature": "function hashInitCode(bytes memory creationCode) internal  pure returns (bytes32)",
                    "class_method_signature": "StdUtils.hashInitCodebytes memory creationCode",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\n/// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "hashInitCode",
                    "parameters": "bytes memory creationCode, bytes memory args",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creationCode, args));\n    }",
                    "start": "146",
                    "end": "148",
                    "class": "StdUtils",
                    "signature": "returns (bytes32) hashInitCodebytes memory creationCode, bytes memory args",
                    "full_signature": "function hashInitCode(bytes memory creationCode, bytes memory args) internal  pure returns (bytes32)",
                    "class_method_signature": "StdUtils.hashInitCodebytes memory creationCode, bytes memory args",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\n/// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n/// @param args the ABI-encoded arguments to the constructor of C\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "getTokenBalances",
                    "parameters": "address token, address[] memory addresses",
                    "modifiers": "",
                    "return": "returns (uint256[] memory balances)",
                    "body": "function getTokenBalances(address token, address[] memory addresses)\n        internal\n        virtual\n        returns (uint256[] memory balances)\n    {\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\n\n        // ABI encode the aggregate call to Multicall3.\n        uint256 length = addresses.length;\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\n        }\n\n        // Make the aggregate call.\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\n\n        // ABI decode the return data and return the balances.\n        balances = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            balances[i] = abi.decode(returnData[i], (uint256));\n        }\n    }",
                    "start": "151",
                    "end": "178",
                    "class": "StdUtils",
                    "signature": "returns (uint256[] memory balances) getTokenBalancesaddress token, address[] memory addresses",
                    "full_signature": "function getTokenBalances(address token, address[] memory addresses) internal virtual  returns (uint256[] memory balances)",
                    "class_method_signature": "StdUtils.getTokenBalancesaddress token, address[] memory addresses",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "addressFromLast20Bytes",
                    "parameters": "bytes32 bytesValue",
                    "modifiers": "pure",
                    "return": "returns (address)",
                    "body": "function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }",
                    "start": "184",
                    "end": "186",
                    "class": "StdUtils",
                    "signature": "returns (address) addressFromLast20Bytesbytes32 bytesValue",
                    "full_signature": "function addressFromLast20Bytes(bytes32 bytesValue) private  pure returns (address)",
                    "class_method_signature": "StdUtils.addressFromLast20Bytesbytes32 bytesValue",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////////////////\n                                 PRIVATE FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_castLogPayloadViewToPure",
                    "parameters": "function(bytes memory) internal view fnIn",
                    "modifiers": "pure",
                    "return": "returns (function(bytes memory) internal pure fnOut)",
                    "body": "function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)\n        internal\n        pure\n        returns (function(bytes memory) internal pure fnOut)\n    {\n        assembly {\n            fnOut := fnIn\n        }\n    }",
                    "start": "191",
                    "end": "199",
                    "class": "StdUtils",
                    "signature": "returns (function(bytes memory) internal pure fnOut) _castLogPayloadViewToPurefunction(bytes memory) internal view fnIn",
                    "full_signature": "function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn) internal  pure returns (function(bytes memory) internal pure fnOut)",
                    "class_method_signature": "StdUtils._castLogPayloadViewToPurefunction(bytes memory) internal view fnIn",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// This section is used to prevent the compilation of console, which shortens the compilation time when console is\n// not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid\n// any breaking changes to function signatures.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/src/StdStorage.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/StdInvariant.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "excludeContract",
                    "parameters": "address newExcludedContract_",
                    "modifiers": "",
                    "return": "",
                    "body": "function excludeContract(address newExcludedContract_) internal {\n        _excludedContracts.push(newExcludedContract_);\n    }",
                    "start": "40",
                    "end": "42",
                    "class": "StdInvariant",
                    "signature": " excludeContractaddress newExcludedContract_",
                    "full_signature": "function excludeContract(address newExcludedContract_) internal   ",
                    "class_method_signature": "StdInvariant.excludeContractaddress newExcludedContract_",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Functions for users:\n// These are intended to be called in tests.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "excludeArtifacts",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string[] memory excludedArtifacts_)",
                    "body": "function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }",
                    "start": "83",
                    "end": "85",
                    "class": "StdInvariant",
                    "signature": "returns (string[] memory excludedArtifacts_) excludeArtifacts",
                    "full_signature": "function excludeArtifacts() public  view returns (string[] memory excludedArtifacts_)",
                    "class_method_signature": "StdInvariant.excludeArtifacts",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Functions for forge:\n// These are called by forge to run invariant tests and don't need to be called in tests.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/src/StdChains.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "getChain",
                    "parameters": "string memory chainAlias",
                    "modifiers": "",
                    "return": "returns (Chain memory chain)",
                    "body": "function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\n        require(bytes(chainAlias).length != 0, \"StdChains getChain(string): Chain alias cannot be the empty string.\");\n\n        initializeStdChains();\n        chain = chains[chainAlias];\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(string): Chain with alias \\\"\", chainAlias, \"\\\" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }",
                    "start": "69",
                    "end": "80",
                    "class": "StdChains",
                    "signature": "returns (Chain memory chain) getChainstring memory chainAlias",
                    "full_signature": "function getChain(string memory chainAlias) internal virtual  returns (Chain memory chain)",
                    "class_method_signature": "StdChains.getChainstring memory chainAlias",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\n// Maps from the chain's alias to it's default RPC URL.\n// Maps from a chain ID to it's alias.\n// The RPC URL will be fetched from config or defaultRpcUrls if possible.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "setChain",
                    "parameters": "string memory chainAlias, ChainData memory chain",
                    "modifiers": "",
                    "return": "",
                    "body": "function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\n        require(\n            bytes(chainAlias).length != 0,\n            \"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\"\n        );\n\n        require(chain.chainId != 0, \"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\n\n        initializeStdChains();\n        string memory foundAlias = idToAlias[chain.chainId];\n\n        require(\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\n            string(\n                abi.encodePacked(\n                    \"StdChains setChain(string,ChainData): Chain ID \",\n                    vm.toString(chain.chainId),\n                    \" already used by \\\"\",\n                    foundAlias,\n                    \"\\\".\"\n                )\n            )\n        );\n\n        uint256 oldChainId = chains[chainAlias].chainId;\n        delete idToAlias[oldChainId];\n\n        chains[chainAlias] =\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\n        idToAlias[chain.chainId] = chainAlias;\n    }",
                    "start": "98",
                    "end": "128",
                    "class": "StdChains",
                    "signature": " setChainstring memory chainAlias, ChainData memory chain",
                    "full_signature": "function setChain(string memory chainAlias, ChainData memory chain) internal virtual  ",
                    "class_method_signature": "StdChains.setChainstring memory chainAlias, ChainData memory chain",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// set chain info, with priority to argument's rpcUrl field.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "setChain",
                    "parameters": "string memory chainAlias, Chain memory chain",
                    "modifiers": "",
                    "return": "",
                    "body": "function setChain(string memory chainAlias, Chain memory chain) internal virtual {\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\n    }",
                    "start": "131",
                    "end": "133",
                    "class": "StdChains",
                    "signature": " setChainstring memory chainAlias, Chain memory chain",
                    "full_signature": "function setChain(string memory chainAlias, Chain memory chain) internal virtual  ",
                    "class_method_signature": "StdChains.setChainstring memory chainAlias, Chain memory chain",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// set chain info, with priority to argument's rpcUrl field.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "getChainWithUpdatedRpcUrl",
                    "parameters": "string memory chainAlias, Chain memory chain",
                    "modifiers": "view",
                    "return": "returns (Chain memory)",
                    "body": "function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain)\n        private\n        view\n        returns (Chain memory)\n    {\n        if (bytes(chain.rpcUrl).length == 0) {\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\n                chain.rpcUrl = configRpcUrl;\n            } catch (bytes memory err) {\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \"_RPC_URL\"));\n                if (fallbackToDefaultRpcUrls) {\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\n                } else {\n                    chain.rpcUrl = vm.envString(envName);\n                }\n                // Distinguish 'not found' from 'cannot read'\n                // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions\n                bytes memory oldNotFoundError =\n                    abi.encodeWithSignature(\"CheatCodeError\", string(abi.encodePacked(\"invalid rpc url \", chainAlias)));\n                bytes memory newNotFoundError = abi.encodeWithSignature(\n                    \"CheatcodeError(string)\", string(abi.encodePacked(\"invalid rpc url: \", chainAlias))\n                );\n                bytes32 errHash = keccak256(err);\n                if (\n                    (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))\n                        || bytes(chain.rpcUrl).length == 0\n                ) {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, err), mload(err))\n                    }\n                }\n            }\n        }\n        return chain;\n    }",
                    "start": "151",
                    "end": "186",
                    "class": "StdChains",
                    "signature": "returns (Chain memory) getChainWithUpdatedRpcUrlstring memory chainAlias, Chain memory chain",
                    "full_signature": "function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain) private  view returns (Chain memory)",
                    "class_method_signature": "StdChains.getChainWithUpdatedRpcUrlstring memory chainAlias, Chain memory chain",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// lookup rpcUrl, in descending order of priority:\n// current -> config (foundry.toml) -> environment variable -> default\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "setChainWithDefaultRpcUrl",
                    "parameters": "string memory chainAlias, ChainData memory chain",
                    "modifiers": "",
                    "return": "",
                    "body": "function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\n        string memory rpcUrl = chain.rpcUrl;\n        defaultRpcUrls[chainAlias] = rpcUrl;\n        chain.rpcUrl = \"\";\n        setChain(chainAlias, chain);\n        chain.rpcUrl = rpcUrl; // restore argument\n    }",
                    "start": "256",
                    "end": "262",
                    "class": "StdChains",
                    "signature": " setChainWithDefaultRpcUrlstring memory chainAlias, ChainData memory chain",
                    "full_signature": "function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private   ",
                    "class_method_signature": "StdChains.setChainWithDefaultRpcUrlstring memory chainAlias, ChainData memory chain",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// set chain info, with priority to chainAlias' rpc url in foundry.toml\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/src/StdToml.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/console.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/console2.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/StdMath.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/StdError.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/Base.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/src/StdAssertions.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "assertEqUint",
                    "parameters": "uint256 left, uint256 right",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function assertEqUint(uint256 left, uint256 right) internal pure virtual {\n        assertEq(left, right);\n    }",
                    "start": "204",
                    "end": "206",
                    "class": "StdAssertions",
                    "signature": " assertEqUintuint256 left, uint256 right",
                    "full_signature": "function assertEqUint(uint256 left, uint256 right) internal virtual pure ",
                    "class_method_signature": "StdAssertions.assertEqUintuint256 left, uint256 right",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Legacy helper\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assertApproxEqRel",
                    "parameters": "uint256 left, uint256 right, uint256 maxPercentDelta",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function assertApproxEqRel(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta);\n    }",
                    "start": "530",
                    "end": "536",
                    "class": "StdAssertions",
                    "signature": " assertApproxEqReluint256 left, uint256 right, uint256 maxPercentDelta",
                    "full_signature": "function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) internal virtual pure ",
                    "class_method_signature": "StdAssertions.assertApproxEqReluint256 left, uint256 right, uint256 maxPercentDelta",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'// An 18 decimal fixed point number, where 1e18 == 100%'",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assertApproxEqRel",
                    "parameters": "uint256 left, uint256 right, uint256 maxPercentDelta, string memory err",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function assertApproxEqRel(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta, err);\n    }",
                    "start": "538",
                    "end": "545",
                    "class": "StdAssertions",
                    "signature": " assertApproxEqReluint256 left, uint256 right, uint256 maxPercentDelta, string memory err",
                    "full_signature": "function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string memory err) internal virtual pure ",
                    "class_method_signature": "StdAssertions.assertApproxEqReluint256 left, uint256 right, uint256 maxPercentDelta, string memory err",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'// An 18 decimal fixed point number, where 1e18 == 100%'",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assertApproxEqRelDecimal",
                    "parameters": "uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);\n    }",
                    "start": "547",
                    "end": "554",
                    "class": "StdAssertions",
                    "signature": " assertApproxEqRelDecimaluint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals",
                    "full_signature": "function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals) internal virtual pure ",
                    "class_method_signature": "StdAssertions.assertApproxEqRelDecimaluint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'// An 18 decimal fixed point number, where 1e18 == 100%'",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assertApproxEqRelDecimal",
                    "parameters": "uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string memory err",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals,\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);\n    }",
                    "start": "556",
                    "end": "564",
                    "class": "StdAssertions",
                    "signature": " assertApproxEqRelDecimaluint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string memory err",
                    "full_signature": "function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string memory err) internal virtual pure ",
                    "class_method_signature": "StdAssertions.assertApproxEqRelDecimaluint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string memory err",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'// An 18 decimal fixed point number, where 1e18 == 100%'",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assertApproxEqRel",
                    "parameters": "int256 left, int256 right, uint256 maxPercentDelta, string memory err",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function assertApproxEqRel(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRel(left, right, maxPercentDelta, err);\n    }",
                    "start": "570",
                    "end": "577",
                    "class": "StdAssertions",
                    "signature": " assertApproxEqRelint256 left, int256 right, uint256 maxPercentDelta, string memory err",
                    "full_signature": "function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string memory err) internal virtual pure ",
                    "class_method_signature": "StdAssertions.assertApproxEqRelint256 left, int256 right, uint256 maxPercentDelta, string memory err",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'// An 18 decimal fixed point number, where 1e18 == 100%'",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assertApproxEqRelDecimal",
                    "parameters": "int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals);\n    }",
                    "start": "579",
                    "end": "586",
                    "class": "StdAssertions",
                    "signature": " assertApproxEqRelDecimalint256 left, int256 right, uint256 maxPercentDelta, uint256 decimals",
                    "full_signature": "function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals) internal virtual pure ",
                    "class_method_signature": "StdAssertions.assertApproxEqRelDecimalint256 left, int256 right, uint256 maxPercentDelta, uint256 decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'// An 18 decimal fixed point number, where 1e18 == 100%'",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "assertApproxEqRelDecimal",
                    "parameters": "int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string memory err",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals,\n        string memory err\n    ) internal pure virtual {\n        vm.assertApproxEqRelDecimal(left, right, maxPercentDelta, decimals, err);\n    }",
                    "start": "588",
                    "end": "596",
                    "class": "StdAssertions",
                    "signature": " assertApproxEqRelDecimalint256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string memory err",
                    "full_signature": "function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string memory err) internal virtual pure ",
                    "class_method_signature": "StdAssertions.assertApproxEqRelDecimalint256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string memory err",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'// An 18 decimal fixed point number, where 1e18 == 100%'",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "checkEq0",
                    "parameters": "bytes memory left, bytes memory right",
                    "modifiers": "pure",
                    "return": "returns (bool)",
                    "body": "function checkEq0(bytes memory left, bytes memory right) internal pure returns (bool) {\n        return keccak256(left) == keccak256(right);\n    }",
                    "start": "599",
                    "end": "601",
                    "class": "StdAssertions",
                    "signature": "returns (bool) checkEq0bytes memory left, bytes memory right",
                    "full_signature": "function checkEq0(bytes memory left, bytes memory right) internal  pure returns (bool)",
                    "class_method_signature": "StdAssertions.checkEq0bytes memory left, bytes memory right",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Inherited from DSTest, not used but kept for backwards-compatibility\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/src/interfaces/IERC165.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/interfaces/IERC20.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/interfaces/IERC721.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/interfaces/IERC4626.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/interfaces/IERC1155.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/interfaces/IMulticall3.sol": [],
    "/root/openzeppelin-contracts/lib/forge-std/src/mocks/MockERC20.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "name",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function name() external view override returns (string memory) {\n        return _name;\n    }",
                    "start": "19",
                    "end": "21",
                    "class": "MockERC20",
                    "signature": "returns (string memory) name",
                    "full_signature": "function name() external  override returns (string memory)",
                    "class_method_signature": "MockERC20.name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "totalSupply",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }",
                    "start": "41",
                    "end": "43",
                    "class": "MockERC20",
                    "signature": "returns (uint256) totalSupply",
                    "full_signature": "function totalSupply() external  override returns (uint256)",
                    "class_method_signature": "MockERC20.totalSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "initialize",
                    "parameters": "string memory name_, string memory symbol_, uint8 decimals_",
                    "modifiers": "",
                    "return": "",
                    "body": "function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n\n        INITIAL_CHAIN_ID = _pureChainId();\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n\n        initialized = true;\n    }",
                    "start": "72",
                    "end": "83",
                    "class": "MockERC20",
                    "signature": " initializestring memory name_, string memory symbol_, uint8 decimals_",
                    "full_signature": "function initialize(string memory name_, string memory symbol_, uint8 decimals_) public   ",
                    "class_method_signature": "MockERC20.initializestring memory name_, string memory symbol_, uint8 decimals_",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n/*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n/// @dev A bool to track whether the contract has been initialized.\n/// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n/// syntaxes, we add an initialization function that can be called only once.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "approve",
                    "parameters": "address spender, uint256 amount",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }",
                    "start": "89",
                    "end": "95",
                    "class": "MockERC20",
                    "signature": "returns (bool) approveaddress spender, uint256 amount",
                    "full_signature": "function approve(address spender, uint256 amount) public virtual override returns (bool)",
                    "class_method_signature": "MockERC20.approveaddress spender, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "permit",
                    "parameters": "address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "modifiers": "",
                    "return": "",
                    "body": "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        public\n        virtual\n    {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        address recoveredAddress = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                            ),\n                            owner,\n                            spender,\n                            value,\n                            nonces[owner]++,\n                            deadline\n                        )\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n        _allowance[recoveredAddress][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }",
                    "start": "123",
                    "end": "158",
                    "class": "MockERC20",
                    "signature": " permitaddress owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "full_signature": "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual  ",
                    "class_method_signature": "MockERC20.permitaddress owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_mint",
                    "parameters": "address to, uint256 amount",
                    "modifiers": "",
                    "return": "",
                    "body": "function _mint(address to, uint256 amount) internal virtual {\n        _totalSupply = _add(_totalSupply, amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(address(0), to, amount);\n    }",
                    "start": "180",
                    "end": "185",
                    "class": "MockERC20",
                    "signature": " _mintaddress to, uint256 amount",
                    "full_signature": "function _mint(address to, uint256 amount) internal virtual  ",
                    "class_method_signature": "MockERC20._mintaddress to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_add",
                    "parameters": "uint256 a, uint256 b",
                    "modifiers": "pure",
                    "return": "returns (uint256)",
                    "body": "function _add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ERC20: addition overflow\");\n        return c;\n    }",
                    "start": "198",
                    "end": "202",
                    "class": "MockERC20",
                    "signature": "returns (uint256) _adduint256 a, uint256 b",
                    "full_signature": "function _add(uint256 a, uint256 b) internal  pure returns (uint256)",
                    "class_method_signature": "MockERC20._adduint256 a, uint256 b",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MATH LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_viewChainId",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256 chainId)",
                    "body": "function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }",
                    "start": "217",
                    "end": "224",
                    "class": "MockERC20",
                    "signature": "returns (uint256 chainId) _viewChainId",
                    "full_signature": "function _viewChainId() private  view returns (uint256 chainId)",
                    "class_method_signature": "MockERC20._viewChainId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n// We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n// compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n// can't simply access the chain ID in a normal view or pure function because the solc View Pure\n// Checker changed `chainid` from pure to view in 0.8.0.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/lib/forge-std/src/mocks/MockERC721.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "name",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function name() external view override returns (string memory) {\n        return _name;\n    }",
                    "start": "17",
                    "end": "19",
                    "class": "MockERC721",
                    "signature": "returns (string memory) name",
                    "full_signature": "function name() external  override returns (string memory)",
                    "class_method_signature": "MockERC721.name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "ownerOf",
                    "parameters": "uint256 id",
                    "modifiers": "override",
                    "return": "returns (address owner)",
                    "body": "function ownerOf(uint256 id) public view virtual override returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }",
                    "start": "35",
                    "end": "37",
                    "class": "MockERC721",
                    "signature": "returns (address owner) ownerOfuint256 id",
                    "full_signature": "function ownerOf(uint256 id) public virtual override returns (address owner)",
                    "class_method_signature": "MockERC721.ownerOfuint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getApproved",
                    "parameters": "uint256 id",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function getApproved(uint256 id) public view virtual override returns (address) {\n        return _getApproved[id];\n    }",
                    "start": "53",
                    "end": "55",
                    "class": "MockERC721",
                    "signature": "returns (address) getApproveduint256 id",
                    "full_signature": "function getApproved(uint256 id) public virtual override returns (address)",
                    "class_method_signature": "MockERC721.getApproveduint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "initialize",
                    "parameters": "string memory name_, string memory symbol_",
                    "modifiers": "",
                    "return": "",
                    "body": "function initialize(string memory name_, string memory symbol_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n\n        initialized = true;\n    }",
                    "start": "70",
                    "end": "77",
                    "class": "MockERC721",
                    "signature": " initializestring memory name_, string memory symbol_",
                    "full_signature": "function initialize(string memory name_, string memory symbol_) public   ",
                    "class_method_signature": "MockERC721.initializestring memory name_, string memory symbol_",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n/// @dev A bool to track whether the contract has been initialized.\n/// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n/// syntaxes, we add an initialization function that can be called only once.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "approve",
                    "parameters": "address spender, uint256 id",
                    "modifiers": "override",
                    "return": "",
                    "body": "function approve(address spender, uint256 id) public payable virtual override {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || _isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        _getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }",
                    "start": "83",
                    "end": "91",
                    "class": "MockERC721",
                    "signature": " approveaddress spender, uint256 id",
                    "full_signature": "function approve(address spender, uint256 id) public virtual override ",
                    "class_method_signature": "MockERC721.approveaddress spender, uint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }",
                    "start": "153",
                    "end": "157",
                    "class": "MockERC721",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override returns (bool)",
                    "class_method_signature": "MockERC721.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_mint",
                    "parameters": "address to, uint256 id",
                    "modifiers": "",
                    "return": "",
                    "body": "function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }",
                    "start": "163",
                    "end": "175",
                    "class": "MockERC721",
                    "signature": " _mintaddress to, uint256 id",
                    "full_signature": "function _mint(address to, uint256 id) internal virtual  ",
                    "class_method_signature": "MockERC721._mintaddress to, uint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_safeMint",
                    "parameters": "address to, uint256 id",
                    "modifiers": "",
                    "return": "",
                    "body": "function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }",
                    "start": "195",
                    "end": "204",
                    "class": "MockERC721",
                    "signature": " _safeMintaddress to, uint256 id",
                    "full_signature": "function _safeMint(address to, uint256 id) internal virtual  ",
                    "class_method_signature": "MockERC721._safeMintaddress to, uint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_isContract",
                    "parameters": "address _addr",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isContract(address _addr) private view returns (bool) {\n        uint256 codeLength;\n\n        // Assembly required for versions < 0.8.0 to check extcodesize.\n        assembly {\n            codeLength := extcodesize(_addr)\n        }\n\n        return codeLength > 0;\n    }",
                    "start": "221",
                    "end": "230",
                    "class": "MockERC721",
                    "signature": "returns (bool) _isContractaddress _addr",
                    "full_signature": "function _isContract(address _addr) private  view returns (bool)",
                    "class_method_signature": "MockERC721._isContractaddress _addr",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/test/utils/Create2.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/test/utils/Packing.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/test/utils/Strings.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/test/utils/ShortStrings.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_assertRoundtripShort",
                    "parameters": "string memory input",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function _assertRoundtripShort(string memory input) internal pure {\n        ShortString short = ShortStrings.toShortString(input);\n        string memory output = ShortStrings.toString(short);\n        assertEq(input, output);\n    }",
                    "start": "69",
                    "end": "73",
                    "class": "ShortStringsTest",
                    "signature": " _assertRoundtripShortstring memory input",
                    "full_signature": "function _assertRoundtripShort(string memory input) internal  pure ",
                    "class_method_signature": "ShortStringsTest._assertRoundtripShortstring memory input",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// Assertions\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "toShortString",
                    "parameters": "string memory input",
                    "modifiers": "pure",
                    "return": "returns (ShortString)",
                    "body": "function toShortString(string memory input) external pure returns (ShortString) {\n        return ShortStrings.toShortString(input);\n    }",
                    "start": "102",
                    "end": "104",
                    "class": "ShortStringsTest",
                    "signature": "returns (ShortString) toShortStringstring memory input",
                    "full_signature": "function toShortString(string memory input) external  pure returns (ShortString)",
                    "class_method_signature": "ShortStringsTest.toShortStringstring memory input",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// Helpers\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/test/utils/Arrays.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_assertSort",
                    "parameters": "uint256[] memory values",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function _assertSort(uint256[] memory values) internal pure {\n        for (uint256 i = 1; i < values.length; ++i) {\n            assertLe(values[i - 1], values[i]);\n        }\n    }",
                    "start": "26",
                    "end": "30",
                    "class": "ArraysTest",
                    "signature": " _assertSortuint256[] memory values",
                    "full_signature": "function _assertSort(uint256[] memory values) internal  pure ",
                    "class_method_signature": "ArraysTest._assertSortuint256[] memory values",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// Asserts\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/test/utils/Base64.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/test/utils/SlotDerivation.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/test/utils/cryptography/P256.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "testVerify",
                    "parameters": "bytes32 digest, uint256 seed",
                    "modifiers": "view",
                    "return": "",
                    "body": "function testVerify(bytes32 digest, uint256 seed) public view {\n        uint256 privateKey = _asPrivateKey(seed);\n\n        (uint256 x, uint256 y) = vm.publicKeyP256(privateKey);\n        (bytes32 r, bytes32 s) = vm.signP256(privateKey, digest);\n        s = _ensureLowerS(s);\n        assertTrue(P256.verify(digest, r, s, bytes32(x), bytes32(y)));\n        assertTrue(P256.verifySolidity(digest, r, s, bytes32(x), bytes32(y)));\n    }",
                    "start": "12",
                    "end": "20",
                    "class": "P256Test",
                    "signature": " testVerifybytes32 digest, uint256 seed",
                    "full_signature": "function testVerify(bytes32 digest, uint256 seed) public  view ",
                    "class_method_signature": "P256Test.testVerifybytes32 digest, uint256 seed",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/// forge-config: default.fuzz.runs = 512\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testRecover",
                    "parameters": "bytes32 digest, uint256 seed",
                    "modifiers": "view",
                    "return": "",
                    "body": "function testRecover(bytes32 digest, uint256 seed) public view {\n        uint256 privateKey = _asPrivateKey(seed);\n\n        (uint256 x, uint256 y) = vm.publicKeyP256(privateKey);\n        (bytes32 r, bytes32 s) = vm.signP256(privateKey, digest);\n        s = _ensureLowerS(s);\n        (bytes32 qx0, bytes32 qy0) = P256.recovery(digest, 0, r, s);\n        (bytes32 qx1, bytes32 qy1) = P256.recovery(digest, 1, r, s);\n        assertTrue((qx0 == bytes32(x) && qy0 == bytes32(y)) || (qx1 == bytes32(x) && qy1 == bytes32(y)));\n    }",
                    "start": "23",
                    "end": "32",
                    "class": "P256Test",
                    "signature": " testRecoverbytes32 digest, uint256 seed",
                    "full_signature": "function testRecover(bytes32 digest, uint256 seed) public  view ",
                    "class_method_signature": "P256Test.testRecoverbytes32 digest, uint256 seed",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/// forge-config: default.fuzz.runs = 512\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/test/utils/math/Math.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "testSymbolicMinMax",
                    "parameters": "uint256 a, uint256 b",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testSymbolicMinMax(uint256 a, uint256 b) public pure {\n        assertEq(Math.min(a, b), a < b ? a : b);\n        assertEq(Math.max(a, b), a > b ? a : b);\n    }",
                    "start": "15",
                    "end": "18",
                    "class": "MathTest",
                    "signature": " testSymbolicMinMaxuint256 a, uint256 b",
                    "full_signature": "function testSymbolicMinMax(uint256 a, uint256 b) public  pure ",
                    "class_method_signature": "MathTest.testSymbolicMinMaxuint256 a, uint256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MIN & MAX\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testCeilDiv",
                    "parameters": "uint256 a, uint256 b",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testCeilDiv(uint256 a, uint256 b) public pure {\n        vm.assume(b > 0);\n\n        uint256 result = Math.ceilDiv(a, b);\n\n        if (result == 0) {\n            assertEq(a, 0);\n        } else {\n            uint256 expect = a / b;\n            if (expect * b < a) {\n                expect += 1;\n            }\n            assertEq(result, expect);\n        }\n    }",
                    "start": "21",
                    "end": "35",
                    "class": "MathTest",
                    "signature": " testCeilDivuint256 a, uint256 b",
                    "full_signature": "function testCeilDiv(uint256 a, uint256 b) public  pure ",
                    "class_method_signature": "MathTest.testCeilDivuint256 a, uint256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// CEILDIV\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testSqrt",
                    "parameters": "uint256 input, uint8 r",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testSqrt(uint256 input, uint8 r) public pure {\n        Math.Rounding rounding = _asRounding(r);\n\n        uint256 result = Math.sqrt(input, rounding);\n\n        // square of result is bigger than input\n        if (_squareBigger(result, input)) {\n            assertTrue(Math.unsignedRoundsUp(rounding));\n            assertTrue(_squareSmaller(result - 1, input));\n        }\n        // square of result is smaller than input\n        else if (_squareSmaller(result, input)) {\n            assertFalse(Math.unsignedRoundsUp(rounding));\n            assertTrue(_squareBigger(result + 1, input));\n        }\n        // input is perfect square\n        else {\n            assertEq(result * result, input);\n        }\n    }",
                    "start": "38",
                    "end": "57",
                    "class": "MathTest",
                    "signature": " testSqrtuint256 input, uint8 r",
                    "full_signature": "function testSqrt(uint256 input, uint8 r) public  pure ",
                    "class_method_signature": "MathTest.testSqrtuint256 input, uint8 r",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// SQRT\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testInvMod",
                    "parameters": "uint256 value, uint256 p",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testInvMod(uint256 value, uint256 p) public pure {\n        _testInvMod(value, p, true);\n    }",
                    "start": "69",
                    "end": "71",
                    "class": "MathTest",
                    "signature": " testInvModuint256 value, uint256 p",
                    "full_signature": "function testInvMod(uint256 value, uint256 p) public  pure ",
                    "class_method_signature": "MathTest.testInvModuint256 value, uint256 p",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// INV\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testLog2",
                    "parameters": "uint256 input, uint8 r",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testLog2(uint256 input, uint8 r) public pure {\n        Math.Rounding rounding = _asRounding(r);\n\n        uint256 result = Math.log2(input, rounding);\n\n        if (input == 0) {\n            assertEq(result, 0);\n        } else if (_powerOf2Bigger(result, input)) {\n            assertTrue(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf2Smaller(result - 1, input));\n        } else if (_powerOf2Smaller(result, input)) {\n            assertFalse(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf2Bigger(result + 1, input));\n        } else {\n            assertEq(2 ** result, input);\n        }\n    }",
                    "start": "104",
                    "end": "120",
                    "class": "MathTest",
                    "signature": " testLog2uint256 input, uint8 r",
                    "full_signature": "function testLog2(uint256 input, uint8 r) public  pure ",
                    "class_method_signature": "MathTest.testLog2uint256 input, uint8 r",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// LOG2\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testLog10",
                    "parameters": "uint256 input, uint8 r",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testLog10(uint256 input, uint8 r) public pure {\n        Math.Rounding rounding = _asRounding(r);\n\n        uint256 result = Math.log10(input, rounding);\n\n        if (input == 0) {\n            assertEq(result, 0);\n        } else if (_powerOf10Bigger(result, input)) {\n            assertTrue(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf10Smaller(result - 1, input));\n        } else if (_powerOf10Smaller(result, input)) {\n            assertFalse(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf10Bigger(result + 1, input));\n        } else {\n            assertEq(10 ** result, input);\n        }\n    }",
                    "start": "131",
                    "end": "147",
                    "class": "MathTest",
                    "signature": " testLog10uint256 input, uint8 r",
                    "full_signature": "function testLog10(uint256 input, uint8 r) public  pure ",
                    "class_method_signature": "MathTest.testLog10uint256 input, uint8 r",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// LOG10\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testLog256",
                    "parameters": "uint256 input, uint8 r",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testLog256(uint256 input, uint8 r) public pure {\n        Math.Rounding rounding = _asRounding(r);\n\n        uint256 result = Math.log256(input, rounding);\n\n        if (input == 0) {\n            assertEq(result, 0);\n        } else if (_powerOf256Bigger(result, input)) {\n            assertTrue(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf256Smaller(result - 1, input));\n        } else if (_powerOf256Smaller(result, input)) {\n            assertFalse(Math.unsignedRoundsUp(rounding));\n            assertTrue(_powerOf256Bigger(result + 1, input));\n        } else {\n            assertEq(256 ** result, input);\n        }\n    }",
                    "start": "158",
                    "end": "174",
                    "class": "MathTest",
                    "signature": " testLog256uint256 input, uint8 r",
                    "full_signature": "function testLog256(uint256 input, uint8 r) public  pure ",
                    "class_method_signature": "MathTest.testLog256uint256 input, uint8 r",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// LOG256\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testMulDiv",
                    "parameters": "uint256 x, uint256 y, uint256 d",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testMulDiv(uint256 x, uint256 y, uint256 d) public pure {\n        // Full precision for x * y\n        (uint256 xyHi, uint256 xyLo) = _mulHighLow(x, y);\n\n        // Assume result won't overflow (see {testMulDivDomain})\n        // This also checks that `d` is positive\n        vm.assume(xyHi < d);\n\n        // Perform muldiv\n        uint256 q = Math.mulDiv(x, y, d);\n\n        // Full precision for q * d\n        (uint256 qdHi, uint256 qdLo) = _mulHighLow(q, d);\n        // Add remainder of x * y / d (computed as rem = (x * y % d))\n        (uint256 qdRemLo, uint256 c) = _addCarry(qdLo, mulmod(x, y, d));\n        uint256 qdRemHi = qdHi + c;\n\n        // Full precision check that x * y = q * d + rem\n        assertEq(xyHi, qdRemHi);\n        assertEq(xyLo, qdRemLo);\n    }",
                    "start": "185",
                    "end": "205",
                    "class": "MathTest",
                    "signature": " testMulDivuint256 x, uint256 y, uint256 d",
                    "full_signature": "function testMulDiv(uint256 x, uint256 y, uint256 d) public  pure ",
                    "class_method_signature": "MathTest.testMulDivuint256 x, uint256 y, uint256 d",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MULDIV\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testModExp",
                    "parameters": "uint256 b, uint256 e, uint256 m",
                    "modifiers": "",
                    "return": "",
                    "body": "function testModExp(uint256 b, uint256 e, uint256 m) public {\n        if (m == 0) {\n            vm.expectRevert(stdError.divisionError);\n        }\n        uint256 result = Math.modExp(b, e, m);\n        assertLt(result, m);\n        assertEq(result, _nativeModExp(b, e, m));\n    }",
                    "start": "219",
                    "end": "226",
                    "class": "MathTest",
                    "signature": " testModExpuint256 b, uint256 e, uint256 m",
                    "full_signature": "function testModExp(uint256 b, uint256 e, uint256 m) public   ",
                    "class_method_signature": "MathTest.testModExpuint256 b, uint256 e, uint256 m",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MOD EXP\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_asRounding",
                    "parameters": "uint8 r",
                    "modifiers": "pure",
                    "return": "returns (Math.Rounding)",
                    "body": "function _asRounding(uint8 r) private pure returns (Math.Rounding) {\n        vm.assume(r < uint8(type(Math.Rounding).max));\n        return Math.Rounding(r);\n    }",
                    "start": "280",
                    "end": "283",
                    "class": "MathTest",
                    "signature": "returns (Math.Rounding) _asRoundinguint8 r",
                    "full_signature": "function _asRounding(uint8 r) private  pure returns (Math.Rounding)",
                    "class_method_signature": "MathTest._asRoundinguint8 r",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Helpers\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/test/utils/math/SignedMath.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "testSymbolicMinMax",
                    "parameters": "int256 a, int256 b",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testSymbolicMinMax(int256 a, int256 b) public pure {\n        assertEq(SignedMath.min(a, b), a < b ? a : b);\n        assertEq(SignedMath.max(a, b), a > b ? a : b);\n    }",
                    "start": "16",
                    "end": "19",
                    "class": "SignedMathTest",
                    "signature": " testSymbolicMinMaxint256 a, int256 b",
                    "full_signature": "function testSymbolicMinMax(int256 a, int256 b) public  pure ",
                    "class_method_signature": "SignedMathTest.testSymbolicMinMaxint256 a, int256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MIN & MAX\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testSymbolicMin",
                    "parameters": "int256 a, int256 b",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testSymbolicMin(int256 a, int256 b) public pure {\n        int256 result = SignedMath.min(a, b);\n\n        assertLe(result, a);\n        assertLe(result, b);\n        assertTrue(result == a || result == b);\n    }",
                    "start": "22",
                    "end": "28",
                    "class": "SignedMathTest",
                    "signature": " testSymbolicMinint256 a, int256 b",
                    "full_signature": "function testSymbolicMin(int256 a, int256 b) public  pure ",
                    "class_method_signature": "SignedMathTest.testSymbolicMinint256 a, int256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MIN\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testSymbolicMax",
                    "parameters": "int256 a, int256 b",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testSymbolicMax(int256 a, int256 b) public pure {\n        int256 result = SignedMath.max(a, b);\n\n        assertGe(result, a);\n        assertGe(result, b);\n        assertTrue(result == a || result == b);\n    }",
                    "start": "31",
                    "end": "37",
                    "class": "SignedMathTest",
                    "signature": " testSymbolicMaxint256 a, int256 b",
                    "full_signature": "function testSymbolicMax(int256 a, int256 b) public  pure ",
                    "class_method_signature": "SignedMathTest.testSymbolicMaxint256 a, int256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// MAX\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAverage1",
                    "parameters": "int256 a, int256 b",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testAverage1(int256 a, int256 b) public pure {\n        a = bound(a, type(int256).min / 2, type(int256).max / 2);\n        b = bound(b, type(int256).min / 2, type(int256).max / 2);\n\n        int256 result = SignedMath.average(a, b);\n\n        assertEq(result, (a + b) / 2);\n    }",
                    "start": "41",
                    "end": "48",
                    "class": "SignedMathTest",
                    "signature": " testAverage1int256 a, int256 b",
                    "full_signature": "function testAverage1(int256 a, int256 b) public  pure ",
                    "class_method_signature": "SignedMathTest.testAverage1int256 a, int256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// AVERAGE\n// 1. simple test, not full int256 range\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testAverage2",
                    "parameters": "int256 a, int256 b",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testAverage2(int256 a, int256 b) public pure {\n        (int256 result, int256 min, int256 max) = (\n            SignedMath.average(a, b),\n            SignedMath.min(a, b),\n            SignedMath.max(a, b)\n        );\n\n        // average must be between `a` and `b`\n        assertGe(result, min);\n        assertLe(result, max);\n\n        unchecked {\n            // must be unchecked in order to support `a = type(int256).min, b = type(int256).max`\n            uint256 deltaLower = uint256(result - min);\n            uint256 deltaUpper = uint256(max - result);\n            uint256 remainder = uint256((a & 1) ^ (b & 1));\n            assertEq(remainder, Math.max(deltaLower, deltaUpper) - Math.min(deltaLower, deltaUpper));\n        }\n    }",
                    "start": "51",
                    "end": "69",
                    "class": "SignedMathTest",
                    "signature": " testAverage2int256 a, int256 b",
                    "full_signature": "function testAverage2(int256 a, int256 b) public  pure ",
                    "class_method_signature": "SignedMathTest.testAverage2int256 a, int256 b",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// 2. more complex test, full int256 range\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "testSymbolicAbs",
                    "parameters": "int256 a",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function testSymbolicAbs(int256 a) public pure {\n        uint256 result = SignedMath.abs(a);\n\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            assertEq(result, a < 0 ? uint256(-a) : uint256(a));\n        }\n    }",
                    "start": "72",
                    "end": "79",
                    "class": "SignedMathTest",
                    "signature": " testSymbolicAbsint256 a",
                    "full_signature": "function testSymbolicAbs(int256 a) public  pure ",
                    "class_method_signature": "SignedMathTest.testSymbolicAbsint256 a",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// ABS\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/test/utils/structs/Heap.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/test/utils/structs/Checkpoints.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_boundUint32",
                    "parameters": "uint32 x, uint32 min, uint32 max",
                    "modifiers": "pure",
                    "return": "returns (uint32)",
                    "body": "function _boundUint32(uint32 x, uint32 min, uint32 max) internal pure returns (uint32) {\n        return SafeCast.toUint32(bound(uint256(x), uint256(min), uint256(max)));\n    }",
                    "start": "20",
                    "end": "22",
                    "class": "CheckpointsTrace224Test",
                    "signature": "returns (uint32) _boundUint32uint32 x, uint32 min, uint32 max",
                    "full_signature": "function _boundUint32(uint32 x, uint32 min, uint32 max) internal  pure returns (uint32)",
                    "class_method_signature": "CheckpointsTrace224Test._boundUint32uint32 x, uint32 min, uint32 max",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Maximum gap between keys used during the fuzzing tests: the `_prepareKeys` function with make sure that\n// key#n+1 is in the [key#n, key#n + _KEY_MAX_GAP] range.\n// helpers\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "testPush",
                    "parameters": "uint32[] memory keys, uint224[] memory values, uint32 pastKey",
                    "modifiers": "",
                    "return": "",
                    "body": "function testPush(uint32[] memory keys, uint224[] memory values, uint32 pastKey) public {\n        vm.assume(values.length > 0 && values.length <= keys.length);\n        _prepareKeys(keys, _KEY_MAX_GAP);\n\n        // initial state\n        assertEq(_ckpts.length(), 0);\n        assertEq(_ckpts.latest(), 0);\n        _assertLatestCheckpoint(false, 0, 0);\n\n        uint256 duplicates = 0;\n        for (uint256 i = 0; i < keys.length; ++i) {\n            uint32 key = keys[i];\n            uint224 value = values[i % values.length];\n            if (i > 0 && key == keys[i - 1]) ++duplicates;\n\n            // push\n            _ckpts.push(key, value);\n\n            // check length & latest\n            assertEq(_ckpts.length(), i + 1 - duplicates);\n            assertEq(_ckpts.latest(), value);\n            _assertLatestCheckpoint(true, key, value);\n        }\n\n        if (keys.length > 0) {\n            uint32 lastKey = keys[keys.length - 1];\n            if (lastKey > 0) {\n                pastKey = _boundUint32(pastKey, 0, lastKey - 1);\n\n                vm.expectRevert();\n                this.push(pastKey, values[keys.length % values.length]);\n            }\n        }\n    }",
                    "start": "41",
                    "end": "74",
                    "class": "CheckpointsTrace224Test",
                    "signature": " testPushuint32[] memory keys, uint224[] memory values, uint32 pastKey",
                    "full_signature": "function testPush(uint32[] memory keys, uint224[] memory values, uint32 pastKey) public   ",
                    "class_method_signature": "CheckpointsTrace224Test.testPushuint32[] memory keys, uint224[] memory values, uint32 pastKey",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// tests\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "push",
                    "parameters": "uint32 key, uint224 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function push(uint32 key, uint224 value) external {\n        _ckpts.push(key, value);\n    }",
                    "start": "77",
                    "end": "79",
                    "class": "CheckpointsTrace224Test",
                    "signature": " pushuint32 key, uint224 value",
                    "full_signature": "function push(uint32 key, uint224 value) external   ",
                    "class_method_signature": "CheckpointsTrace224Test.pushuint32 key, uint224 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// used to test reverts\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_boundUint48",
                    "parameters": "uint48 x, uint48 min, uint48 max",
                    "modifiers": "pure",
                    "return": "returns (uint48)",
                    "body": "function _boundUint48(uint48 x, uint48 min, uint48 max) internal pure returns (uint48) {\n        return SafeCast.toUint48(bound(uint256(x), uint256(min), uint256(max)));\n    }",
                    "start": "128",
                    "end": "130",
                    "class": "CheckpointsTrace208Test",
                    "signature": "returns (uint48) _boundUint48uint48 x, uint48 min, uint48 max",
                    "full_signature": "function _boundUint48(uint48 x, uint48 min, uint48 max) internal  pure returns (uint48)",
                    "class_method_signature": "CheckpointsTrace208Test._boundUint48uint48 x, uint48 min, uint48 max",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Maximum gap between keys used during the fuzzing tests: the `_prepareKeys` function with make sure that\n// key#n+1 is in the [key#n, key#n + _KEY_MAX_GAP] range.\n// helpers\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "testPush",
                    "parameters": "uint48[] memory keys, uint208[] memory values, uint48 pastKey",
                    "modifiers": "",
                    "return": "",
                    "body": "function testPush(uint48[] memory keys, uint208[] memory values, uint48 pastKey) public {\n        vm.assume(values.length > 0 && values.length <= keys.length);\n        _prepareKeys(keys, _KEY_MAX_GAP);\n\n        // initial state\n        assertEq(_ckpts.length(), 0);\n        assertEq(_ckpts.latest(), 0);\n        _assertLatestCheckpoint(false, 0, 0);\n\n        uint256 duplicates = 0;\n        for (uint256 i = 0; i < keys.length; ++i) {\n            uint48 key = keys[i];\n            uint208 value = values[i % values.length];\n            if (i > 0 && key == keys[i - 1]) ++duplicates;\n\n            // push\n            _ckpts.push(key, value);\n\n            // check length & latest\n            assertEq(_ckpts.length(), i + 1 - duplicates);\n            assertEq(_ckpts.latest(), value);\n            _assertLatestCheckpoint(true, key, value);\n        }\n\n        if (keys.length > 0) {\n            uint48 lastKey = keys[keys.length - 1];\n            if (lastKey > 0) {\n                pastKey = _boundUint48(pastKey, 0, lastKey - 1);\n\n                vm.expectRevert();\n                this.push(pastKey, values[keys.length % values.length]);\n            }\n        }\n    }",
                    "start": "149",
                    "end": "182",
                    "class": "CheckpointsTrace208Test",
                    "signature": " testPushuint48[] memory keys, uint208[] memory values, uint48 pastKey",
                    "full_signature": "function testPush(uint48[] memory keys, uint208[] memory values, uint48 pastKey) public   ",
                    "class_method_signature": "CheckpointsTrace208Test.testPushuint48[] memory keys, uint208[] memory values, uint48 pastKey",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// tests\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "push",
                    "parameters": "uint48 key, uint208 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function push(uint48 key, uint208 value) external {\n        _ckpts.push(key, value);\n    }",
                    "start": "185",
                    "end": "187",
                    "class": "CheckpointsTrace208Test",
                    "signature": " pushuint48 key, uint208 value",
                    "full_signature": "function push(uint48 key, uint208 value) external   ",
                    "class_method_signature": "CheckpointsTrace208Test.pushuint48 key, uint208 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// used to test reverts\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_boundUint96",
                    "parameters": "uint96 x, uint96 min, uint96 max",
                    "modifiers": "pure",
                    "return": "returns (uint96)",
                    "body": "function _boundUint96(uint96 x, uint96 min, uint96 max) internal pure returns (uint96) {\n        return SafeCast.toUint96(bound(uint256(x), uint256(min), uint256(max)));\n    }",
                    "start": "236",
                    "end": "238",
                    "class": "CheckpointsTrace160Test",
                    "signature": "returns (uint96) _boundUint96uint96 x, uint96 min, uint96 max",
                    "full_signature": "function _boundUint96(uint96 x, uint96 min, uint96 max) internal  pure returns (uint96)",
                    "class_method_signature": "CheckpointsTrace160Test._boundUint96uint96 x, uint96 min, uint96 max",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Maximum gap between keys used during the fuzzing tests: the `_prepareKeys` function with make sure that\n// key#n+1 is in the [key#n, key#n + _KEY_MAX_GAP] range.\n// helpers\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "testPush",
                    "parameters": "uint96[] memory keys, uint160[] memory values, uint96 pastKey",
                    "modifiers": "",
                    "return": "",
                    "body": "function testPush(uint96[] memory keys, uint160[] memory values, uint96 pastKey) public {\n        vm.assume(values.length > 0 && values.length <= keys.length);\n        _prepareKeys(keys, _KEY_MAX_GAP);\n\n        // initial state\n        assertEq(_ckpts.length(), 0);\n        assertEq(_ckpts.latest(), 0);\n        _assertLatestCheckpoint(false, 0, 0);\n\n        uint256 duplicates = 0;\n        for (uint256 i = 0; i < keys.length; ++i) {\n            uint96 key = keys[i];\n            uint160 value = values[i % values.length];\n            if (i > 0 && key == keys[i - 1]) ++duplicates;\n\n            // push\n            _ckpts.push(key, value);\n\n            // check length & latest\n            assertEq(_ckpts.length(), i + 1 - duplicates);\n            assertEq(_ckpts.latest(), value);\n            _assertLatestCheckpoint(true, key, value);\n        }\n\n        if (keys.length > 0) {\n            uint96 lastKey = keys[keys.length - 1];\n            if (lastKey > 0) {\n                pastKey = _boundUint96(pastKey, 0, lastKey - 1);\n\n                vm.expectRevert();\n                this.push(pastKey, values[keys.length % values.length]);\n            }\n        }\n    }",
                    "start": "257",
                    "end": "290",
                    "class": "CheckpointsTrace160Test",
                    "signature": " testPushuint96[] memory keys, uint160[] memory values, uint96 pastKey",
                    "full_signature": "function testPush(uint96[] memory keys, uint160[] memory values, uint96 pastKey) public   ",
                    "class_method_signature": "CheckpointsTrace160Test.testPushuint96[] memory keys, uint160[] memory values, uint96 pastKey",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "// tests\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "push",
                    "parameters": "uint96 key, uint160 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function push(uint96 key, uint160 value) external {\n        _ckpts.push(key, value);\n    }",
                    "start": "293",
                    "end": "295",
                    "class": "CheckpointsTrace160Test",
                    "signature": " pushuint96 key, uint160 value",
                    "full_signature": "function push(uint96 key, uint160 value) external   ",
                    "class_method_signature": "CheckpointsTrace160Test.pushuint96 key, uint160 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// used to test reverts\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/test/metatx/ERC2771Forwarder.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "setUp",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function setUp() public {\n        _erc2771Forwarder = new ERC2771ForwarderMock(\"ERC2771Forwarder\");\n        _receiver = new CallReceiverMockTrustingForwarder(address(_erc2771Forwarder));\n    }",
                    "start": "55",
                    "end": "58",
                    "class": "ERC2771ForwarderTest",
                    "signature": " setUp",
                    "full_signature": "function setUp() public   ",
                    "class_method_signature": "ERC2771ForwarderTest.setUp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// To avoid overflow\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_forgeRequestData",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (ERC2771Forwarder.ForwardRequestData memory)",
                    "body": "function _forgeRequestData() private view returns (ERC2771Forwarder.ForwardRequestData memory) {\n        return\n            _forgeRequestData({\n                value: 0,\n                deadline: uint48(block.timestamp + 1),\n                data: abi.encodeCall(CallReceiverMock.mockFunction, ())\n            });\n    }",
                    "start": "61",
                    "end": "68",
                    "class": "ERC2771ForwarderTest",
                    "signature": "returns (ERC2771Forwarder.ForwardRequestData memory) _forgeRequestData",
                    "full_signature": "function _forgeRequestData() private  view returns (ERC2771Forwarder.ForwardRequestData memory)",
                    "class_method_signature": "ERC2771ForwarderTest._forgeRequestData",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Forge a new ForwardRequestData\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_signRequestData",
                    "parameters": "ERC2771Forwarder.ForwardRequestData memory request, uint256 nonce",
                    "modifiers": "view",
                    "return": "returns (ERC2771Forwarder.ForwardRequestData memory)",
                    "body": "function _signRequestData(\n        ERC2771Forwarder.ForwardRequestData memory request,\n        uint256 nonce\n    ) private view returns (ERC2771Forwarder.ForwardRequestData memory) {\n        bytes32 digest = _erc2771Forwarder.forwardRequestStructHash(request, nonce);\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(_signerPrivateKey, digest);\n        request.signature = abi.encodePacked(r, s, v);\n        return request;\n    }",
                    "start": "88",
                    "end": "96",
                    "class": "ERC2771ForwarderTest",
                    "signature": "returns (ERC2771Forwarder.ForwardRequestData memory) _signRequestDataERC2771Forwarder.ForwardRequestData memory request, uint256 nonce",
                    "full_signature": "function _signRequestData(ERC2771Forwarder.ForwardRequestData memory request, uint256 nonce) private  view returns (ERC2771Forwarder.ForwardRequestData memory)",
                    "class_method_signature": "ERC2771ForwarderTest._signRequestDataERC2771Forwarder.ForwardRequestData memory request, uint256 nonce",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Sign a ForwardRequestData (in place) for a given nonce. Also returns it for convenience.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_tamperRequestData",
                    "parameters": "ERC2771Forwarder.ForwardRequestData memory request, TamperType tamper",
                    "modifiers": "",
                    "return": "returns (ERC2771Forwarder.ForwardRequestData memory)",
                    "body": "function _tamperRequestData(\n        ERC2771Forwarder.ForwardRequestData memory request,\n        TamperType tamper\n    ) private returns (ERC2771Forwarder.ForwardRequestData memory) {\n        if (tamper == TamperType.FROM) request.from = vm.randomAddress();\n        else if (tamper == TamperType.TO) request.to = vm.randomAddress();\n        else if (tamper == TamperType.VALUE) request.value = vm.randomUint();\n        else if (tamper == TamperType.DATA) request.data = vm.randomBytes(4);\n        else if (tamper == TamperType.SIGNATURE) request.signature = vm.randomBytes(65);\n\n        return request;\n    }",
                    "start": "99",
                    "end": "110",
                    "class": "ERC2771ForwarderTest",
                    "signature": "returns (ERC2771Forwarder.ForwardRequestData memory) _tamperRequestDataERC2771Forwarder.ForwardRequestData memory request, TamperType tamper",
                    "full_signature": "function _tamperRequestData(ERC2771Forwarder.ForwardRequestData memory request, TamperType tamper) private   returns (ERC2771Forwarder.ForwardRequestData memory)",
                    "class_method_signature": "ERC2771ForwarderTest._tamperRequestDataERC2771Forwarder.ForwardRequestData memory request, TamperType tamper",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Tamper a ForwardRequestData (in place). Also returns it for convenience.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_tamperedExpectRevert",
                    "parameters": "ERC2771Forwarder.ForwardRequestData memory request, TamperType tamper, uint256 nonce",
                    "modifiers": "",
                    "return": "returns (ERC2771Forwarder.ForwardRequestData memory)",
                    "body": "function _tamperedExpectRevert(\n        ERC2771Forwarder.ForwardRequestData memory request,\n        TamperType tamper,\n        uint256 nonce\n    ) private returns (ERC2771Forwarder.ForwardRequestData memory) {\n        if (tamper == TamperType.FROM) nonce = _erc2771Forwarder.nonces(request.from);\n\n        // predict revert\n        if (tamper == TamperType.TO) {\n            vm.expectRevert(\n                abi.encodeWithSelector(\n                    ERC2771Forwarder.ERC2771UntrustfulTarget.selector,\n                    request.to,\n                    address(_erc2771Forwarder)\n                )\n            );\n        } else {\n            (address recovered, , ) = _erc2771Forwarder.forwardRequestStructHash(request, nonce).tryRecover(\n                request.signature\n            );\n            vm.expectRevert(\n                abi.encodeWithSelector(ERC2771Forwarder.ERC2771ForwarderInvalidSigner.selector, recovered, request.from)\n            );\n        }\n        return request;\n    }",
                    "start": "113",
                    "end": "138",
                    "class": "ERC2771ForwarderTest",
                    "signature": "returns (ERC2771Forwarder.ForwardRequestData memory) _tamperedExpectRevertERC2771Forwarder.ForwardRequestData memory request, TamperType tamper, uint256 nonce",
                    "full_signature": "function _tamperedExpectRevert(ERC2771Forwarder.ForwardRequestData memory request, TamperType tamper, uint256 nonce) private   returns (ERC2771Forwarder.ForwardRequestData memory)",
                    "class_method_signature": "ERC2771ForwarderTest._tamperedExpectRevertERC2771Forwarder.ForwardRequestData memory request, TamperType tamper, uint256 nonce",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Predict the revert error for a tampered request, and expect it is emitted.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/test/governance/Governor.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "clock",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint48)",
                    "body": "function clock() public pure override returns (uint48) {}",
                    "start": "36",
                    "end": "36",
                    "class": "GovernorInternalTest",
                    "signature": "returns (uint48) clock",
                    "full_signature": "function clock() public  override returns (uint48)",
                    "class_method_signature": "GovernorInternalTest.clock",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// We don't need to truly implement the missing functions because we are just testing\n// internal helpers.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public pure override returns (string memory) {}",
                    "start": "39",
                    "end": "39",
                    "class": "GovernorInternalTest",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public  override returns (string memory)",
                    "class_method_signature": "GovernorInternalTest.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "COUNTING_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function COUNTING_MODE() public pure virtual override returns (string memory) {}",
                    "start": "42",
                    "end": "42",
                    "class": "GovernorInternalTest",
                    "signature": "returns (string memory) COUNTING_MODE",
                    "full_signature": "function COUNTING_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "GovernorInternalTest.COUNTING_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/test/token/ERC721/extensions/ERC721Consecutive.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/test/token/ERC20/extensions/ERC4626.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "testFuzzDecimalsOverflow",
                    "parameters": "uint8 offset",
                    "modifiers": "",
                    "return": "",
                    "body": "function testFuzzDecimalsOverflow(uint8 offset) public {\n        /// @dev Remember that the `_underlying` exhibits a `decimals` value of 18.\n        offset = uint8(bound(uint256(offset), 238, uint256(type(uint8).max)));\n        ERC4626VaultOffsetMock erc4626VaultOffsetMock = new ERC4626VaultOffsetMock(_underlying, offset);\n        vm.expectRevert();\n        erc4626VaultOffsetMock.decimals();\n    }",
                    "start": "34",
                    "end": "40",
                    "class": "ERC4626StdTest",
                    "signature": " testFuzzDecimalsOverflowuint8 offset",
                    "full_signature": "function testFuzzDecimalsOverflow(uint8 offset) public   ",
                    "class_method_signature": "ERC4626StdTest.testFuzzDecimalsOverflowuint8 offset",
                    "testcase": "True",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Check the case where calculated `decimals` value overflows the `uint8` type.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/test/proxy/Clones.t.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/account/utils/draft-ERC7579Utils.sol": [],
    "/root/openzeppelin-contracts/contracts/account/utils/draft-ERC4337Utils.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/Pausable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "paused",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function paused() public view virtual returns (bool) {\n        return _paused;\n    }",
                    "start": "74",
                    "end": "76",
                    "class": "Pausable",
                    "signature": "returns (bool) paused",
                    "full_signature": "function paused() public virtual view returns (bool)",
                    "class_method_signature": "Pausable.paused",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n/**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n/**\n     * @dev The operation failed because the contract is paused.\n     */\n/**\n     * @dev The operation failed because the contract is not paused.\n     */\n/**\n     * @dev Initializes the contract in unpaused state.\n     */\n/**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n/**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n/**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_requireNotPaused",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }",
                    "start": "81",
                    "end": "85",
                    "class": "Pausable",
                    "signature": " _requireNotPaused",
                    "full_signature": "function _requireNotPaused() internal virtual view ",
                    "class_method_signature": "Pausable._requireNotPaused",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Throws if the contract is paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_requirePaused",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }",
                    "start": "90",
                    "end": "94",
                    "class": "Pausable",
                    "signature": " _requirePaused",
                    "full_signature": "function _requirePaused() internal virtual view ",
                    "class_method_signature": "Pausable._requirePaused",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Throws if the contract is not paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_pause",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }",
                    "start": "103",
                    "end": "106",
                    "class": "Pausable",
                    "signature": " _pause",
                    "full_signature": "function _pause() internal virtual  ",
                    "class_method_signature": "Pausable._pause",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_unpause",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }",
                    "start": "115",
                    "end": "118",
                    "class": "Pausable",
                    "signature": " _unpause",
                    "full_signature": "function _unpause() internal virtual  ",
                    "class_method_signature": "Pausable._unpause",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/utils/Packing.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/CAIP2.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/SlotDerivation.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/Comparators.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/ShortStrings.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/Multicall.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "multicall",
                    "parameters": "bytes[] calldata data",
                    "modifiers": "",
                    "return": "returns (bytes[] memory results)",
                    "body": "function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        bytes memory context = msg.sender == _msgSender()\n            ? new bytes(0)\n            : msg.data[msg.data.length - _contextSuffixLength():];\n\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\n        }\n        return results;\n    }",
                    "start": "26",
                    "end": "36",
                    "class": "Multicall",
                    "signature": "returns (bytes[] memory results) multicallbytes[] calldata data",
                    "full_signature": "function multicall(bytes[] calldata data) external virtual  returns (bytes[] memory results)",
                    "class_method_signature": "Multicall.multicallbytes[] calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/utils/TransientSlot.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/Bytes.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/Create2.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/Context.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/utils/Base64.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/CAIP10.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/Address.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/NoncesKeyed.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "nonces",
                    "parameters": "address owner, uint192 key",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function nonces(address owner, uint192 key) public view virtual returns (uint256) {\n        return key == 0 ? nonces(owner) : _pack(key, _nonces[owner][key]);\n    }",
                    "start": "19",
                    "end": "21",
                    "class": "NoncesKeyed",
                    "signature": "returns (uint256) noncesaddress owner, uint192 key",
                    "full_signature": "function nonces(address owner, uint192 key) public virtual view returns (uint256)",
                    "class_method_signature": "NoncesKeyed.noncesaddress owner, uint192 key",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Returns the next unused nonce for an address and key. Result contains the key prefix.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_useNonce",
                    "parameters": "address owner, uint192 key",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function _useNonce(address owner, uint192 key) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return key == 0 ? _useNonce(owner) : _pack(key, _nonces[owner][key]++);\n        }\n    }",
                    "start": "29",
                    "end": "36",
                    "class": "NoncesKeyed",
                    "signature": "returns (uint256) _useNonceaddress owner, uint192 key",
                    "full_signature": "function _useNonce(address owner, uint192 key) internal virtual  returns (uint256)",
                    "class_method_signature": "NoncesKeyed._useNonceaddress owner, uint192 key",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Consumes the next unused nonce for an address and key.\n     *\n     * Returns the current value without the key prefix. Consumed nonce is increased, so calling this function twice\n     * with the same arguments will return different (sequential) results.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_useCheckedNonce",
                    "parameters": "address owner, uint256 keyNonce",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _useCheckedNonce(address owner, uint256 keyNonce) internal virtual override {\n        (uint192 key, ) = _unpack(keyNonce);\n        if (key == 0) {\n            super._useCheckedNonce(owner, keyNonce);\n        } else {\n            uint256 current = _useNonce(owner, key);\n            if (keyNonce != current) revert InvalidAccountNonce(owner, current);\n        }\n    }",
                    "start": "45",
                    "end": "53",
                    "class": "NoncesKeyed",
                    "signature": " _useCheckedNonceaddress owner, uint256 keyNonce",
                    "full_signature": "function _useCheckedNonce(address owner, uint256 keyNonce) internal virtual override ",
                    "class_method_signature": "NoncesKeyed._useCheckedNonceaddress owner, uint256 keyNonce",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     *\n     * This version takes the key and the nonce in a single uint256 parameter:\n     * - use the first 24 bytes for the key\n     * - use the last 8 bytes for the nonce\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_useCheckedNonce",
                    "parameters": "address owner, uint192 key, uint64 nonce",
                    "modifiers": "",
                    "return": "",
                    "body": "function _useCheckedNonce(address owner, uint192 key, uint64 nonce) internal virtual {\n        _useCheckedNonce(owner, _pack(key, nonce));\n    }",
                    "start": "60",
                    "end": "62",
                    "class": "NoncesKeyed",
                    "signature": " _useCheckedNonceaddress owner, uint192 key, uint64 nonce",
                    "full_signature": "function _useCheckedNonce(address owner, uint192 key, uint64 nonce) internal virtual  ",
                    "class_method_signature": "NoncesKeyed._useCheckedNonceaddress owner, uint192 key, uint64 nonce",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     *\n     * This version takes the key and the nonce as two different parameters.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_pack",
                    "parameters": "uint192 key, uint64 nonce",
                    "modifiers": "pure",
                    "return": "returns (uint256)",
                    "body": "function _pack(uint192 key, uint64 nonce) private pure returns (uint256) {\n        return (uint256(key) << 64) | nonce;\n    }",
                    "start": "65",
                    "end": "67",
                    "class": "NoncesKeyed",
                    "signature": "returns (uint256) _packuint192 key, uint64 nonce",
                    "full_signature": "function _pack(uint192 key, uint64 nonce) private  pure returns (uint256)",
                    "class_method_signature": "NoncesKeyed._packuint192 key, uint64 nonce",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Pack key and nonce into a keyNonce\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_unpack",
                    "parameters": "uint256 keyNonce",
                    "modifiers": "pure",
                    "return": "returns (uint192 key, uint64 nonce)",
                    "body": "function _unpack(uint256 keyNonce) private pure returns (uint192 key, uint64 nonce) {\n        return (uint192(keyNonce >> 64), uint64(keyNonce));\n    }",
                    "start": "70",
                    "end": "72",
                    "class": "NoncesKeyed",
                    "signature": "returns (uint192 key, uint64 nonce) _unpackuint256 keyNonce",
                    "full_signature": "function _unpack(uint256 keyNonce) private  pure returns (uint192 key, uint64 nonce)",
                    "class_method_signature": "NoncesKeyed._unpackuint256 keyNonce",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Unpack a keyNonce into its key and nonce components\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/utils/Panic.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/Arrays.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/Errors.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_nonReentrantBefore",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }",
                    "start": "64",
                    "end": "72",
                    "class": "ReentrancyGuard",
                    "signature": " _nonReentrantBefore",
                    "full_signature": "function _nonReentrantBefore() private   ",
                    "class_method_signature": "ReentrancyGuard._nonReentrantBefore",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Booleans are more expensive than uint256 or any type that takes up a full\n// word because each write operation emits an extra SLOAD to first read the\n// slot's contents, replace the bits taken up by the boolean, and then write\n// back. This is the compiler's defense against contract upgrades and\n// pointer aliasing, and it cannot be disabled.\n// The values being non-zero value makes deployment a bit more expensive,\n// but in exchange the refund on every call to nonReentrant will be lower in\n// amount. Since refunds are capped to a percentage of the total\n// transaction's gas, it is best to keep them low in cases like this one, to\n// increase the likelihood of the full refund coming into effect.\n/**\n     * @dev Unauthorized reentrant call.\n     */\n/**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_reentrancyGuardEntered",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }",
                    "start": "84",
                    "end": "86",
                    "class": "ReentrancyGuard",
                    "signature": "returns (bool) _reentrancyGuardEntered",
                    "full_signature": "function _reentrancyGuardEntered() internal  view returns (bool)",
                    "class_method_signature": "ReentrancyGuard._reentrancyGuardEntered",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/utils/Strings.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/StorageSlot.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/ReentrancyGuardTransient.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_nonReentrantBefore",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_reentrancyGuardEntered()) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(true);\n    }",
                    "start": "40",
                    "end": "48",
                    "class": "ReentrancyGuardTransient",
                    "signature": " _nonReentrantBefore",
                    "full_signature": "function _nonReentrantBefore() private   ",
                    "class_method_signature": "ReentrancyGuardTransient._nonReentrantBefore",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n/**\n     * @dev Unauthorized reentrant call.\n     */\n/**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_reentrancyGuardEntered",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _reentrancyGuardEntered() internal view returns (bool) {\n        return REENTRANCY_GUARD_STORAGE.asBoolean().tload();\n    }",
                    "start": "58",
                    "end": "60",
                    "class": "ReentrancyGuardTransient",
                    "signature": "returns (bool) _reentrancyGuardEntered",
                    "full_signature": "function _reentrancyGuardEntered() internal  view returns (bool)",
                    "class_method_signature": "ReentrancyGuardTransient._reentrancyGuardEntered",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/utils/Nonces.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "nonces",
                    "parameters": "address owner",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }",
                    "start": "19",
                    "end": "21",
                    "class": "Nonces",
                    "signature": "returns (uint256) noncesaddress owner",
                    "full_signature": "function nonces(address owner) public virtual view returns (uint256)",
                    "class_method_signature": "Nonces.noncesaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n/**\n     * @dev Returns the next unused nonce for an address.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_useNonce",
                    "parameters": "address owner",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }",
                    "start": "28",
                    "end": "35",
                    "class": "Nonces",
                    "signature": "returns (uint256) _useNonceaddress owner",
                    "full_signature": "function _useNonce(address owner) internal virtual  returns (uint256)",
                    "class_method_signature": "Nonces._useNonceaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_useCheckedNonce",
                    "parameters": "address owner, uint256 nonce",
                    "modifiers": "",
                    "return": "",
                    "body": "function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }",
                    "start": "40",
                    "end": "45",
                    "class": "Nonces",
                    "signature": " _useCheckedNonceaddress owner, uint256 nonce",
                    "full_signature": "function _useCheckedNonce(address owner, uint256 nonce) internal virtual  ",
                    "class_method_signature": "Nonces._useCheckedNonceaddress owner, uint256 nonce",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }",
                    "start": "24",
                    "end": "26",
                    "class": "ERC165",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual view returns (bool)",
                    "class_method_signature": "ERC165.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/cryptography/RSA.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_domainSeparatorV4",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }",
                    "start": "80",
                    "end": "86",
                    "class": "EIP712",
                    "signature": "returns (bytes32) _domainSeparatorV4",
                    "full_signature": "function _domainSeparatorV4() internal  view returns (bytes32)",
                    "class_method_signature": "EIP712._domainSeparatorV4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n// invalidate the cached domain separator if the chain id changes.\n/**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n/**\n     * @dev Returns the domain separator for the current chain.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_hashTypedDataV4",
                    "parameters": "bytes32 structHash",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }",
                    "start": "107",
                    "end": "109",
                    "class": "EIP712",
                    "signature": "returns (bytes32) _hashTypedDataV4bytes32 structHash",
                    "full_signature": "function _hashTypedDataV4(bytes32 structHash) internal virtual view returns (bytes32)",
                    "class_method_signature": "EIP712._hashTypedDataV4bytes32 structHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "eip712Domain",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )",
                    "body": "function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }",
                    "start": "114",
                    "end": "137",
                    "class": "EIP712",
                    "signature": "returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        ) eip712Domain",
                    "full_signature": "function eip712Domain() public virtual view returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )",
                    "class_method_signature": "EIP712.eip712Domain",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC-5267}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_EIP712Name",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }",
                    "start": "146",
                    "end": "148",
                    "class": "EIP712",
                    "signature": "returns (string memory) _EIP712Name",
                    "full_signature": "function _EIP712Name() internal  view returns (string memory)",
                    "class_method_signature": "EIP712._EIP712Name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_EIP712Version",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }",
                    "start": "157",
                    "end": "159",
                    "class": "EIP712",
                    "signature": "returns (string memory) _EIP712Version",
                    "full_signature": "function _EIP712Version() internal  view returns (string memory)",
                    "class_method_signature": "EIP712._EIP712Version",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/cryptography/P256.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/types/Time.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/math/Math.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/structs/CircularBuffer.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/structs/DoubleEndedQueue.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/structs/MerkleTree.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/structs/Checkpoints.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/structs/BitMaps.sol": [],
    "/root/openzeppelin-contracts/contracts/utils/structs/Heap.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC165.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC20.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC721.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC5805.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC721Receiver.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC777Recipient.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC5313.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC6372.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC4906.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC1363Spender.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC1820Registry.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC4626.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC721Enumerable.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC3156.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC1155Receiver.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC777.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/draft-IERC7674.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/draft-IERC7579.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC1155.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC1271.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC1155MetadataURI.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC2612.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC777Sender.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC1820Implementer.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC2309.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/draft-IERC4337.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC1363Receiver.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC721Metadata.sol": [],
    "/root/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol": [],
    "/root/openzeppelin-contracts/contracts/finance/VestingWalletCliff.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "cliff",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function cliff() public view virtual returns (uint256) {\n        return _cliff;\n    }",
                    "start": "36",
                    "end": "38",
                    "class": "VestingWalletCliff",
                    "signature": "returns (uint256) cliff",
                    "full_signature": "function cliff() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWalletCliff.cliff",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev The specified cliff duration is larger than the vesting duration.\n/**\n     * @dev Set the duration of the cliff, in seconds. The cliff starts vesting schedule (see {VestingWallet}'s\n     * constructor) and ends `cliffSeconds` later.\n     */\n/**\n     * @dev Getter for the cliff timestamp.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_vestingSchedule",
                    "parameters": "uint256 totalAllocation, uint64 timestamp",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _vestingSchedule(\n        uint256 totalAllocation,\n        uint64 timestamp\n    ) internal view virtual override returns (uint256) {\n        return timestamp < cliff() ? 0 : super._vestingSchedule(totalAllocation, timestamp);\n    }",
                    "start": "48",
                    "end": "53",
                    "class": "VestingWalletCliff",
                    "signature": "returns (uint256) _vestingScheduleuint256 totalAllocation, uint64 timestamp",
                    "full_signature": "function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal virtual override returns (uint256)",
                    "class_method_signature": "VestingWalletCliff._vestingScheduleuint256 totalAllocation, uint64 timestamp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\n     * an asset given its total historical allocation. Returns 0 if the {cliff} timestamp is not met.\n     *\n     * IMPORTANT: The cliff not only makes the schedule return 0, but it also ignores every possible side\n     * effect from calling the inherited implementation (i.e. `super._vestingSchedule`). Carefully consider\n     * this caveat if the overridden implementation of this function has any (e.g. writing to memory or reverting).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/finance/VestingWallet.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "start",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function start() public view virtual returns (uint256) {\n        return _start;\n    }",
                    "start": "61",
                    "end": "63",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) start",
                    "full_signature": "function start() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.start",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets the beneficiary (owner), the start timestamp and the vesting duration (in seconds) of the vesting\n     * wallet.\n     */\n/**\n     * @dev The contract should be able to receive Eth.\n     */\n/**\n     * @dev Getter for the start timestamp.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "duration",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function duration() public view virtual returns (uint256) {\n        return _duration;\n    }",
                    "start": "68",
                    "end": "70",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) duration",
                    "full_signature": "function duration() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.duration",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Getter for the vesting duration.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "end",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function end() public view virtual returns (uint256) {\n        return start() + duration();\n    }",
                    "start": "75",
                    "end": "77",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) end",
                    "full_signature": "function end() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.end",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Getter for the end timestamp.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "released",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function released() public view virtual returns (uint256) {\n        return _released;\n    }",
                    "start": "82",
                    "end": "84",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) released",
                    "full_signature": "function released() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.released",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Amount of eth already released\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "released",
                    "parameters": "address token",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function released(address token) public view virtual returns (uint256) {\n        return _erc20Released[token];\n    }",
                    "start": "89",
                    "end": "91",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) releasedaddress token",
                    "full_signature": "function released(address token) public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.releasedaddress token",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Amount of token already released\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "releasable",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function releasable() public view virtual returns (uint256) {\n        return vestedAmount(uint64(block.timestamp)) - released();\n    }",
                    "start": "96",
                    "end": "98",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) releasable",
                    "full_signature": "function releasable() public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.releasable",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Getter for the amount of releasable eth.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "releasable",
                    "parameters": "address token",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function releasable(address token) public view virtual returns (uint256) {\n        return vestedAmount(token, uint64(block.timestamp)) - released(token);\n    }",
                    "start": "104",
                    "end": "106",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) releasableaddress token",
                    "full_signature": "function releasable(address token) public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.releasableaddress token",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Getter for the amount of releasable `token` tokens. `token` should be the address of an\n     * {IERC20} contract.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "release",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function release() public virtual {\n        uint256 amount = releasable();\n        _released += amount;\n        emit EtherReleased(amount);\n        Address.sendValue(payable(owner()), amount);\n    }",
                    "start": "113",
                    "end": "118",
                    "class": "VestingWallet",
                    "signature": " release",
                    "full_signature": "function release() public virtual  ",
                    "class_method_signature": "VestingWallet.release",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Release the native token (ether) that have already vested.\n     *\n     * Emits a {EtherReleased} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "release",
                    "parameters": "address token",
                    "modifiers": "",
                    "return": "",
                    "body": "function release(address token) public virtual {\n        uint256 amount = releasable(token);\n        _erc20Released[token] += amount;\n        emit ERC20Released(token, amount);\n        SafeERC20.safeTransfer(IERC20(token), owner(), amount);\n    }",
                    "start": "125",
                    "end": "130",
                    "class": "VestingWallet",
                    "signature": " releaseaddress token",
                    "full_signature": "function release(address token) public virtual  ",
                    "class_method_signature": "VestingWallet.releaseaddress token",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Release the tokens that have already vested.\n     *\n     * Emits a {ERC20Released} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "vestedAmount",
                    "parameters": "uint64 timestamp",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\n        return _vestingSchedule(address(this).balance + released(), timestamp);\n    }",
                    "start": "135",
                    "end": "137",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) vestedAmountuint64 timestamp",
                    "full_signature": "function vestedAmount(uint64 timestamp) public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.vestedAmountuint64 timestamp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "vestedAmount",
                    "parameters": "address token, uint64 timestamp",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\n    }",
                    "start": "142",
                    "end": "144",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) vestedAmountaddress token, uint64 timestamp",
                    "full_signature": "function vestedAmount(address token, uint64 timestamp) public virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet.vestedAmountaddress token, uint64 timestamp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_vestingSchedule",
                    "parameters": "uint256 totalAllocation, uint64 timestamp",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\n        if (timestamp < start()) {\n            return 0;\n        } else if (timestamp >= end()) {\n            return totalAllocation;\n        } else {\n            return (totalAllocation * (timestamp - start())) / duration();\n        }\n    }",
                    "start": "150",
                    "end": "158",
                    "class": "VestingWallet",
                    "signature": "returns (uint256) _vestingScheduleuint256 totalAllocation, uint64 timestamp",
                    "full_signature": "function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal virtual view returns (uint256)",
                    "class_method_signature": "VestingWallet._vestingScheduleuint256 totalAllocation, uint64 timestamp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\n     * an asset given its total historical allocation.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "trustedForwarder",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function trustedForwarder() public view virtual returns (address) {\n        return _trustedForwarder;\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "ERC2771Context",
                    "signature": "returns (address) trustedForwarder",
                    "full_signature": "function trustedForwarder() public virtual view returns (address)",
                    "class_method_signature": "ERC2771Context.trustedForwarder",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n/**\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\n     * invoke functions on this contract on behalf of other accounts.\n     *\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\n     */\n/// @custom:oz-upgrades-unsafe-allow constructor\n/**\n     * @dev Returns the address of the trusted forwarder.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isTrustedForwarder",
                    "parameters": "address forwarder",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == trustedForwarder();\n    }",
                    "start": "46",
                    "end": "48",
                    "class": "ERC2771Context",
                    "signature": "returns (bool) isTrustedForwarderaddress forwarder",
                    "full_signature": "function isTrustedForwarder(address forwarder) public virtual view returns (bool)",
                    "class_method_signature": "ERC2771Context.isTrustedForwarderaddress forwarder",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Indicates whether any particular address is the trusted forwarder.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_msgSender",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _msgSender() internal view virtual override returns (address) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\n        } else {\n            return super._msgSender();\n        }\n    }",
                    "start": "55",
                    "end": "63",
                    "class": "ERC2771Context",
                    "signature": "returns (address) _msgSender",
                    "full_signature": "function _msgSender() internal virtual override returns (address)",
                    "class_method_signature": "ERC2771Context._msgSender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_msgData",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (bytes calldata)",
                    "body": "function _msgData() internal view virtual override returns (bytes calldata) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return msg.data[:calldataLength - contextSuffixLength];\n        } else {\n            return super._msgData();\n        }\n    }",
                    "start": "70",
                    "end": "78",
                    "class": "ERC2771Context",
                    "signature": "returns (bytes calldata) _msgData",
                    "full_signature": "function _msgData() internal virtual override returns (bytes calldata)",
                    "class_method_signature": "ERC2771Context._msgData",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_contextSuffixLength",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _contextSuffixLength() internal view virtual override returns (uint256) {\n        return 20;\n    }",
                    "start": "83",
                    "end": "85",
                    "class": "ERC2771Context",
                    "signature": "returns (uint256) _contextSuffixLength",
                    "full_signature": "function _contextSuffixLength() internal virtual override returns (uint256)",
                    "class_method_signature": "ERC2771Context._contextSuffixLength",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "verify",
                    "parameters": "ForwardRequestData calldata request",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function verify(ForwardRequestData calldata request) public view virtual returns (bool) {\n        (bool isTrustedForwarder, bool active, bool signerMatch, ) = _validate(request);\n        return isTrustedForwarder && active && signerMatch;\n    }",
                    "start": "112",
                    "end": "115",
                    "class": "ERC2771Forwarder",
                    "signature": "returns (bool) verifyForwardRequestData calldata request",
                    "full_signature": "function verify(ForwardRequestData calldata request) public virtual view returns (bool)",
                    "class_method_signature": "ERC2771Forwarder.verifyForwardRequestData calldata request",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Emitted when a `ForwardRequest` is executed.\n     *\n     * NOTE: An unsuccessful forward request could be due to an invalid signature, an expired deadline,\n     * or simply a revert in the requested call. The contract guarantees that the relayer is not able to force\n     * the requested call to run out of gas.\n     */\n/**\n     * @dev The request `from` doesn't match with the recovered `signer`.\n     */\n/**\n     * @dev The `requestedValue` doesn't match with the available `msgValue`.\n     */\n/**\n     * @dev The request `deadline` has expired.\n     */\n/**\n     * @dev The request target doesn't trust the `forwarder`.\n     */\n/**\n     * @dev See {EIP712-constructor}.\n     */\n/**\n     * @dev Returns `true` if a request is valid for a provided `signature` at the current block timestamp.\n     *\n     * A transaction is considered valid when the target trusts this forwarder, the request hasn't expired\n     * (deadline is not met), and the signer matches the `from` parameter of the signed request.\n     *\n     * NOTE: A request may return false here but it won't cause {executeBatch} to revert if a refund\n     * receiver is provided.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "execute",
                    "parameters": "ForwardRequestData calldata request",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function execute(ForwardRequestData calldata request) public payable virtual {\n        // We make sure that msg.value and request.value match exactly.\n        // If the request is invalid or the call reverts, this whole function\n        // will revert, ensuring value isn't stuck.\n        if (msg.value != request.value) {\n            revert ERC2771ForwarderMismatchedValue(request.value, msg.value);\n        }\n\n        if (!_execute(request, true)) {\n            revert Errors.FailedCall();\n        }\n    }",
                    "start": "127",
                    "end": "138",
                    "class": "ERC2771Forwarder",
                    "signature": " executeForwardRequestData calldata request",
                    "full_signature": "function execute(ForwardRequestData calldata request) public virtual payable ",
                    "class_method_signature": "ERC2771Forwarder.executeForwardRequestData calldata request",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Executes a `request` on behalf of `signature`'s signer using the ERC-2771 protocol. The gas\n     * provided to the requested call may not be exactly the amount requested, but the call will not run\n     * out of gas. Will revert if the request is invalid or the call reverts, in this case the nonce is not consumed.\n     *\n     * Requirements:\n     *\n     * - The request value should be equal to the provided `msg.value`.\n     * - The request should be valid according to {verify}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "executeBatch",
                    "parameters": "ForwardRequestData[] calldata requests, address payable refundReceiver",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function executeBatch(\n        ForwardRequestData[] calldata requests,\n        address payable refundReceiver\n    ) public payable virtual {\n        bool atomic = refundReceiver == address(0);\n\n        uint256 requestsValue;\n        uint256 refundValue;\n\n        for (uint256 i; i < requests.length; ++i) {\n            requestsValue += requests[i].value;\n            bool success = _execute(requests[i], atomic);\n            if (!success) {\n                refundValue += requests[i].value;\n            }\n        }\n\n        // The batch should revert if there's a mismatched msg.value provided\n        // to avoid request value tampering\n        if (requestsValue != msg.value) {\n            revert ERC2771ForwarderMismatchedValue(requestsValue, msg.value);\n        }\n\n        // Some requests with value were invalid (possibly due to frontrunning).\n        // To avoid leaving ETH in the contract this value is refunded.\n        if (refundValue != 0) {\n            // We know refundReceiver != address(0) && requestsValue == msg.value\n            // meaning we can ensure refundValue is not taken from the original contract's balance\n            // and refundReceiver is a known account.\n            Address.sendValue(refundReceiver, refundValue);\n        }\n    }",
                    "start": "163",
                    "end": "194",
                    "class": "ERC2771Forwarder",
                    "signature": " executeBatchForwardRequestData[] calldata requests, address payable refundReceiver",
                    "full_signature": "function executeBatch(ForwardRequestData[] calldata requests, address payable refundReceiver) public virtual payable ",
                    "class_method_signature": "ERC2771Forwarder.executeBatchForwardRequestData[] calldata requests, address payable refundReceiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Batch version of {execute} with optional refunding and atomic execution.\n     *\n     * In case a batch contains at least one invalid request (see {verify}), the\n     * request will be skipped and the `refundReceiver` parameter will receive back the\n     * unused requested value at the end of the execution. This is done to prevent reverting\n     * the entire batch when a request is invalid or has already been submitted.\n     *\n     * If the `refundReceiver` is the `address(0)`, this function will revert when at least\n     * one of the requests was not valid instead of skipping it. This could be useful if\n     * a batch is required to get executed atomically (at least at the top-level). For example,\n     * refunding (and thus atomicity) can be opt-out if the relayer is using a service that avoids\n     * including reverted transactions.\n     *\n     * Requirements:\n     *\n     * - The sum of the requests' values should be equal to the provided `msg.value`.\n     * - All of the requests should be valid (see {verify}) when `refundReceiver` is the zero address.\n     *\n     * NOTE: Setting a zero `refundReceiver` guarantees an all-or-nothing requests execution only for\n     * the first-level forwarded calls. In case a forwarded request calls to a contract with another\n     * subcall, the second-level call may revert without the top-level call reverting.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_validate",
                    "parameters": "ForwardRequestData calldata request",
                    "modifiers": "view",
                    "return": "returns (bool isTrustedForwarder, bool active, bool signerMatch, address signer)",
                    "body": "function _validate(\n        ForwardRequestData calldata request\n    ) internal view virtual returns (bool isTrustedForwarder, bool active, bool signerMatch, address signer) {\n        (bool isValid, address recovered) = _recoverForwardRequestSigner(request);\n\n        return (\n            _isTrustedByTarget(request.to),\n            request.deadline >= block.timestamp,\n            isValid && recovered == request.from,\n            recovered\n        );\n    }",
                    "start": "200",
                    "end": "211",
                    "class": "ERC2771Forwarder",
                    "signature": "returns (bool isTrustedForwarder, bool active, bool signerMatch, address signer) _validateForwardRequestData calldata request",
                    "full_signature": "function _validate(ForwardRequestData calldata request) internal virtual view returns (bool isTrustedForwarder, bool active, bool signerMatch, address signer)",
                    "class_method_signature": "ERC2771Forwarder._validateForwardRequestData calldata request",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Validates if the provided request can be executed at current block timestamp with\n     * the given `request.signature` on behalf of `request.signer`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_recoverForwardRequestSigner",
                    "parameters": "ForwardRequestData calldata request",
                    "modifiers": "view",
                    "return": "returns (bool isValid, address signer)",
                    "body": "function _recoverForwardRequestSigner(\n        ForwardRequestData calldata request\n    ) internal view virtual returns (bool isValid, address signer) {\n        (address recovered, ECDSA.RecoverError err, ) = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    _FORWARD_REQUEST_TYPEHASH,\n                    request.from,\n                    request.to,\n                    request.value,\n                    request.gas,\n                    nonces(request.from),\n                    request.deadline,\n                    keccak256(request.data)\n                )\n            )\n        ).tryRecover(request.signature);\n\n        return (err == ECDSA.RecoverError.NoError, recovered);\n    }",
                    "start": "219",
                    "end": "238",
                    "class": "ERC2771Forwarder",
                    "signature": "returns (bool isValid, address signer) _recoverForwardRequestSignerForwardRequestData calldata request",
                    "full_signature": "function _recoverForwardRequestSigner(ForwardRequestData calldata request) internal virtual view returns (bool isValid, address signer)",
                    "class_method_signature": "ERC2771Forwarder._recoverForwardRequestSignerForwardRequestData calldata request",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns a tuple with the recovered the signer of an EIP712 forward request message hash\n     * and a boolean indicating if the signature is valid.\n     *\n     * NOTE: The signature is considered valid if {ECDSA-tryRecover} indicates no recover error for it.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_execute",
                    "parameters": "ForwardRequestData calldata request, bool requireValidRequest",
                    "modifiers": "",
                    "return": "returns (bool success)",
                    "body": "function _execute(\n        ForwardRequestData calldata request,\n        bool requireValidRequest\n    ) internal virtual returns (bool success) {\n        (bool isTrustedForwarder, bool active, bool signerMatch, address signer) = _validate(request);\n\n        // Need to explicitly specify if a revert is required since non-reverting is default for\n        // batches and reversion is opt-in since it could be useful in some scenarios\n        if (requireValidRequest) {\n            if (!isTrustedForwarder) {\n                revert ERC2771UntrustfulTarget(request.to, address(this));\n            }\n\n            if (!active) {\n                revert ERC2771ForwarderExpiredRequest(request.deadline);\n            }\n\n            if (!signerMatch) {\n                revert ERC2771ForwarderInvalidSigner(signer, request.from);\n            }\n        }\n\n        // Ignore an invalid request because requireValidRequest = false\n        if (isTrustedForwarder && signerMatch && active) {\n            // Nonce should be used before the call to prevent reusing by reentrancy\n            uint256 currentNonce = _useNonce(signer);\n\n            uint256 reqGas = request.gas;\n            address to = request.to;\n            uint256 value = request.value;\n            bytes memory data = abi.encodePacked(request.data, request.from);\n\n            uint256 gasLeft;\n\n            assembly (\"memory-safe\") {\n                success := call(reqGas, to, value, add(data, 0x20), mload(data), 0, 0)\n                gasLeft := gas()\n            }\n\n            _checkForwardedGas(gasLeft, request);\n\n            emit ExecutedForwardRequest(signer, currentNonce, success);\n        }\n    }",
                    "start": "255",
                    "end": "298",
                    "class": "ERC2771Forwarder",
                    "signature": "returns (bool success) _executeForwardRequestData calldata request, bool requireValidRequest",
                    "full_signature": "function _execute(ForwardRequestData calldata request, bool requireValidRequest) internal virtual  returns (bool success)",
                    "class_method_signature": "ERC2771Forwarder._executeForwardRequestData calldata request, bool requireValidRequest",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Validates and executes a signed request returning the request call `success` value.\n     *\n     * Internal function without msg.value validation.\n     *\n     * Requirements:\n     *\n     * - The caller must have provided enough gas to forward with the call.\n     * - The request must be valid (see {verify}) if the `requireValidRequest` is true.\n     *\n     * Emits an {ExecutedForwardRequest} event.\n     *\n     * IMPORTANT: Using this function doesn't check that all the `msg.value` was sent, potentially\n     * leaving value stuck in the contract.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_isTrustedByTarget",
                    "parameters": "address target",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isTrustedByTarget(address target) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this)));\n\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            // Perform the staticcall and save the result in the scratch space.\n            // | Location  | Content  | Content (Hex)                                                      |\n            // |-----------|----------|--------------------------------------------------------------------|\n            // |           |          |                                                           result \u2193 |\n            // | 0x00:0x1F | selector | 0x0000000000000000000000000000000000000000000000000000000000000001 |\n            success := staticcall(gas(), target, add(encodedParams, 0x20), mload(encodedParams), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }",
                    "start": "306",
                    "end": "324",
                    "class": "ERC2771Forwarder",
                    "signature": "returns (bool) _isTrustedByTargetaddress target",
                    "full_signature": "function _isTrustedByTarget(address target) private  view returns (bool)",
                    "class_method_signature": "ERC2771Forwarder._isTrustedByTargetaddress target",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether the target trusts this forwarder.\n     *\n     * This function performs a static call to the target contract calling the\n     * {ERC2771Context-isTrustedForwarder} function.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_checkForwardedGas",
                    "parameters": "uint256 gasLeft, ForwardRequestData calldata request",
                    "modifiers": "pure",
                    "return": "",
                    "body": "function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private pure {\n        // To avoid insufficient gas griefing attacks, as referenced in https://ronan.eth.limo/blog/ethereum-gas-dangers/\n        //\n        // A malicious relayer can attempt to shrink the gas forwarded so that the underlying call reverts out-of-gas\n        // but the forwarding itself still succeeds. In order to make sure that the subcall received sufficient gas,\n        // we will inspect gasleft() after the forwarding.\n        //\n        // Let X be the gas available before the subcall, such that the subcall gets at most X * 63 / 64.\n        // We can't know X after CALL dynamic costs, but we want it to be such that X * 63 / 64 >= req.gas.\n        // Let Y be the gas used in the subcall. gasleft() measured immediately after the subcall will be gasleft() = X - Y.\n        // If the subcall ran out of gas, then Y = X * 63 / 64 and gasleft() = X - Y = X / 64.\n        // Under this assumption req.gas / 63 > gasleft() is true if and only if\n        // req.gas / 63 > X / 64, or equivalently req.gas > X * 63 / 64.\n        // This means that if the subcall runs out of gas we are able to detect that insufficient gas was passed.\n        //\n        // We will now also see that req.gas / 63 > gasleft() implies that req.gas >= X * 63 / 64.\n        // The contract guarantees Y <= req.gas, thus gasleft() = X - Y >= X - req.gas.\n        // -    req.gas / 63 > gasleft()\n        // -    req.gas / 63 >= X - req.gas\n        // -    req.gas >= X * 63 / 64\n        // In other words if req.gas < X * 63 / 64 then req.gas / 63 <= gasleft(), thus if the relayer behaves honestly\n        // the forwarding does not revert.\n        if (gasLeft < request.gas / 63) {\n            // We explicitly trigger invalid opcode to consume all gas and bubble-up the effects, since\n            // neither revert or assert consume all gas since Solidity 0.8.20\n            // https://docs.soliditylang.org/en/v0.8.20/control-structures.html#panic-via-assert-and-error-via-require\n            assembly (\"memory-safe\") {\n                invalid()\n            }\n        }\n    }",
                    "start": "338",
                    "end": "368",
                    "class": "ERC2771Forwarder",
                    "signature": " _checkForwardedGasuint256 gasLeft, ForwardRequestData calldata request",
                    "full_signature": "function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private  pure ",
                    "class_method_signature": "ERC2771Forwarder._checkForwardedGasuint256 gasLeft, ForwardRequestData calldata request",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Checks if the requested gas was correctly forwarded to the callee.\n     *\n     * As a consequence of https://eips.ethereum.org/EIPS/eip-150[EIP-150]:\n     * - At most `gasleft() - floor(gasleft() / 64)` is forwarded to the callee.\n     * - At least `floor(gasleft() / 64)` is kept in the caller.\n     *\n     * It reverts consuming all the available gas if the forwarded gas is not the requested gas.\n     *\n     * IMPORTANT: The `gasLeft` parameter should be measured exactly at the end of the forwarded call.\n     * Any gas consumed in between will make room for bypassing this check.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/governance/IGovernor.sol": [],
    "/root/openzeppelin-contracts/contracts/governance/TimelockController.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(AccessControl, ERC1155Holder)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(AccessControl, ERC1155Holder) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }",
                    "start": "160",
                    "end": "164",
                    "class": "TimelockController",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(AccessControl, ERC1155Holder) returns (bool)",
                    "class_method_signature": "TimelockController.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mismatch between the parameters length for an operation call.\n     */\n/**\n     * @dev The schedule operation doesn't meet the minimum delay.\n     */\n/**\n     * @dev The current state of an operation is not as required.\n     * The `expectedStates` is a bitmap with the bits enabled for each OperationState enum position\n     * counting from right to left.\n     *\n     * See {_encodeStateBitmap}.\n     */\n/**\n     * @dev The predecessor to an operation not yet done.\n     */\n/**\n     * @dev The caller account is not authorized.\n     */\n/**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n/**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n/**\n     * @dev Emitted when new proposal is scheduled with non-zero salt.\n     */\n/**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n/**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n/**\n     * @dev Initializes the contract with the following parameters:\n     *\n     * - `minDelay`: initial minimum delay in seconds for operations\n     * - `proposers`: accounts to be granted proposer and canceller roles\n     * - `executors`: accounts to be granted executor role\n     * - `admin`: optional account to be granted admin role; disable with zero address\n     *\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\n     * without being subject to delay, but this role should be subsequently renounced in favor of\n     * administration through timelocked proposals. Previous versions of this contract would assign\n     * this admin to the deployer automatically and should be renounced as well.\n     */\n/**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n/**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isOperation",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isOperation(bytes32 id) public view returns (bool) {\n        return getOperationState(id) != OperationState.Unset;\n    }",
                    "start": "170",
                    "end": "172",
                    "class": "TimelockController",
                    "signature": "returns (bool) isOperationbytes32 id",
                    "full_signature": "function isOperation(bytes32 id) public  view returns (bool)",
                    "class_method_signature": "TimelockController.isOperationbytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether an id corresponds to a registered operation. This\n     * includes both Waiting, Ready, and Done operations.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isOperationPending",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isOperationPending(bytes32 id) public view returns (bool) {\n        OperationState state = getOperationState(id);\n        return state == OperationState.Waiting || state == OperationState.Ready;\n    }",
                    "start": "177",
                    "end": "180",
                    "class": "TimelockController",
                    "signature": "returns (bool) isOperationPendingbytes32 id",
                    "full_signature": "function isOperationPending(bytes32 id) public  view returns (bool)",
                    "class_method_signature": "TimelockController.isOperationPendingbytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether an operation is pending or not. Note that a \"pending\" operation may also be \"ready\".\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isOperationReady",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isOperationReady(bytes32 id) public view returns (bool) {\n        return getOperationState(id) == OperationState.Ready;\n    }",
                    "start": "185",
                    "end": "187",
                    "class": "TimelockController",
                    "signature": "returns (bool) isOperationReadybytes32 id",
                    "full_signature": "function isOperationReady(bytes32 id) public  view returns (bool)",
                    "class_method_signature": "TimelockController.isOperationReadybytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether an operation is ready for execution. Note that a \"ready\" operation is also \"pending\".\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isOperationDone",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isOperationDone(bytes32 id) public view returns (bool) {\n        return getOperationState(id) == OperationState.Done;\n    }",
                    "start": "192",
                    "end": "194",
                    "class": "TimelockController",
                    "signature": "returns (bool) isOperationDonebytes32 id",
                    "full_signature": "function isOperationDone(bytes32 id) public  view returns (bool)",
                    "class_method_signature": "TimelockController.isOperationDonebytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether an operation is done or not.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getTimestamp",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getTimestamp(bytes32 id) public view virtual returns (uint256) {\n        return _timestamps[id];\n    }",
                    "start": "200",
                    "end": "202",
                    "class": "TimelockController",
                    "signature": "returns (uint256) getTimestampbytes32 id",
                    "full_signature": "function getTimestamp(bytes32 id) public virtual view returns (uint256)",
                    "class_method_signature": "TimelockController.getTimestampbytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the timestamp at which an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getOperationState",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (OperationState)",
                    "body": "function getOperationState(bytes32 id) public view virtual returns (OperationState) {\n        uint256 timestamp = getTimestamp(id);\n        if (timestamp == 0) {\n            return OperationState.Unset;\n        } else if (timestamp == _DONE_TIMESTAMP) {\n            return OperationState.Done;\n        } else if (timestamp > block.timestamp) {\n            return OperationState.Waiting;\n        } else {\n            return OperationState.Ready;\n        }\n    }",
                    "start": "207",
                    "end": "218",
                    "class": "TimelockController",
                    "signature": "returns (OperationState) getOperationStatebytes32 id",
                    "full_signature": "function getOperationState(bytes32 id) public virtual view returns (OperationState)",
                    "class_method_signature": "TimelockController.getOperationStatebytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns operation state.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getMinDelay",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getMinDelay() public view virtual returns (uint256) {\n        return _minDelay;\n    }",
                    "start": "225",
                    "end": "227",
                    "class": "TimelockController",
                    "signature": "returns (uint256) getMinDelay",
                    "full_signature": "function getMinDelay() public virtual view returns (uint256)",
                    "class_method_signature": "TimelockController.getMinDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the minimum delay in seconds for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "hashOperation",
                    "parameters": "address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }",
                    "start": "233",
                    "end": "241",
                    "class": "TimelockController",
                    "signature": "returns (bytes32) hashOperationaddress target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt",
                    "full_signature": "function hashOperation(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public virtual pure returns (bytes32)",
                    "class_method_signature": "TimelockController.hashOperationaddress target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "hashOperationBatch",
                    "parameters": "address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\n    }",
                    "start": "247",
                    "end": "255",
                    "class": "TimelockController",
                    "signature": "returns (bytes32) hashOperationBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "full_signature": "function hashOperationBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt) public virtual pure returns (bytes32)",
                    "class_method_signature": "TimelockController.hashOperationBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "schedule",
                    "parameters": "address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "modifiers": "",
                    "return": "",
                    "body": "function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }",
                    "start": "266",
                    "end": "280",
                    "class": "TimelockController",
                    "signature": " scheduleaddress target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "full_signature": "function schedule(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual  ",
                    "class_method_signature": "TimelockController.scheduleaddress target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits {CallSalt} if salt is nonzero, and {CallScheduled}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "scheduleBatch",
                    "parameters": "address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "modifiers": "",
                    "return": "",
                    "body": "function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        if (targets.length != values.length || targets.length != payloads.length) {\n            revert TimelockInvalidOperationLength(targets.length, payloads.length, values.length);\n        }\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\n        }\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }",
                    "start": "291",
                    "end": "311",
                    "class": "TimelockController",
                    "signature": " scheduleBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "full_signature": "function scheduleBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual  ",
                    "class_method_signature": "TimelockController.scheduleBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt, uint256 delay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_schedule",
                    "parameters": "bytes32 id, uint256 delay",
                    "modifiers": "",
                    "return": "",
                    "body": "function _schedule(bytes32 id, uint256 delay) private {\n        if (isOperation(id)) {\n            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Unset));\n        }\n        uint256 minDelay = getMinDelay();\n        if (delay < minDelay) {\n            revert TimelockInsufficientDelay(delay, minDelay);\n        }\n        _timestamps[id] = block.timestamp + delay;\n    }",
                    "start": "316",
                    "end": "325",
                    "class": "TimelockController",
                    "signature": " _schedulebytes32 id, uint256 delay",
                    "full_signature": "function _schedule(bytes32 id, uint256 delay) private   ",
                    "class_method_signature": "TimelockController._schedulebytes32 id, uint256 delay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Schedule an operation that is to become valid after a given delay.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "cancel",
                    "parameters": "bytes32 id",
                    "modifiers": "",
                    "return": "",
                    "body": "function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\n        if (!isOperationPending(id)) {\n            revert TimelockUnexpectedOperationState(\n                id,\n                _encodeStateBitmap(OperationState.Waiting) | _encodeStateBitmap(OperationState.Ready)\n            );\n        }\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }",
                    "start": "334",
                    "end": "344",
                    "class": "TimelockController",
                    "signature": " cancelbytes32 id",
                    "full_signature": "function cancel(bytes32 id) public virtual  ",
                    "class_method_signature": "TimelockController.cancelbytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'canceller' role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "execute",
                    "parameters": "address target, uint256 value, bytes calldata payload, bytes32 predecessor, bytes32 salt",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function execute(\n        address target,\n        uint256 value,\n        bytes calldata payload,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        _execute(target, value, payload);\n        emit CallExecuted(id, 0, target, value, payload);\n        _afterCall(id);\n    }",
                    "start": "358",
                    "end": "371",
                    "class": "TimelockController",
                    "signature": " executeaddress target, uint256 value, bytes calldata payload, bytes32 predecessor, bytes32 salt",
                    "full_signature": "function execute(address target, uint256 value, bytes calldata payload, bytes32 predecessor, bytes32 salt) public virtual payable ",
                    "class_method_signature": "TimelockController.executeaddress target, uint256 value, bytes calldata payload, bytes32 predecessor, bytes32 salt",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n// This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n// thus any modifications to the operation during reentrancy should be caught.\n// slither-disable-next-line reentrancy-eth\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "executeBatch",
                    "parameters": "address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        if (targets.length != values.length || targets.length != payloads.length) {\n            revert TimelockInvalidOperationLength(targets.length, payloads.length, values.length);\n        }\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            address target = targets[i];\n            uint256 value = values[i];\n            bytes calldata payload = payloads[i];\n            _execute(target, value, payload);\n            emit CallExecuted(id, i, target, value, payload);\n        }\n        _afterCall(id);\n    }",
                    "start": "385",
                    "end": "407",
                    "class": "TimelockController",
                    "signature": " executeBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "full_signature": "function executeBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt) public virtual payable ",
                    "class_method_signature": "TimelockController.executeBatchaddress[] calldata targets, uint256[] calldata values, bytes[] calldata payloads, bytes32 predecessor, bytes32 salt",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n// This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n// thus any modifications to the operation during reentrancy should be caught.\n// slither-disable-next-line reentrancy-eth\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_execute",
                    "parameters": "address target, uint256 value, bytes calldata data",
                    "modifiers": "",
                    "return": "",
                    "body": "function _execute(address target, uint256 value, bytes calldata data) internal virtual {\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        Address.verifyCallResult(success, returndata);\n    }",
                    "start": "412",
                    "end": "415",
                    "class": "TimelockController",
                    "signature": " _executeaddress target, uint256 value, bytes calldata data",
                    "full_signature": "function _execute(address target, uint256 value, bytes calldata data) internal virtual  ",
                    "class_method_signature": "TimelockController._executeaddress target, uint256 value, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Execute an operation's call.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_beforeCall",
                    "parameters": "bytes32 id, bytes32 predecessor",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        if (!isOperationReady(id)) {\n            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Ready));\n        }\n        if (predecessor != bytes32(0) && !isOperationDone(predecessor)) {\n            revert TimelockUnexecutedPredecessor(predecessor);\n        }\n    }",
                    "start": "420",
                    "end": "427",
                    "class": "TimelockController",
                    "signature": " _beforeCallbytes32 id, bytes32 predecessor",
                    "full_signature": "function _beforeCall(bytes32 id, bytes32 predecessor) private  view ",
                    "class_method_signature": "TimelockController._beforeCallbytes32 id, bytes32 predecessor",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Checks before execution of an operation's calls.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_afterCall",
                    "parameters": "bytes32 id",
                    "modifiers": "",
                    "return": "",
                    "body": "function _afterCall(bytes32 id) private {\n        if (!isOperationReady(id)) {\n            revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Ready));\n        }\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }",
                    "start": "432",
                    "end": "437",
                    "class": "TimelockController",
                    "signature": " _afterCallbytes32 id",
                    "full_signature": "function _afterCall(bytes32 id) private   ",
                    "class_method_signature": "TimelockController._afterCallbytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Checks after execution of an operation's calls.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "updateDelay",
                    "parameters": "uint256 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function updateDelay(uint256 newDelay) external virtual {\n        address sender = _msgSender();\n        if (sender != address(this)) {\n            revert TimelockUnauthorizedCaller(sender);\n        }\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }",
                    "start": "449",
                    "end": "456",
                    "class": "TimelockController",
                    "signature": " updateDelayuint256 newDelay",
                    "full_signature": "function updateDelay(uint256 newDelay) external virtual  ",
                    "class_method_signature": "TimelockController.updateDelayuint256 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "_encodeStateBitmap",
                    "parameters": "OperationState operationState",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function _encodeStateBitmap(OperationState operationState) internal pure returns (bytes32) {\n        return bytes32(1 << uint8(operationState));\n    }",
                    "start": "469",
                    "end": "471",
                    "class": "TimelockController",
                    "signature": "returns (bytes32) _encodeStateBitmapOperationState operationState",
                    "full_signature": "function _encodeStateBitmap(OperationState operationState) internal  pure returns (bytes32)",
                    "class_method_signature": "TimelockController._encodeStateBitmapOperationState operationState",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Encodes a `OperationState` into a `bytes32` representation where each bit enabled corresponds to\n     * the underlying position in the `OperationState` enum. For example:\n     *\n     * 0x000...1000\n     *   ^^^^^^----- ...\n     *         ^---- Done\n     *          ^--- Ready\n     *           ^-- Waiting\n     *            ^- Unset\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/governance/utils/VotesExtended.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "getPastDelegate",
                    "parameters": "address account, uint256 timepoint",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function getPastDelegate(address account, uint256 timepoint) public view virtual returns (address) {\n        return address(_userDelegationCheckpoints[account].upperLookupRecent(_validateTimepoint(timepoint)));\n    }",
                    "start": "48",
                    "end": "50",
                    "class": "VotesExtended",
                    "signature": "returns (address) getPastDelegateaddress account, uint256 timepoint",
                    "full_signature": "function getPastDelegate(address account, uint256 timepoint) public virtual view returns (address)",
                    "class_method_signature": "VotesExtended.getPastDelegateaddress account, uint256 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the delegate of an `account` at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getPastBalanceOf",
                    "parameters": "address account, uint256 timepoint",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getPastBalanceOf(address account, uint256 timepoint) public view virtual returns (uint256) {\n        return _userVotingUnitsCheckpoints[account].upperLookupRecent(_validateTimepoint(timepoint));\n    }",
                    "start": "60",
                    "end": "62",
                    "class": "VotesExtended",
                    "signature": "returns (uint256) getPastBalanceOfaddress account, uint256 timepoint",
                    "full_signature": "function getPastBalanceOf(address account, uint256 timepoint) public virtual view returns (uint256)",
                    "class_method_signature": "VotesExtended.getPastBalanceOfaddress account, uint256 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the `balanceOf` of an `account` at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_delegate",
                    "parameters": "address account, address delegatee",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _delegate(address account, address delegatee) internal virtual override {\n        super._delegate(account, delegatee);\n\n        _userDelegationCheckpoints[account].push(clock(), uint160(delegatee));\n    }",
                    "start": "65",
                    "end": "69",
                    "class": "VotesExtended",
                    "signature": " _delegateaddress account, address delegatee",
                    "full_signature": "function _delegate(address account, address delegatee) internal virtual override ",
                    "class_method_signature": "VotesExtended._delegateaddress account, address delegatee",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc Votes\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_transferVotingUnits",
                    "parameters": "address from, address to, uint256 amount",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _transferVotingUnits(address from, address to, uint256 amount) internal virtual override {\n        super._transferVotingUnits(from, to, amount);\n        if (from != to) {\n            if (from != address(0)) {\n                _userVotingUnitsCheckpoints[from].push(clock(), SafeCast.toUint208(_getVotingUnits(from)));\n            }\n            if (to != address(0)) {\n                _userVotingUnitsCheckpoints[to].push(clock(), SafeCast.toUint208(_getVotingUnits(to)));\n            }\n        }\n    }",
                    "start": "72",
                    "end": "82",
                    "class": "VotesExtended",
                    "signature": " _transferVotingUnitsaddress from, address to, uint256 amount",
                    "full_signature": "function _transferVotingUnits(address from, address to, uint256 amount) internal virtual override ",
                    "class_method_signature": "VotesExtended._transferVotingUnitsaddress from, address to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc Votes\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/governance/utils/Votes.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "clock",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function clock() public view virtual returns (uint48) {\n        return Time.blockNumber();\n    }",
                    "start": "58",
                    "end": "60",
                    "class": "Votes",
                    "signature": "returns (uint48) clock",
                    "full_signature": "function clock() public virtual view returns (uint48)",
                    "class_method_signature": "Votes.clock",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The clock was incorrectly modified.\n     */\n/**\n     * @dev Lookup to future votes is not available.\n     */\n/**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\n     * checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public view virtual returns (string memory) {\n        // Check that the clock was not modified\n        if (clock() != Time.blockNumber()) {\n            revert ERC6372InconsistentClock();\n        }\n        return \"mode=blocknumber&from=default\";\n    }",
                    "start": "66",
                    "end": "72",
                    "class": "Votes",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public virtual view returns (string memory)",
                    "class_method_signature": "Votes.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Machine-readable description of the clock as specified in ERC-6372.\n     */\n// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_validateTimepoint",
                    "parameters": "uint256 timepoint",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function _validateTimepoint(uint256 timepoint) internal view returns (uint48) {\n        uint48 currentTimepoint = clock();\n        if (timepoint >= currentTimepoint) revert ERC5805FutureLookup(timepoint, currentTimepoint);\n        return SafeCast.toUint48(timepoint);\n    }",
                    "start": "77",
                    "end": "81",
                    "class": "Votes",
                    "signature": "returns (uint48) _validateTimepointuint256 timepoint",
                    "full_signature": "function _validateTimepoint(uint256 timepoint) internal  view returns (uint48)",
                    "class_method_signature": "Votes._validateTimepointuint256 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Validate that a timepoint is in the past, and return it as a uint48.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "getVotes",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getVotes(address account) public view virtual returns (uint256) {\n        return _delegateCheckpoints[account].latest();\n    }",
                    "start": "86",
                    "end": "88",
                    "class": "Votes",
                    "signature": "returns (uint256) getVotesaddress account",
                    "full_signature": "function getVotes(address account) public virtual view returns (uint256)",
                    "class_method_signature": "Votes.getVotesaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getPastVotes",
                    "parameters": "address account, uint256 timepoint",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\n        return _delegateCheckpoints[account].upperLookupRecent(_validateTimepoint(timepoint));\n    }",
                    "start": "98",
                    "end": "100",
                    "class": "Votes",
                    "signature": "returns (uint256) getPastVotesaddress account, uint256 timepoint",
                    "full_signature": "function getPastVotes(address account, uint256 timepoint) public virtual view returns (uint256)",
                    "class_method_signature": "Votes.getPastVotesaddress account, uint256 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getPastTotalSupply",
                    "parameters": "uint256 timepoint",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getPastTotalSupply(uint256 timepoint) public view virtual returns (uint256) {\n        return _totalCheckpoints.upperLookupRecent(_validateTimepoint(timepoint));\n    }",
                    "start": "114",
                    "end": "116",
                    "class": "Votes",
                    "signature": "returns (uint256) getPastTotalSupplyuint256 timepoint",
                    "full_signature": "function getPastTotalSupply(uint256 timepoint) public virtual view returns (uint256)",
                    "class_method_signature": "Votes.getPastTotalSupplyuint256 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_getTotalSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _getTotalSupply() internal view virtual returns (uint256) {\n        return _totalCheckpoints.latest();\n    }",
                    "start": "121",
                    "end": "123",
                    "class": "Votes",
                    "signature": "returns (uint256) _getTotalSupply",
                    "full_signature": "function _getTotalSupply() internal virtual view returns (uint256)",
                    "class_method_signature": "Votes._getTotalSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the current total supply of votes.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "delegates",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function delegates(address account) public view virtual returns (address) {\n        return _delegatee[account];\n    }",
                    "start": "128",
                    "end": "130",
                    "class": "Votes",
                    "signature": "returns (address) delegatesaddress account",
                    "full_signature": "function delegates(address account) public virtual view returns (address)",
                    "class_method_signature": "Votes.delegatesaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "delegate",
                    "parameters": "address delegatee",
                    "modifiers": "",
                    "return": "",
                    "body": "function delegate(address delegatee) public virtual {\n        address account = _msgSender();\n        _delegate(account, delegatee);\n    }",
                    "start": "135",
                    "end": "138",
                    "class": "Votes",
                    "signature": " delegateaddress delegatee",
                    "full_signature": "function delegate(address delegatee) public virtual  ",
                    "class_method_signature": "Votes.delegateaddress delegatee",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "delegateBySig",
                    "parameters": "address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "modifiers": "",
                    "return": "",
                    "body": "function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > expiry) {\n            revert VotesExpiredSignature(expiry);\n        }\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        _useCheckedNonce(signer, nonce);\n        _delegate(signer, delegatee);\n    }",
                    "start": "143",
                    "end": "162",
                    "class": "Votes",
                    "signature": " delegateBySigaddress delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "full_signature": "function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) public virtual  ",
                    "class_method_signature": "Votes.delegateBySigaddress delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_delegate",
                    "parameters": "address account, address delegatee",
                    "modifiers": "",
                    "return": "",
                    "body": "function _delegate(address account, address delegatee) internal virtual {\n        address oldDelegate = delegates(account);\n        _delegatee[account] = delegatee;\n\n        emit DelegateChanged(account, oldDelegate, delegatee);\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\n    }",
                    "start": "169",
                    "end": "175",
                    "class": "Votes",
                    "signature": " _delegateaddress account, address delegatee",
                    "full_signature": "function _delegate(address account, address delegatee) internal virtual  ",
                    "class_method_signature": "Votes._delegateaddress account, address delegatee",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\n     *\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_transferVotingUnits",
                    "parameters": "address from, address to, uint256 amount",
                    "modifiers": "",
                    "return": "",
                    "body": "function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {\n        if (from == address(0)) {\n            _push(_totalCheckpoints, _add, SafeCast.toUint208(amount));\n        }\n        if (to == address(0)) {\n            _push(_totalCheckpoints, _subtract, SafeCast.toUint208(amount));\n        }\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\n    }",
                    "start": "181",
                    "end": "189",
                    "class": "Votes",
                    "signature": " _transferVotingUnitsaddress from, address to, uint256 amount",
                    "full_signature": "function _transferVotingUnits(address from, address to, uint256 amount) internal virtual  ",
                    "class_method_signature": "Votes._transferVotingUnitsaddress from, address to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_moveDelegateVotes",
                    "parameters": "address from, address to, uint256 amount",
                    "modifiers": "",
                    "return": "",
                    "body": "function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual {\n        if (from != to && amount > 0) {\n            if (from != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _push(\n                    _delegateCheckpoints[from],\n                    _subtract,\n                    SafeCast.toUint208(amount)\n                );\n                emit DelegateVotesChanged(from, oldValue, newValue);\n            }\n            if (to != address(0)) {\n                (uint256 oldValue, uint256 newValue) = _push(\n                    _delegateCheckpoints[to],\n                    _add,\n                    SafeCast.toUint208(amount)\n                );\n                emit DelegateVotesChanged(to, oldValue, newValue);\n            }\n        }\n    }",
                    "start": "194",
                    "end": "213",
                    "class": "Votes",
                    "signature": " _moveDelegateVotesaddress from, address to, uint256 amount",
                    "full_signature": "function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual  ",
                    "class_method_signature": "Votes._moveDelegateVotesaddress from, address to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Moves delegated votes from one delegate to another.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_numCheckpoints",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function _numCheckpoints(address account) internal view virtual returns (uint32) {\n        return SafeCast.toUint32(_delegateCheckpoints[account].length());\n    }",
                    "start": "218",
                    "end": "220",
                    "class": "Votes",
                    "signature": "returns (uint32) _numCheckpointsaddress account",
                    "full_signature": "function _numCheckpoints(address account) internal virtual view returns (uint32)",
                    "class_method_signature": "Votes._numCheckpointsaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get number of checkpoints for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_checkpoints",
                    "parameters": "address account, uint32 pos",
                    "modifiers": "view",
                    "return": "returns (Checkpoints.Checkpoint208 memory)",
                    "body": "function _checkpoints(\n        address account,\n        uint32 pos\n    ) internal view virtual returns (Checkpoints.Checkpoint208 memory) {\n        return _delegateCheckpoints[account].at(pos);\n    }",
                    "start": "225",
                    "end": "230",
                    "class": "Votes",
                    "signature": "returns (Checkpoints.Checkpoint208 memory) _checkpointsaddress account, uint32 pos",
                    "full_signature": "function _checkpoints(address account, uint32 pos) internal virtual view returns (Checkpoints.Checkpoint208 memory)",
                    "class_method_signature": "Votes._checkpointsaddress account, uint32 pos",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getVotingUnits",
                    "parameters": "address",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _getVotingUnits(address) internal view virtual returns (uint256);",
                    "start": "251",
                    "end": "251",
                    "class": "Votes",
                    "signature": "returns (uint256) _getVotingUnitsaddress",
                    "full_signature": "function _getVotingUnits(address) internal virtual view returns (uint256)",
                    "class_method_signature": "Votes._getVotingUnitsaddress",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Must return the voting units held by an account.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/governance/utils/IVotes.sol": [],
    "/root/openzeppelin-contracts/contracts/governance/extensions/GovernorVotesQuorumFraction.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "quorumNumerator",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function quorumNumerator() public view virtual returns (uint256) {\n        return _quorumNumeratorHistory.latest();\n    }",
                    "start": "40",
                    "end": "42",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": "returns (uint256) quorumNumerator",
                    "full_signature": "function quorumNumerator() public virtual view returns (uint256)",
                    "class_method_signature": "GovernorVotesQuorumFraction.quorumNumerator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The quorum set is not a valid fraction.\n     */\n/**\n     * @dev Initialize quorum as a fraction of the token's total supply.\n     *\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\n     * customized by overriding {quorumDenominator}.\n     */\n/**\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "quorumNumerator",
                    "parameters": "uint256 timepoint",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function quorumNumerator(uint256 timepoint) public view virtual returns (uint256) {\n        uint256 length = _quorumNumeratorHistory._checkpoints.length;\n\n        // Optimistic search, check the latest checkpoint\n        Checkpoints.Checkpoint208 storage latest = _quorumNumeratorHistory._checkpoints[length - 1];\n        uint48 latestKey = latest._key;\n        uint208 latestValue = latest._value;\n        if (latestKey <= timepoint) {\n            return latestValue;\n        }\n\n        // Otherwise, do the binary search\n        return _quorumNumeratorHistory.upperLookupRecent(SafeCast.toUint48(timepoint));\n    }",
                    "start": "47",
                    "end": "60",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": "returns (uint256) quorumNumeratoruint256 timepoint",
                    "full_signature": "function quorumNumerator(uint256 timepoint) public virtual view returns (uint256)",
                    "class_method_signature": "GovernorVotesQuorumFraction.quorumNumeratoruint256 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the quorum numerator at a specific timepoint. See {quorumDenominator}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "quorumDenominator",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function quorumDenominator() public view virtual returns (uint256) {\n        return 100;\n    }",
                    "start": "65",
                    "end": "67",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": "returns (uint256) quorumDenominator",
                    "full_signature": "function quorumDenominator() public virtual view returns (uint256)",
                    "class_method_signature": "GovernorVotesQuorumFraction.quorumDenominator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "quorum",
                    "parameters": "uint256 timepoint",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function quorum(uint256 timepoint) public view virtual override returns (uint256) {\n        return (token().getPastTotalSupply(timepoint) * quorumNumerator(timepoint)) / quorumDenominator();\n    }",
                    "start": "72",
                    "end": "74",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": "returns (uint256) quorumuint256 timepoint",
                    "full_signature": "function quorum(uint256 timepoint) public virtual override returns (uint256)",
                    "class_method_signature": "GovernorVotesQuorumFraction.quorumuint256 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the quorum for a timepoint, in terms of number of votes: `supply * numerator / denominator`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "updateQuorumNumerator",
                    "parameters": "uint256 newQuorumNumerator",
                    "modifiers": "",
                    "return": "",
                    "body": "function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\n        _updateQuorumNumerator(newQuorumNumerator);\n    }",
                    "start": "86",
                    "end": "88",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": " updateQuorumNumeratoruint256 newQuorumNumerator",
                    "full_signature": "function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual  ",
                    "class_method_signature": "GovernorVotesQuorumFraction.updateQuorumNumeratoruint256 newQuorumNumerator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - Must be called through a governance proposal.\n     * - New numerator must be smaller or equal to the denominator.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "_updateQuorumNumerator",
                    "parameters": "uint256 newQuorumNumerator",
                    "modifiers": "",
                    "return": "",
                    "body": "function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\n        uint256 denominator = quorumDenominator();\n        if (newQuorumNumerator > denominator) {\n            revert GovernorInvalidQuorumFraction(newQuorumNumerator, denominator);\n        }\n\n        uint256 oldQuorumNumerator = quorumNumerator();\n        _quorumNumeratorHistory.push(clock(), SafeCast.toUint208(newQuorumNumerator));\n\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\n    }",
                    "start": "99",
                    "end": "109",
                    "class": "GovernorVotesQuorumFraction",
                    "signature": " _updateQuorumNumeratoruint256 newQuorumNumerator",
                    "full_signature": "function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual  ",
                    "class_method_signature": "GovernorVotesQuorumFraction._updateQuorumNumeratoruint256 newQuorumNumerator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - New numerator must be smaller or equal to the denominator.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/governance/extensions/GovernorSettings.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "votingDelay",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function votingDelay() public view virtual override returns (uint256) {\n        return _votingDelay;\n    }",
                    "start": "35",
                    "end": "37",
                    "class": "GovernorSettings",
                    "signature": "returns (uint256) votingDelay",
                    "full_signature": "function votingDelay() public virtual override returns (uint256)",
                    "class_method_signature": "GovernorSettings.votingDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// amount of token\n// timepoint: limited to uint48 in core (same as clock() type)\n// duration: limited to uint32 in core\n/**\n     * @dev Initialize the governance parameters.\n     */\n/**\n     * @dev See {IGovernor-votingDelay}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "votingPeriod",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function votingPeriod() public view virtual override returns (uint256) {\n        return _votingPeriod;\n    }",
                    "start": "42",
                    "end": "44",
                    "class": "GovernorSettings",
                    "signature": "returns (uint256) votingPeriod",
                    "full_signature": "function votingPeriod() public virtual override returns (uint256)",
                    "class_method_signature": "GovernorSettings.votingPeriod",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IGovernor-votingPeriod}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalThreshold",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function proposalThreshold() public view virtual override returns (uint256) {\n        return _proposalThreshold;\n    }",
                    "start": "49",
                    "end": "51",
                    "class": "GovernorSettings",
                    "signature": "returns (uint256) proposalThreshold",
                    "full_signature": "function proposalThreshold() public virtual override returns (uint256)",
                    "class_method_signature": "GovernorSettings.proposalThreshold",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {Governor-proposalThreshold}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setVotingDelay",
                    "parameters": "uint48 newVotingDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function setVotingDelay(uint48 newVotingDelay) public virtual onlyGovernance {\n        _setVotingDelay(newVotingDelay);\n    }",
                    "start": "58",
                    "end": "60",
                    "class": "GovernorSettings",
                    "signature": " setVotingDelayuint48 newVotingDelay",
                    "full_signature": "function setVotingDelay(uint48 newVotingDelay) public virtual  ",
                    "class_method_signature": "GovernorSettings.setVotingDelayuint48 newVotingDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setVotingPeriod",
                    "parameters": "uint32 newVotingPeriod",
                    "modifiers": "",
                    "return": "",
                    "body": "function setVotingPeriod(uint32 newVotingPeriod) public virtual onlyGovernance {\n        _setVotingPeriod(newVotingPeriod);\n    }",
                    "start": "67",
                    "end": "69",
                    "class": "GovernorSettings",
                    "signature": " setVotingPerioduint32 newVotingPeriod",
                    "full_signature": "function setVotingPeriod(uint32 newVotingPeriod) public virtual  ",
                    "class_method_signature": "GovernorSettings.setVotingPerioduint32 newVotingPeriod",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setProposalThreshold",
                    "parameters": "uint256 newProposalThreshold",
                    "modifiers": "",
                    "return": "",
                    "body": "function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\n        _setProposalThreshold(newProposalThreshold);\n    }",
                    "start": "76",
                    "end": "78",
                    "class": "GovernorSettings",
                    "signature": " setProposalThresholduint256 newProposalThreshold",
                    "full_signature": "function setProposalThreshold(uint256 newProposalThreshold) public virtual  ",
                    "class_method_signature": "GovernorSettings.setProposalThresholduint256 newProposalThreshold",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setVotingDelay",
                    "parameters": "uint48 newVotingDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setVotingDelay(uint48 newVotingDelay) internal virtual {\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\n        _votingDelay = newVotingDelay;\n    }",
                    "start": "85",
                    "end": "88",
                    "class": "GovernorSettings",
                    "signature": " _setVotingDelayuint48 newVotingDelay",
                    "full_signature": "function _setVotingDelay(uint48 newVotingDelay) internal virtual  ",
                    "class_method_signature": "GovernorSettings._setVotingDelayuint48 newVotingDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal setter for the voting delay.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setVotingPeriod",
                    "parameters": "uint32 newVotingPeriod",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setVotingPeriod(uint32 newVotingPeriod) internal virtual {\n        if (newVotingPeriod == 0) {\n            revert GovernorInvalidVotingPeriod(0);\n        }\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\n        _votingPeriod = newVotingPeriod;\n    }",
                    "start": "95",
                    "end": "101",
                    "class": "GovernorSettings",
                    "signature": " _setVotingPerioduint32 newVotingPeriod",
                    "full_signature": "function _setVotingPeriod(uint32 newVotingPeriod) internal virtual  ",
                    "class_method_signature": "GovernorSettings._setVotingPerioduint32 newVotingPeriod",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal setter for the voting period.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setProposalThreshold",
                    "parameters": "uint256 newProposalThreshold",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\n        _proposalThreshold = newProposalThreshold;\n    }",
                    "start": "108",
                    "end": "111",
                    "class": "GovernorSettings",
                    "signature": " _setProposalThresholduint256 newProposalThreshold",
                    "full_signature": "function _setProposalThreshold(uint256 newProposalThreshold) internal virtual  ",
                    "class_method_signature": "GovernorSettings._setProposalThresholduint256 newProposalThreshold",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal setter for the proposal threshold.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/governance/extensions/GovernorPreventLateQuorum.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "proposalDeadline",
                    "parameters": "uint256 proposalId",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\n        return Math.max(super.proposalDeadline(proposalId), _extendedDeadlines[proposalId]);\n    }",
                    "start": "42",
                    "end": "44",
                    "class": "GovernorPreventLateQuorum",
                    "signature": "returns (uint256) proposalDeadlineuint256 proposalId",
                    "full_signature": "function proposalDeadline(uint256 proposalId) public virtual override returns (uint256)",
                    "class_method_signature": "GovernorPreventLateQuorum.proposalDeadlineuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Emitted when a proposal deadline is pushed back due to reaching quorum late in its voting period.\n/// @dev Emitted when the {lateQuorumVoteExtension} parameter is changed.\n/**\n     * @dev Initializes the vote extension parameter: the time in either number of blocks or seconds (depending on the\n     * governor clock mode) that is required to pass since the moment a proposal reaches quorum until its voting period\n     * ends. If necessary the voting period will be extended beyond the one set during proposal creation.\n     */\n/**\n     * @dev Returns the proposal deadline, which may have been extended beyond that set at proposal creation, if the\n     * proposal reached quorum late in the voting period. See {Governor-proposalDeadline}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_tallyUpdated",
                    "parameters": "uint256 proposalId",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _tallyUpdated(uint256 proposalId) internal virtual override {\n        super._tallyUpdated(proposalId);\n        if (_extendedDeadlines[proposalId] == 0 && _quorumReached(proposalId)) {\n            uint48 extendedDeadline = clock() + lateQuorumVoteExtension();\n\n            if (extendedDeadline > proposalDeadline(proposalId)) {\n                emit ProposalExtended(proposalId, extendedDeadline);\n            }\n\n            _extendedDeadlines[proposalId] = extendedDeadline;\n        }\n    }",
                    "start": "51",
                    "end": "62",
                    "class": "GovernorPreventLateQuorum",
                    "signature": " _tallyUpdateduint256 proposalId",
                    "full_signature": "function _tallyUpdated(uint256 proposalId) internal virtual override ",
                    "class_method_signature": "GovernorPreventLateQuorum._tallyUpdateduint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Vote tally updated and detects if it caused quorum to be reached, potentially extending the voting period.\n     *\n     * May emit a {ProposalExtended} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "lateQuorumVoteExtension",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function lateQuorumVoteExtension() public view virtual returns (uint48) {\n        return _voteExtension;\n    }",
                    "start": "68",
                    "end": "70",
                    "class": "GovernorPreventLateQuorum",
                    "signature": "returns (uint48) lateQuorumVoteExtension",
                    "full_signature": "function lateQuorumVoteExtension() public virtual view returns (uint48)",
                    "class_method_signature": "GovernorPreventLateQuorum.lateQuorumVoteExtension",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the current value of the vote extension parameter: the number of blocks that are required to pass\n     * from the time a proposal reaches quorum until its voting period ends.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setLateQuorumVoteExtension",
                    "parameters": "uint48 newVoteExtension",
                    "modifiers": "",
                    "return": "",
                    "body": "function setLateQuorumVoteExtension(uint48 newVoteExtension) public virtual onlyGovernance {\n        _setLateQuorumVoteExtension(newVoteExtension);\n    }",
                    "start": "78",
                    "end": "80",
                    "class": "GovernorPreventLateQuorum",
                    "signature": " setLateQuorumVoteExtensionuint48 newVoteExtension",
                    "full_signature": "function setLateQuorumVoteExtension(uint48 newVoteExtension) public virtual  ",
                    "class_method_signature": "GovernorPreventLateQuorum.setLateQuorumVoteExtensionuint48 newVoteExtension",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Changes the {lateQuorumVoteExtension}. This operation can only be performed by the governance executor,\n     * generally through a governance proposal.\n     *\n     * Emits a {LateQuorumVoteExtensionSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setLateQuorumVoteExtension",
                    "parameters": "uint48 newVoteExtension",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setLateQuorumVoteExtension(uint48 newVoteExtension) internal virtual {\n        emit LateQuorumVoteExtensionSet(_voteExtension, newVoteExtension);\n        _voteExtension = newVoteExtension;\n    }",
                    "start": "88",
                    "end": "91",
                    "class": "GovernorPreventLateQuorum",
                    "signature": " _setLateQuorumVoteExtensionuint48 newVoteExtension",
                    "full_signature": "function _setLateQuorumVoteExtension(uint48 newVoteExtension) internal virtual  ",
                    "class_method_signature": "GovernorPreventLateQuorum._setLateQuorumVoteExtensionuint48 newVoteExtension",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Changes the {lateQuorumVoteExtension}. This is an internal function that can be exposed in a public function\n     * like {setLateQuorumVoteExtension} if another access control mechanism is needed.\n     *\n     * Emits a {LateQuorumVoteExtensionSet} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/governance/extensions/GovernorTimelockControl.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "state",
                    "parameters": "uint256 proposalId",
                    "modifiers": "override",
                    "return": "returns (ProposalState)",
                    "body": "function state(uint256 proposalId) public view virtual override returns (ProposalState) {\n        ProposalState currentState = super.state(proposalId);\n\n        if (currentState != ProposalState.Queued) {\n            return currentState;\n        }\n\n        bytes32 queueid = _timelockIds[proposalId];\n        if (_timelock.isOperationPending(queueid)) {\n            return ProposalState.Queued;\n        } else if (_timelock.isOperationDone(queueid)) {\n            // This can happen if the proposal is executed directly on the timelock.\n            return ProposalState.Executed;\n        } else {\n            // This can happen if the proposal is canceled directly on the timelock.\n            return ProposalState.Canceled;\n        }\n    }",
                    "start": "44",
                    "end": "61",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (ProposalState) stateuint256 proposalId",
                    "full_signature": "function state(uint256 proposalId) public virtual override returns (ProposalState)",
                    "class_method_signature": "GovernorTimelockControl.stateuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\n     */\n/**\n     * @dev Set the timelock.\n     */\n/**\n     * @dev Overridden version of the {Governor-state} function that considers the status reported by the timelock.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "timelock",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function timelock() public view virtual returns (address) {\n        return address(_timelock);\n    }",
                    "start": "66",
                    "end": "68",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (address) timelock",
                    "full_signature": "function timelock() public virtual view returns (address)",
                    "class_method_signature": "GovernorTimelockControl.timelock",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Public accessor to check the address of the timelock\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalNeedsQueuing",
                    "parameters": "uint256",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function proposalNeedsQueuing(uint256) public view virtual override returns (bool) {\n        return true;\n    }",
                    "start": "73",
                    "end": "75",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (bool) proposalNeedsQueuinguint256",
                    "full_signature": "function proposalNeedsQueuing(uint256) public virtual override returns (bool)",
                    "class_method_signature": "GovernorTimelockControl.proposalNeedsQueuinguint256",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IGovernor-proposalNeedsQueuing}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_queueOperations",
                    "parameters": "uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "modifiers": "override",
                    "return": "returns (uint48)",
                    "body": "function _queueOperations(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint48) {\n        uint256 delay = _timelock.getMinDelay();\n\n        bytes32 salt = _timelockSalt(descriptionHash);\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, salt);\n        _timelock.scheduleBatch(targets, values, calldatas, 0, salt, delay);\n\n        return SafeCast.toUint48(block.timestamp + delay);\n    }",
                    "start": "80",
                    "end": "94",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (uint48) _queueOperationsuint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "full_signature": "function _queueOperations(uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash) internal virtual override returns (uint48)",
                    "class_method_signature": "GovernorTimelockControl._queueOperationsuint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Function to queue a proposal to the timelock.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_executeOperations",
                    "parameters": "uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _executeOperations(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override {\n        // execute\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, _timelockSalt(descriptionHash));\n        // cleanup for refund\n        delete _timelockIds[proposalId];\n    }",
                    "start": "100",
                    "end": "111",
                    "class": "GovernorTimelockControl",
                    "signature": " _executeOperationsuint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "full_signature": "function _executeOperations(uint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash) internal virtual override ",
                    "class_method_signature": "GovernorTimelockControl._executeOperationsuint256 proposalId, address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Overridden version of the {Governor-_executeOperations} function that runs the already queued proposal\n     * through the timelock.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_cancel",
                    "parameters": "address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        bytes32 timelockId = _timelockIds[proposalId];\n        if (timelockId != 0) {\n            // cancel\n            _timelock.cancel(timelockId);\n            // cleanup\n            delete _timelockIds[proposalId];\n        }\n\n        return proposalId;\n    }",
                    "start": "120",
                    "end": "137",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (uint256) _canceladdress[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "full_signature": "function _cancel(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash) internal virtual override returns (uint256)",
                    "class_method_signature": "GovernorTimelockControl._canceladdress[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Overridden version of the {Governor-_cancel} function to cancel the timelocked proposal if it has already\n     * been queued.\n     */\n// This function can reenter through the external call to the timelock, but we assume the timelock is trusted and\n// well behaved (according to TimelockController) and this will not happen.\n// slither-disable-next-line reentrancy-no-eth\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_executor",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _executor() internal view virtual override returns (address) {\n        return address(_timelock);\n    }",
                    "start": "142",
                    "end": "144",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (address) _executor",
                    "full_signature": "function _executor() internal virtual override returns (address)",
                    "class_method_signature": "GovernorTimelockControl._executor",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Address through which the governor executes action. In this case, the timelock.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "updateTimelock",
                    "parameters": "TimelockController newTimelock",
                    "modifiers": "",
                    "return": "",
                    "body": "function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\n        _updateTimelock(newTimelock);\n    }",
                    "start": "152",
                    "end": "154",
                    "class": "GovernorTimelockControl",
                    "signature": " updateTimelockTimelockController newTimelock",
                    "full_signature": "function updateTimelock(TimelockController newTimelock) external virtual  ",
                    "class_method_signature": "GovernorTimelockControl.updateTimelockTimelockController newTimelock",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\n     * must be proposed, scheduled, and executed through governance proposals.\n     *\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "_timelockSalt",
                    "parameters": "bytes32 descriptionHash",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function _timelockSalt(bytes32 descriptionHash) private view returns (bytes32) {\n        return bytes20(address(this)) ^ descriptionHash;\n    }",
                    "start": "167",
                    "end": "169",
                    "class": "GovernorTimelockControl",
                    "signature": "returns (bytes32) _timelockSaltbytes32 descriptionHash",
                    "full_signature": "function _timelockSalt(bytes32 descriptionHash) private  view returns (bytes32)",
                    "class_method_signature": "GovernorTimelockControl._timelockSaltbytes32 descriptionHash",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Computes the {TimelockController} operation salt.\n     *\n     * It is computed with the governor address itself to avoid collisions across governor instances using the\n     * same timelock.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingFractional.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "COUNTING_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo,fractional&quorum=for,abstain&params=fractional\";\n    }",
                    "start": "60",
                    "end": "62",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (string memory) COUNTING_MODE",
                    "full_signature": "function COUNTING_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "GovernorCountingFractional.COUNTING_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mapping from proposal ID to vote tallies for that proposal.\n     */\n/**\n     * @dev A fractional vote params uses more votes than are available for that user.\n     */\n/**\n     * @dev See {IGovernor-COUNTING_MODE}.\n     */\n// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "hasVoted",
                    "parameters": "uint256 proposalId, address account",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return usedVotes(proposalId, account) > 0;\n    }",
                    "start": "67",
                    "end": "69",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (bool) hasVoteduint256 proposalId, address account",
                    "full_signature": "function hasVoted(uint256 proposalId, address account) public virtual override returns (bool)",
                    "class_method_signature": "GovernorCountingFractional.hasVoteduint256 proposalId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IGovernor-hasVoted}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "usedVotes",
                    "parameters": "uint256 proposalId, address account",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function usedVotes(uint256 proposalId, address account) public view virtual returns (uint256) {\n        return _proposalVotes[proposalId].usedVotes[account];\n    }",
                    "start": "75",
                    "end": "77",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (uint256) usedVotesuint256 proposalId, address account",
                    "full_signature": "function usedVotes(uint256 proposalId, address account) public virtual view returns (uint256)",
                    "class_method_signature": "GovernorCountingFractional.usedVotesuint256 proposalId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the number of votes already cast by `account` for a proposal with `proposalId`. Useful for\n     * integrations that allow delegates to cast rolling, partial votes.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalVotes",
                    "parameters": "uint256 proposalId",
                    "modifiers": "view",
                    "return": "returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes)",
                    "body": "function proposalVotes(\n        uint256 proposalId\n    ) public view virtual returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n        return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);\n    }",
                    "start": "82",
                    "end": "87",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes) proposalVotesuint256 proposalId",
                    "full_signature": "function proposalVotes(uint256 proposalId) public virtual view returns (uint256 againstVotes, uint256 forVotes, uint256 abstainVotes)",
                    "class_method_signature": "GovernorCountingFractional.proposalVotesuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get current distribution of votes for a given proposal.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_quorumReached",
                    "parameters": "uint256 proposalId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n        return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;\n    }",
                    "start": "92",
                    "end": "95",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (bool) _quorumReacheduint256 proposalId",
                    "full_signature": "function _quorumReached(uint256 proposalId) internal virtual override returns (bool)",
                    "class_method_signature": "GovernorCountingFractional._quorumReacheduint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {Governor-_quorumReached}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_voteSucceeded",
                    "parameters": "uint256 proposalId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\n        return proposalVote.forVotes > proposalVote.againstVotes;\n    }",
                    "start": "100",
                    "end": "103",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (bool) _voteSucceededuint256 proposalId",
                    "full_signature": "function _voteSucceeded(uint256 proposalId) internal virtual override returns (bool)",
                    "class_method_signature": "GovernorCountingFractional._voteSucceededuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {Governor-_voteSucceeded}. In this module, forVotes must be > againstVotes.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_countVote",
                    "parameters": "uint256 proposalId, address account, uint8 support, uint256 totalWeight, bytes memory params",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 totalWeight,\n        bytes memory params\n    ) internal virtual override returns (uint256) {\n        // Compute number of remaining votes. Returns 0 on overflow.\n        (, uint256 remainingWeight) = totalWeight.trySub(usedVotes(proposalId, account));\n        if (remainingWeight == 0) {\n            revert GovernorAlreadyCastVote(account);\n        }\n\n        uint256 againstVotes = 0;\n        uint256 forVotes = 0;\n        uint256 abstainVotes = 0;\n        uint256 usedWeight = 0;\n\n        // For clarity of event indexing, fractional voting must be clearly advertised in the \"support\" field.\n        //\n        // Supported `support` value must be:\n        // - \"Full\" voting: `support = 0` (Against), `1` (For) or `2` (Abstain), with empty params.\n        // - \"Fractional\" voting: `support = 255`, with 48 bytes params.\n        if (support == uint8(GovernorCountingSimple.VoteType.Against)) {\n            if (params.length != 0) revert GovernorInvalidVoteParams();\n            usedWeight = againstVotes = remainingWeight;\n        } else if (support == uint8(GovernorCountingSimple.VoteType.For)) {\n            if (params.length != 0) revert GovernorInvalidVoteParams();\n            usedWeight = forVotes = remainingWeight;\n        } else if (support == uint8(GovernorCountingSimple.VoteType.Abstain)) {\n            if (params.length != 0) revert GovernorInvalidVoteParams();\n            usedWeight = abstainVotes = remainingWeight;\n        } else if (support == VOTE_TYPE_FRACTIONAL) {\n            // The `params` argument is expected to be three packed `uint128`:\n            // `abi.encodePacked(uint128(againstVotes), uint128(forVotes), uint128(abstainVotes))`\n            if (params.length != 0x30) revert GovernorInvalidVoteParams();\n\n            assembly (\"memory-safe\") {\n                againstVotes := shr(128, mload(add(params, 0x20)))\n                forVotes := shr(128, mload(add(params, 0x30)))\n                abstainVotes := shr(128, mload(add(params, 0x40)))\n                usedWeight := add(add(againstVotes, forVotes), abstainVotes) // inputs are uint128: cannot overflow\n            }\n\n            // check parsed arguments are valid\n            if (usedWeight > remainingWeight) {\n                revert GovernorExceedRemainingWeight(account, usedWeight, remainingWeight);\n            }\n        } else {\n            revert GovernorInvalidVoteType();\n        }\n\n        // update votes tracking\n        ProposalVote storage details = _proposalVotes[proposalId];\n        if (againstVotes > 0) details.againstVotes += againstVotes;\n        if (forVotes > 0) details.forVotes += forVotes;\n        if (abstainVotes > 0) details.abstainVotes += abstainVotes;\n        details.usedVotes[account] += usedWeight;\n\n        return usedWeight;\n    }",
                    "start": "135",
                    "end": "195",
                    "class": "GovernorCountingFractional",
                    "signature": "returns (uint256) _countVoteuint256 proposalId, address account, uint8 support, uint256 totalWeight, bytes memory params",
                    "full_signature": "function _countVote(uint256 proposalId, address account, uint8 support, uint256 totalWeight, bytes memory params) internal virtual override returns (uint256)",
                    "class_method_signature": "GovernorCountingFractional._countVoteuint256 proposalId, address account, uint8 support, uint256 totalWeight, bytes memory params",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {Governor-_countVote}. Function that records the delegate's votes.\n     *\n     * Executing this function consumes (part of) the delegate's weight on the proposal. This weight can be\n     * distributed amongst the 3 options (Against, For, Abstain) by specifying a fractional `support`.\n     *\n     * This counting module supports two vote casting modes: nominal and fractional.\n     *\n     * - Nominal: A nominal vote is cast by setting `support` to one of the 3 bravo options (Against, For, Abstain).\n     * - Fractional: A fractional vote is cast by setting `support` to `type(uint8).max` (255).\n     *\n     * Casting a nominal vote requires `params` to be empty and consumes the delegate's full remaining weight on the\n     * proposal for the specified `support` option. This is similar to the {GovernorCountingSimple} module and follows\n     * the `VoteType` enum from Governor Bravo. As a consequence, no vote weight remains unspent so no further voting\n     * is possible (for this `proposalId` and this `account`).\n     *\n     * Casting a fractional vote consumes a fraction of the delegate's remaining weight on the proposal according to the\n     * weights the delegate assigns to each support option (Against, For, Abstain respectively). The sum total of the\n     * three decoded vote weights _must_ be less than or equal to the delegate's remaining weight on the proposal (i.e.\n     * their checkpointed total weight minus votes already cast on the proposal). This format can be produced using:\n     *\n     * `abi.encodePacked(uint128(againstVotes), uint128(forVotes), uint128(abstainVotes))`\n     *\n     * NOTE: Consider that fractional voting restricts the number of casted vote (in each category) to 128 bits.\n     * Depending on how many decimals the underlying token has, a single voter may require to split their vote into\n     * multiple vote operations. For precision higher than ~30 decimals, large token holders may require an\n     * potentially large number of calls to cast all their votes. The voter has the possibility to cast all the\n     * remaining votes in a single operation using the traditional \"bravo\" vote.\n     */\n// slither-disable-next-line cyclomatic-complexity\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/governance/extensions/GovernorStorage.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_propose",
                    "parameters": "address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description, address proposer",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description,\n        address proposer\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._propose(targets, values, calldatas, description, proposer);\n\n        // store\n        _proposalIds.push(proposalId);\n        _proposalDetails[proposalId] = ProposalDetails({\n            targets: targets,\n            values: values,\n            calldatas: calldatas,\n            descriptionHash: keccak256(bytes(description))\n        });\n\n        return proposalId;\n    }",
                    "start": "31",
                    "end": "50",
                    "class": "GovernorStorage",
                    "signature": "returns (uint256) _proposeaddress[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description, address proposer",
                    "full_signature": "function _propose(address[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description, address proposer) internal virtual override returns (uint256)",
                    "class_method_signature": "GovernorStorage._proposeaddress[] memory targets, uint256[] memory values, bytes[] memory calldatas, string memory description, address proposer",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Hook into the proposing mechanism\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "queue",
                    "parameters": "uint256 proposalId",
                    "modifiers": "",
                    "return": "",
                    "body": "function queue(uint256 proposalId) public virtual {\n        // here, using storage is more efficient than memory\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        queue(details.targets, details.values, details.calldatas, details.descriptionHash);\n    }",
                    "start": "55",
                    "end": "59",
                    "class": "GovernorStorage",
                    "signature": " queueuint256 proposalId",
                    "full_signature": "function queue(uint256 proposalId) public virtual  ",
                    "class_method_signature": "GovernorStorage.queueuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Version of {IGovernorTimelock-queue} with only `proposalId` as an argument.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "execute",
                    "parameters": "uint256 proposalId",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function execute(uint256 proposalId) public payable virtual {\n        // here, using storage is more efficient than memory\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        execute(details.targets, details.values, details.calldatas, details.descriptionHash);\n    }",
                    "start": "64",
                    "end": "68",
                    "class": "GovernorStorage",
                    "signature": " executeuint256 proposalId",
                    "full_signature": "function execute(uint256 proposalId) public virtual payable ",
                    "class_method_signature": "GovernorStorage.executeuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Version of {IGovernor-execute} with only `proposalId` as an argument.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "cancel",
                    "parameters": "uint256 proposalId",
                    "modifiers": "",
                    "return": "",
                    "body": "function cancel(uint256 proposalId) public virtual {\n        // here, using storage is more efficient than memory\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        cancel(details.targets, details.values, details.calldatas, details.descriptionHash);\n    }",
                    "start": "73",
                    "end": "77",
                    "class": "GovernorStorage",
                    "signature": " canceluint256 proposalId",
                    "full_signature": "function cancel(uint256 proposalId) public virtual  ",
                    "class_method_signature": "GovernorStorage.canceluint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev ProposalId version of {IGovernor-cancel}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalCount",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function proposalCount() public view virtual returns (uint256) {\n        return _proposalIds.length;\n    }",
                    "start": "82",
                    "end": "84",
                    "class": "GovernorStorage",
                    "signature": "returns (uint256) proposalCount",
                    "full_signature": "function proposalCount() public virtual view returns (uint256)",
                    "class_method_signature": "GovernorStorage.proposalCount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the number of stored proposals.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalDetails",
                    "parameters": "uint256 proposalId",
                    "modifiers": "view",
                    "return": "returns (address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)",
                    "body": "function proposalDetails(\n        uint256 proposalId\n    )\n        public\n        view\n        virtual\n        returns (address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\n    {\n        // here, using memory is more efficient than storage\n        ProposalDetails memory details = _proposalDetails[proposalId];\n        if (details.descriptionHash == 0) {\n            revert GovernorNonexistentProposal(proposalId);\n        }\n        return (details.targets, details.values, details.calldatas, details.descriptionHash);\n    }",
                    "start": "89",
                    "end": "103",
                    "class": "GovernorStorage",
                    "signature": "returns (address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash) proposalDetailsuint256 proposalId",
                    "full_signature": "function proposalDetails(uint256 proposalId) public virtual view returns (address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)",
                    "class_method_signature": "GovernorStorage.proposalDetailsuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the details of a proposalId. Reverts if `proposalId` is not a known proposal.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "proposalDetailsAt",
                    "parameters": "uint256 index",
                    "modifiers": "view",
                    "return": "returns (\n            uint256 proposalId,\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        )",
                    "body": "function proposalDetailsAt(\n        uint256 index\n    )\n        public\n        view\n        virtual\n        returns (\n            uint256 proposalId,\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        )\n    {\n        proposalId = _proposalIds[index];\n        (targets, values, calldatas, descriptionHash) = proposalDetails(proposalId);\n    }",
                    "start": "108",
                    "end": "124",
                    "class": "GovernorStorage",
                    "signature": "returns (\n            uint256 proposalId,\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        ) proposalDetailsAtuint256 index",
                    "full_signature": "function proposalDetailsAt(uint256 index) public virtual view returns (\n            uint256 proposalId,\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        )",
                    "class_method_signature": "GovernorStorage.proposalDetailsAtuint256 index",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the details (including the proposalId) of a proposal given its sequential index.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/common/ERC2981.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(IERC165, ERC165)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "54",
                    "end": "56",
                    "class": "ERC2981",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(IERC165, ERC165) returns (bool)",
                    "class_method_signature": "ERC2981.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\n     */\n/**\n     * @dev The default royalty receiver is invalid.\n     */\n/**\n     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\n     */\n/**\n     * @dev The royalty receiver for `tokenId` is invalid.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "royaltyInfo",
                    "parameters": "uint256 tokenId, uint256 salePrice",
                    "modifiers": "view",
                    "return": "returns (address receiver, uint256 amount)",
                    "body": "function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) public view virtual returns (address receiver, uint256 amount) {\n        RoyaltyInfo storage _royaltyInfo = _tokenRoyaltyInfo[tokenId];\n        address royaltyReceiver = _royaltyInfo.receiver;\n        uint96 royaltyFraction = _royaltyInfo.royaltyFraction;\n\n        if (royaltyReceiver == address(0)) {\n            royaltyReceiver = _defaultRoyaltyInfo.receiver;\n            royaltyFraction = _defaultRoyaltyInfo.royaltyFraction;\n        }\n\n        uint256 royaltyAmount = (salePrice * royaltyFraction) / _feeDenominator();\n\n        return (royaltyReceiver, royaltyAmount);\n    }",
                    "start": "61",
                    "end": "77",
                    "class": "ERC2981",
                    "signature": "returns (address receiver, uint256 amount) royaltyInfouint256 tokenId, uint256 salePrice",
                    "full_signature": "function royaltyInfo(uint256 tokenId, uint256 salePrice) public virtual view returns (address receiver, uint256 amount)",
                    "class_method_signature": "ERC2981.royaltyInfouint256 tokenId, uint256 salePrice",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IERC2981\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_feeDenominator",
                    "parameters": "",
                    "modifiers": "pure",
                    "return": "returns (uint96)",
                    "body": "function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }",
                    "start": "84",
                    "end": "86",
                    "class": "ERC2981",
                    "signature": "returns (uint96) _feeDenominator",
                    "full_signature": "function _feeDenominator() internal virtual pure returns (uint96)",
                    "class_method_signature": "ERC2981._feeDenominator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setDefaultRoyalty",
                    "parameters": "address receiver, uint96 feeNumerator",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\n        }\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }",
                    "start": "96",
                    "end": "107",
                    "class": "ERC2981",
                    "signature": " _setDefaultRoyaltyaddress receiver, uint96 feeNumerator",
                    "full_signature": "function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual  ",
                    "class_method_signature": "ERC2981._setDefaultRoyaltyaddress receiver, uint96 feeNumerator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_deleteDefaultRoyalty",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }",
                    "start": "112",
                    "end": "114",
                    "class": "ERC2981",
                    "signature": " _deleteDefaultRoyalty",
                    "full_signature": "function _deleteDefaultRoyalty() internal virtual  ",
                    "class_method_signature": "ERC2981._deleteDefaultRoyalty",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Removes default royalty information.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setTokenRoyalty",
                    "parameters": "uint256 tokenId, address receiver, uint96 feeNumerator",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\n        }\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }",
                    "start": "124",
                    "end": "135",
                    "class": "ERC2981",
                    "signature": " _setTokenRoyaltyuint256 tokenId, address receiver, uint96 feeNumerator",
                    "full_signature": "function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual  ",
                    "class_method_signature": "ERC2981._setTokenRoyaltyuint256 tokenId, address receiver, uint96 feeNumerator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_resetTokenRoyalty",
                    "parameters": "uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }",
                    "start": "140",
                    "end": "142",
                    "class": "ERC2981",
                    "signature": " _resetTokenRoyaltyuint256 tokenId",
                    "full_signature": "function _resetTokenRoyalty(uint256 tokenId) internal virtual  ",
                    "class_method_signature": "ERC2981._resetTokenRoyaltyuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Utils.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(ERC165, IERC165)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "19",
                    "end": "21",
                    "class": "ERC1155Holder",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(ERC165, IERC165) returns (bool)",
                    "class_method_signature": "ERC1155Holder.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155URIStorage.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "uri",
                    "parameters": "uint256 tokenId",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function uri(uint256 tokenId) public view virtual override returns (string memory) {\n        string memory tokenURI = _tokenURIs[tokenId];\n\n        // If token URI is set, concatenate base URI and tokenURI (via string.concat).\n        return bytes(tokenURI).length > 0 ? string.concat(_baseURI, tokenURI) : super.uri(tokenId);\n    }",
                    "start": "40",
                    "end": "45",
                    "class": "ERC1155URIStorage",
                    "signature": "returns (string memory) uriuint256 tokenId",
                    "full_signature": "function uri(uint256 tokenId) public virtual override returns (string memory)",
                    "class_method_signature": "ERC1155URIStorage.uriuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Optional base URI\n// Optional mapping for token URIs\n/**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the concatenation of the `_baseURI`\n     * and the token-specific uri if the latter is set\n     *\n     * This enables the following behaviors:\n     *\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\n     *   is empty per default);\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\n     *   which in most cases will contain `ERC1155._uri`;\n     *\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\n     *   uri value set, then the result is empty.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setURI",
                    "parameters": "uint256 tokenId, string memory tokenURI",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\n        _tokenURIs[tokenId] = tokenURI;\n        emit URI(uri(tokenId), tokenId);\n    }",
                    "start": "50",
                    "end": "53",
                    "class": "ERC1155URIStorage",
                    "signature": " _setURIuint256 tokenId, string memory tokenURI",
                    "full_signature": "function _setURI(uint256 tokenId, string memory tokenURI) internal virtual  ",
                    "class_method_signature": "ERC1155URIStorage._setURIuint256 tokenId, string memory tokenURI",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setBaseURI",
                    "parameters": "string memory baseURI",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setBaseURI(string memory baseURI) internal virtual {\n        _baseURI = baseURI;\n    }",
                    "start": "58",
                    "end": "60",
                    "class": "ERC1155URIStorage",
                    "signature": " _setBaseURIstring memory baseURI",
                    "full_signature": "function _setBaseURI(string memory baseURI) internal virtual  ",
                    "class_method_signature": "ERC1155URIStorage._setBaseURIstring memory baseURI",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Supply.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "totalSupply",
                    "parameters": "uint256 id",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }",
                    "start": "31",
                    "end": "33",
                    "class": "ERC1155Supply",
                    "signature": "returns (uint256) totalSupplyuint256 id",
                    "full_signature": "function totalSupply(uint256 id) public virtual view returns (uint256)",
                    "class_method_signature": "ERC1155Supply.totalSupplyuint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Total value of tokens in with a given id.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "totalSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function totalSupply() public view virtual returns (uint256) {\n        return _totalSupplyAll;\n    }",
                    "start": "38",
                    "end": "40",
                    "class": "ERC1155Supply",
                    "signature": "returns (uint256) totalSupply",
                    "full_signature": "function totalSupply() public virtual view returns (uint256)",
                    "class_method_signature": "ERC1155Supply.totalSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Total value of tokens.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "exists",
                    "parameters": "uint256 id",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function exists(uint256 id) public view virtual returns (bool) {\n        return totalSupply(id) > 0;\n    }",
                    "start": "45",
                    "end": "47",
                    "class": "ERC1155Supply",
                    "signature": "returns (bool) existsuint256 id",
                    "full_signature": "function exists(uint256 id) public virtual view returns (bool)",
                    "class_method_signature": "ERC1155Supply.existsuint256 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256[] memory ids, uint256[] memory values",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override {\n        super._update(from, to, ids, values);\n\n        if (from == address(0)) {\n            uint256 totalMintValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values.unsafeMemoryAccess(i);\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\n                _totalSupply[ids.unsafeMemoryAccess(i)] += value;\n                totalMintValue += value;\n            }\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\n            _totalSupplyAll += totalMintValue;\n        }\n\n        if (to == address(0)) {\n            uint256 totalBurnValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values.unsafeMemoryAccess(i);\n\n                unchecked {\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\n                    _totalSupply[ids.unsafeMemoryAccess(i)] -= value;\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                    totalBurnValue += value;\n                }\n            }\n            unchecked {\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                _totalSupplyAll -= totalBurnValue;\n            }\n        }\n    }",
                    "start": "52",
                    "end": "89",
                    "class": "ERC1155Supply",
                    "signature": " _updateaddress from, address to, uint256[] memory ids, uint256[] memory values",
                    "full_signature": "function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual override ",
                    "class_method_signature": "ERC1155Supply._updateaddress from, address to, uint256[] memory ids, uint256[] memory values",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC1155-_update}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC1155/extensions/ERC1155Pausable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256[] memory ids, uint256[] memory values",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override whenNotPaused {\n        super._update(from, to, ids, values);\n    }",
                    "start": "30",
                    "end": "37",
                    "class": "ERC1155Pausable",
                    "signature": " _updateaddress from, address to, uint256[] memory ids, uint256[] memory values",
                    "full_signature": "function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual override ",
                    "class_method_signature": "ERC1155Pausable._updateaddress from, address to, uint256[] memory ids, uint256[] memory values",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC1155-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(ERC165, IERC165)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }",
                    "start": "47",
                    "end": "52",
                    "class": "ERC721",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(ERC165, IERC165) returns (bool)",
                    "class_method_signature": "ERC721.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Token name\n// Token symbol\n/**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "balanceOf",
                    "parameters": "address owner",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }",
                    "start": "57",
                    "end": "62",
                    "class": "ERC721",
                    "signature": "returns (uint256) balanceOfaddress owner",
                    "full_signature": "function balanceOf(address owner) public virtual view returns (uint256)",
                    "class_method_signature": "ERC721.balanceOfaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-balanceOf}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "ownerOf",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }",
                    "start": "67",
                    "end": "69",
                    "class": "ERC721",
                    "signature": "returns (address) ownerOfuint256 tokenId",
                    "full_signature": "function ownerOf(uint256 tokenId) public virtual view returns (address)",
                    "class_method_signature": "ERC721.ownerOfuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-ownerOf}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "name",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function name() public view virtual returns (string memory) {\n        return _name;\n    }",
                    "start": "74",
                    "end": "76",
                    "class": "ERC721",
                    "signature": "returns (string memory) name",
                    "full_signature": "function name() public virtual view returns (string memory)",
                    "class_method_signature": "ERC721.name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Metadata-name}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "symbol",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }",
                    "start": "81",
                    "end": "83",
                    "class": "ERC721",
                    "signature": "returns (string memory) symbol",
                    "full_signature": "function symbol() public virtual view returns (string memory)",
                    "class_method_signature": "ERC721.symbol",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "tokenURI",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }",
                    "start": "88",
                    "end": "93",
                    "class": "ERC721",
                    "signature": "returns (string memory) tokenURIuint256 tokenId",
                    "full_signature": "function tokenURI(uint256 tokenId) public virtual view returns (string memory)",
                    "class_method_signature": "ERC721.tokenURIuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_baseURI",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }",
                    "start": "100",
                    "end": "102",
                    "class": "ERC721",
                    "signature": "returns (string memory) _baseURI",
                    "full_signature": "function _baseURI() internal virtual view returns (string memory)",
                    "class_method_signature": "ERC721._baseURI",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "approve",
                    "parameters": "address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }",
                    "start": "107",
                    "end": "109",
                    "class": "ERC721",
                    "signature": " approveaddress to, uint256 tokenId",
                    "full_signature": "function approve(address to, uint256 tokenId) public virtual  ",
                    "class_method_signature": "ERC721.approveaddress to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-approve}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getApproved",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }",
                    "start": "114",
                    "end": "118",
                    "class": "ERC721",
                    "signature": "returns (address) getApproveduint256 tokenId",
                    "full_signature": "function getApproved(uint256 tokenId) public virtual view returns (address)",
                    "class_method_signature": "ERC721.getApproveduint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-getApproved}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setApprovalForAll",
                    "parameters": "address operator, bool approved",
                    "modifiers": "",
                    "return": "",
                    "body": "function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }",
                    "start": "123",
                    "end": "125",
                    "class": "ERC721",
                    "signature": " setApprovalForAlladdress operator, bool approved",
                    "full_signature": "function setApprovalForAll(address operator, bool approved) public virtual  ",
                    "class_method_signature": "ERC721.setApprovalForAlladdress operator, bool approved",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isApprovedForAll",
                    "parameters": "address owner, address operator",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }",
                    "start": "130",
                    "end": "132",
                    "class": "ERC721",
                    "signature": "returns (bool) isApprovedForAlladdress owner, address operator",
                    "full_signature": "function isApprovedForAll(address owner, address operator) public virtual view returns (bool)",
                    "class_method_signature": "ERC721.isApprovedForAlladdress owner, address operator",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferFrom",
                    "parameters": "address from, address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }",
                    "start": "137",
                    "end": "147",
                    "class": "ERC721",
                    "signature": " transferFromaddress from, address to, uint256 tokenId",
                    "full_signature": "function transferFrom(address from, address to, uint256 tokenId) public virtual  ",
                    "class_method_signature": "ERC721.transferFromaddress from, address to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-transferFrom}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "safeTransferFrom",
                    "parameters": "address from, address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }",
                    "start": "152",
                    "end": "154",
                    "class": "ERC721",
                    "signature": " safeTransferFromaddress from, address to, uint256 tokenId",
                    "full_signature": "function safeTransferFrom(address from, address to, uint256 tokenId) public   ",
                    "class_method_signature": "ERC721.safeTransferFromaddress from, address to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "safeTransferFrom",
                    "parameters": "address from, address to, uint256 tokenId, bytes memory data",
                    "modifiers": "",
                    "return": "",
                    "body": "function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }",
                    "start": "159",
                    "end": "162",
                    "class": "ERC721",
                    "signature": " safeTransferFromaddress from, address to, uint256 tokenId, bytes memory data",
                    "full_signature": "function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual  ",
                    "class_method_signature": "ERC721.safeTransferFromaddress from, address to, uint256 tokenId, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_ownerOf",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }",
                    "start": "172",
                    "end": "174",
                    "class": "ERC721",
                    "signature": "returns (address) _ownerOfuint256 tokenId",
                    "full_signature": "function _ownerOf(uint256 tokenId) internal virtual view returns (address)",
                    "class_method_signature": "ERC721._ownerOfuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getApproved",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }",
                    "start": "179",
                    "end": "181",
                    "class": "ERC721",
                    "signature": "returns (address) _getApproveduint256 tokenId",
                    "full_signature": "function _getApproved(uint256 tokenId) internal virtual view returns (address)",
                    "class_method_signature": "ERC721._getApproveduint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_isAuthorized",
                    "parameters": "address owner, address spender, uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }",
                    "start": "190",
                    "end": "194",
                    "class": "ERC721",
                    "signature": "returns (bool) _isAuthorizedaddress owner, address spender, uint256 tokenId",
                    "full_signature": "function _isAuthorized(address owner, address spender, uint256 tokenId) internal virtual view returns (bool)",
                    "class_method_signature": "ERC721._isAuthorizedaddress owner, address spender, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_checkAuthorized",
                    "parameters": "address owner, address spender, uint256 tokenId",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }",
                    "start": "205",
                    "end": "213",
                    "class": "ERC721",
                    "signature": " _checkAuthorizedaddress owner, address spender, uint256 tokenId",
                    "full_signature": "function _checkAuthorized(address owner, address spender, uint256 tokenId) internal virtual view ",
                    "class_method_signature": "ERC721._checkAuthorizedaddress owner, address spender, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if:\n     * - `spender` does not have approval from `owner` for `tokenId`.\n     * - `spender` does not have approval to manage all of `owner`'s assets.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_increaseBalance",
                    "parameters": "address account, uint128 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }",
                    "start": "225",
                    "end": "229",
                    "class": "ERC721",
                    "signature": " _increaseBalanceaddress account, uint128 value",
                    "full_signature": "function _increaseBalance(address account, uint128 value) internal virtual  ",
                    "class_method_signature": "ERC721._increaseBalanceaddress account, uint128 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_update",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "",
                    "return": "returns (address)",
                    "body": "function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }",
                    "start": "242",
                    "end": "271",
                    "class": "ERC721",
                    "signature": "returns (address) _updateaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _update(address to, uint256 tokenId, address auth) internal virtual  returns (address)",
                    "class_method_signature": "ERC721._updateaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_mint",
                    "parameters": "address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }",
                    "start": "285",
                    "end": "293",
                    "class": "ERC721",
                    "signature": " _mintaddress to, uint256 tokenId",
                    "full_signature": "function _mint(address to, uint256 tokenId) internal   ",
                    "class_method_signature": "ERC721._mintaddress to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_safeMint",
                    "parameters": "address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }",
                    "start": "305",
                    "end": "307",
                    "class": "ERC721",
                    "signature": " _safeMintaddress to, uint256 tokenId",
                    "full_signature": "function _safeMint(address to, uint256 tokenId) internal   ",
                    "class_method_signature": "ERC721._safeMintaddress to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_safeMint",
                    "parameters": "address to, uint256 tokenId, bytes memory data",
                    "modifiers": "",
                    "return": "",
                    "body": "function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\n    }",
                    "start": "313",
                    "end": "316",
                    "class": "ERC721",
                    "signature": " _safeMintaddress to, uint256 tokenId, bytes memory data",
                    "full_signature": "function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual  ",
                    "class_method_signature": "ERC721._safeMintaddress to, uint256 tokenId, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_burn",
                    "parameters": "uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }",
                    "start": "329",
                    "end": "334",
                    "class": "ERC721",
                    "signature": " _burnuint256 tokenId",
                    "full_signature": "function _burn(uint256 tokenId) internal   ",
                    "class_method_signature": "ERC721._burnuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_transfer",
                    "parameters": "address from, address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }",
                    "start": "347",
                    "end": "357",
                    "class": "ERC721",
                    "signature": " _transferaddress from, address to, uint256 tokenId",
                    "full_signature": "function _transfer(address from, address to, uint256 tokenId) internal   ",
                    "class_method_signature": "ERC721._transferaddress from, address to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_safeTransfer",
                    "parameters": "address from, address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }",
                    "start": "378",
                    "end": "380",
                    "class": "ERC721",
                    "signature": " _safeTransferaddress from, address to, uint256 tokenId",
                    "full_signature": "function _safeTransfer(address from, address to, uint256 tokenId) internal   ",
                    "class_method_signature": "ERC721._safeTransferaddress from, address to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_safeTransfer",
                    "parameters": "address from, address to, uint256 tokenId, bytes memory data",
                    "modifiers": "",
                    "return": "",
                    "body": "function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }",
                    "start": "386",
                    "end": "389",
                    "class": "ERC721",
                    "signature": " _safeTransferaddress from, address to, uint256 tokenId, bytes memory data",
                    "full_signature": "function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual  ",
                    "class_method_signature": "ERC721._safeTransferaddress from, address to, uint256 tokenId, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_approve",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "",
                    "return": "",
                    "body": "function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }",
                    "start": "401",
                    "end": "403",
                    "class": "ERC721",
                    "signature": " _approveaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _approve(address to, uint256 tokenId, address auth) internal   ",
                    "class_method_signature": "ERC721._approveaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_approve",
                    "parameters": "address to, uint256 tokenId, address auth, bool emitEvent",
                    "modifiers": "",
                    "return": "",
                    "body": "function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }",
                    "start": "409",
                    "end": "425",
                    "class": "ERC721",
                    "signature": " _approveaddress to, uint256 tokenId, address auth, bool emitEvent",
                    "full_signature": "function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual  ",
                    "class_method_signature": "ERC721._approveaddress to, uint256 tokenId, address auth, bool emitEvent",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setApprovalForAll",
                    "parameters": "address owner, address operator, bool approved",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }",
                    "start": "435",
                    "end": "441",
                    "class": "ERC721",
                    "signature": " _setApprovalForAlladdress owner, address operator, bool approved",
                    "full_signature": "function _setApprovalForAll(address owner, address operator, bool approved) internal virtual  ",
                    "class_method_signature": "ERC721._setApprovalForAlladdress owner, address operator, bool approved",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_requireOwned",
                    "parameters": "uint256 tokenId",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }",
                    "start": "449",
                    "end": "455",
                    "class": "ERC721",
                    "signature": "returns (address) _requireOwneduint256 tokenId",
                    "full_signature": "function _requireOwned(uint256 tokenId) internal  view returns (address)",
                    "class_method_signature": "ERC721._requireOwneduint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Holder.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "onERC721Received",
                    "parameters": "address, address, uint256, bytes memory",
                    "modifiers": "",
                    "return": "returns (bytes4)",
                    "body": "function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\n        return this.onERC721Received.selector;\n    }",
                    "start": "21",
                    "end": "23",
                    "class": "ERC721Holder",
                    "signature": "returns (bytes4) onERC721Receivedaddress, address, uint256, bytes memory",
                    "full_signature": "function onERC721Received(address, address, uint256, bytes memory) public virtual  returns (bytes4)",
                    "class_method_signature": "ERC721Holder.onERC721Receivedaddress, address, uint256, bytes memory",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Utils.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Enumerable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(IERC165, ERC721)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "ERC721Enumerable",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(IERC165, ERC721) returns (bool)",
                    "class_method_signature": "ERC721Enumerable.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev An `owner`'s token query was out of bounds for `index`.\n     *\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\n     */\n/**\n     * @dev Batch mint is not allowed.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "tokenOfOwnerByIndex",
                    "parameters": "address owner, uint256 index",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\n        if (index >= balanceOf(owner)) {\n            revert ERC721OutOfBoundsIndex(owner, index);\n        }\n        return _ownedTokens[owner][index];\n    }",
                    "start": "46",
                    "end": "51",
                    "class": "ERC721Enumerable",
                    "signature": "returns (uint256) tokenOfOwnerByIndexaddress owner, uint256 index",
                    "full_signature": "function tokenOfOwnerByIndex(address owner, uint256 index) public virtual view returns (uint256)",
                    "class_method_signature": "ERC721Enumerable.tokenOfOwnerByIndexaddress owner, uint256 index",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "totalSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function totalSupply() public view virtual returns (uint256) {\n        return _allTokens.length;\n    }",
                    "start": "56",
                    "end": "58",
                    "class": "ERC721Enumerable",
                    "signature": "returns (uint256) totalSupply",
                    "full_signature": "function totalSupply() public virtual view returns (uint256)",
                    "class_method_signature": "ERC721Enumerable.totalSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "tokenByIndex",
                    "parameters": "uint256 index",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function tokenByIndex(uint256 index) public view virtual returns (uint256) {\n        if (index >= totalSupply()) {\n            revert ERC721OutOfBoundsIndex(address(0), index);\n        }\n        return _allTokens[index];\n    }",
                    "start": "63",
                    "end": "68",
                    "class": "ERC721Enumerable",
                    "signature": "returns (uint256) tokenByIndexuint256 index",
                    "full_signature": "function tokenByIndex(uint256 index) public virtual view returns (uint256)",
                    "class_method_signature": "ERC721Enumerable.tokenByIndexuint256 index",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_update",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        if (previousOwner == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n\n        return previousOwner;\n    }",
                    "start": "73",
                    "end": "88",
                    "class": "ERC721Enumerable",
                    "signature": "returns (address) _updateaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address)",
                    "class_method_signature": "ERC721Enumerable._updateaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_update}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_addTokenToOwnerEnumeration",
                    "parameters": "address to, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = balanceOf(to) - 1;\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }",
                    "start": "95",
                    "end": "99",
                    "class": "ERC721Enumerable",
                    "signature": " _addTokenToOwnerEnumerationaddress to, uint256 tokenId",
                    "full_signature": "function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private   ",
                    "class_method_signature": "ERC721Enumerable._addTokenToOwnerEnumerationaddress to, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_addTokenToAllTokensEnumeration",
                    "parameters": "uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }",
                    "start": "105",
                    "end": "108",
                    "class": "ERC721Enumerable",
                    "signature": " _addTokenToAllTokensEnumerationuint256 tokenId",
                    "full_signature": "function _addTokenToAllTokensEnumeration(uint256 tokenId) private   ",
                    "class_method_signature": "ERC721Enumerable._addTokenToAllTokensEnumerationuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_removeTokenFromOwnerEnumeration",
                    "parameters": "address from, uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = balanceOf(from);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = _ownedTokens[from];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\n\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokensByOwner[lastTokenIndex];\n    }",
                    "start": "118",
                    "end": "138",
                    "class": "ERC721Enumerable",
                    "signature": " _removeTokenFromOwnerEnumerationaddress from, uint256 tokenId",
                    "full_signature": "function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private   ",
                    "class_method_signature": "ERC721Enumerable._removeTokenFromOwnerEnumerationaddress from, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_removeTokenFromAllTokensEnumeration",
                    "parameters": "uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }",
                    "start": "145",
                    "end": "163",
                    "class": "ERC721Enumerable",
                    "signature": " _removeTokenFromAllTokensEnumerationuint256 tokenId",
                    "full_signature": "function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private   ",
                    "class_method_signature": "ERC721Enumerable._removeTokenFromAllTokensEnumerationuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_increaseBalance",
                    "parameters": "address account, uint128 amount",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _increaseBalance(address account, uint128 amount) internal virtual override {\n        if (amount > 0) {\n            revert ERC721EnumerableForbiddenBatchMint();\n        }\n        super._increaseBalance(account, amount);\n    }",
                    "start": "168",
                    "end": "173",
                    "class": "ERC721Enumerable",
                    "signature": " _increaseBalanceaddress account, uint128 amount",
                    "full_signature": "function _increaseBalance(address account, uint128 amount) internal virtual override ",
                    "class_method_signature": "ERC721Enumerable._increaseBalanceaddress account, uint128 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Royalty.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(ERC721, ERC2981)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }",
                    "start": "24",
                    "end": "26",
                    "class": "ERC721Royalty",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(ERC721, ERC2981) returns (bool)",
                    "class_method_signature": "ERC721Royalty.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Pausable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_update",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _update(\n        address to,\n        uint256 tokenId,\n        address auth\n    ) internal virtual override whenNotPaused returns (address) {\n        return super._update(to, tokenId, auth);\n    }",
                    "start": "30",
                    "end": "36",
                    "class": "ERC721Pausable",
                    "signature": "returns (address) _updateaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address)",
                    "class_method_signature": "ERC721Pausable._updateaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(ERC721, IERC165)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\n    }",
                    "start": "27",
                    "end": "29",
                    "class": "ERC721URIStorage",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(ERC721, IERC165) returns (bool)",
                    "class_method_signature": "ERC721URIStorage.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\n// defines events and does not include any external function.\n// Optional mapping for token URIs\n/**\n     * @dev See {IERC165-supportsInterface}\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "tokenURI",
                    "parameters": "uint256 tokenId",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n\n        return super.tokenURI(tokenId);\n    }",
                    "start": "34",
                    "end": "50",
                    "class": "ERC721URIStorage",
                    "signature": "returns (string memory) tokenURIuint256 tokenId",
                    "full_signature": "function tokenURI(uint256 tokenId) public virtual override returns (string memory)",
                    "class_method_signature": "ERC721URIStorage.tokenURIuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setTokenURI",
                    "parameters": "uint256 tokenId, string memory _tokenURI",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        _tokenURIs[tokenId] = _tokenURI;\n        emit MetadataUpdate(tokenId);\n    }",
                    "start": "57",
                    "end": "60",
                    "class": "ERC721URIStorage",
                    "signature": " _setTokenURIuint256 tokenId, string memory _tokenURI",
                    "full_signature": "function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual  ",
                    "class_method_signature": "ERC721URIStorage._setTokenURIuint256 tokenId, string memory _tokenURI",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Consecutive.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_maxBatchSize",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint96)",
                    "body": "function _maxBatchSize() internal view virtual returns (uint96) {\n        return 5000;\n    }",
                    "start": "67",
                    "end": "69",
                    "class": "ERC721Consecutive",
                    "signature": "returns (uint96) _maxBatchSize",
                    "full_signature": "function _maxBatchSize() internal virtual view returns (uint96)",
                    "class_method_signature": "ERC721Consecutive._maxBatchSize",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Batch mint is restricted to the constructor.\n     * Any batch mint not emitting the {IERC721-Transfer} event outside of the constructor\n     * is non ERC-721 compliant.\n     */\n/**\n     * @dev Exceeds the max amount of mints per batch.\n     */\n/**\n     * @dev Individual minting is not allowed.\n     */\n/**\n     * @dev Batch burn is not supported.\n     */\n/**\n     * @dev Maximum size of a batch of consecutive tokens. This is designed to limit stress on off-chain indexing\n     * services that have to record one entry per token, and have protections against \"unreasonably large\" batches of\n     * tokens.\n     *\n     * NOTE: Overriding the default value of 5000 will not cause on-chain issues, but may result in the asset not being\n     * correctly supported by off-chain indexing services (including marketplaces).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_ownerOf",
                    "parameters": "uint256 tokenId",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _ownerOf(uint256 tokenId) internal view virtual override returns (address) {\n        address owner = super._ownerOf(tokenId);\n\n        // If token is owned by the core, or beyond consecutive range, return base value\n        if (owner != address(0) || tokenId > type(uint96).max || tokenId < _firstConsecutiveId()) {\n            return owner;\n        }\n\n        // Otherwise, check the token was not burned, and fetch ownership from the anchors\n        // Note: no need for safe cast, we know that tokenId <= type(uint96).max\n        return _sequentialBurn.get(tokenId) ? address(0) : address(_sequentialOwnership.lowerLookup(uint96(tokenId)));\n    }",
                    "start": "75",
                    "end": "86",
                    "class": "ERC721Consecutive",
                    "signature": "returns (address) _ownerOfuint256 tokenId",
                    "full_signature": "function _ownerOf(uint256 tokenId) internal virtual override returns (address)",
                    "class_method_signature": "ERC721Consecutive._ownerOfuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_ownerOf}. Override that checks the sequential ownership structure for tokens that have\n     * been minted as part of a batch, and not yet transferred.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_mintConsecutive",
                    "parameters": "address to, uint96 batchSize",
                    "modifiers": "",
                    "return": "returns (uint96)",
                    "body": "function _mintConsecutive(address to, uint96 batchSize) internal virtual returns (uint96) {\n        uint96 next = _nextConsecutiveId();\n\n        // minting a batch of size 0 is a no-op\n        if (batchSize > 0) {\n            if (address(this).code.length > 0) {\n                revert ERC721ForbiddenBatchMint();\n            }\n            if (to == address(0)) {\n                revert ERC721InvalidReceiver(address(0));\n            }\n\n            uint256 maxBatchSize = _maxBatchSize();\n            if (batchSize > maxBatchSize) {\n                revert ERC721ExceededMaxBatchMint(batchSize, maxBatchSize);\n            }\n\n            // push an ownership checkpoint & emit event\n            uint96 last = next + batchSize - 1;\n            _sequentialOwnership.push(last, uint160(to));\n\n            // The invariant required by this function is preserved because the new sequentialOwnership checkpoint\n            // is attributing ownership of `batchSize` new tokens to account `to`.\n            _increaseBalance(to, batchSize);\n\n            emit ConsecutiveTransfer(next, last, address(0), to);\n        }\n\n        return next;\n    }",
                    "start": "104",
                    "end": "133",
                    "class": "ERC721Consecutive",
                    "signature": "returns (uint96) _mintConsecutiveaddress to, uint96 batchSize",
                    "full_signature": "function _mintConsecutive(address to, uint96 batchSize) internal virtual  returns (uint96)",
                    "class_method_signature": "ERC721Consecutive._mintConsecutiveaddress to, uint96 batchSize",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mint a batch of tokens of length `batchSize` for `to`. Returns the token id of the first token minted in the\n     * batch; if `batchSize` is 0, returns the number of consecutive ids minted so far.\n     *\n     * Requirements:\n     *\n     * - `batchSize` must not be greater than {_maxBatchSize}.\n     * - The function is called in the constructor of the contract (directly or indirectly).\n     *\n     * CAUTION: Does not emit a `Transfer` event. This is ERC-721 compliant as long as it is done inside of the\n     * constructor, which is enforced by this function.\n     *\n     * CAUTION: Does not invoke `onERC721Received` on the receiver.\n     *\n     * Emits a {IERC2309-ConsecutiveTransfer} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_update",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        // only mint after construction\n        if (previousOwner == address(0) && address(this).code.length == 0) {\n            revert ERC721ForbiddenMint();\n        }\n\n        // record burn\n        if (\n            to == address(0) && // if we burn\n            tokenId < _nextConsecutiveId() && // and the tokenId was minted in a batch\n            !_sequentialBurn.get(tokenId) // and the token was never marked as burnt\n        ) {\n            _sequentialBurn.set(tokenId);\n        }\n\n        return previousOwner;\n    }",
                    "start": "141",
                    "end": "159",
                    "class": "ERC721Consecutive",
                    "signature": "returns (address) _updateaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address)",
                    "class_method_signature": "ERC721Consecutive._updateaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_update}. Override version that restricts normal minting to after construction.\n     *\n     * WARNING: Using {ERC721Consecutive} prevents minting during construction in favor of {_mintConsecutive}.\n     * After construction, {_mintConsecutive} is no longer available and minting through {_update} becomes available.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_firstConsecutiveId",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint96)",
                    "body": "function _firstConsecutiveId() internal view virtual returns (uint96) {\n        return 0;\n    }",
                    "start": "164",
                    "end": "166",
                    "class": "ERC721Consecutive",
                    "signature": "returns (uint96) _firstConsecutiveId",
                    "full_signature": "function _firstConsecutiveId() internal virtual view returns (uint96)",
                    "class_method_signature": "ERC721Consecutive._firstConsecutiveId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Used to offset the first token id in {_nextConsecutiveId}\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_nextConsecutiveId",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint96)",
                    "body": "function _nextConsecutiveId() private view returns (uint96) {\n        (bool exists, uint96 latestId, ) = _sequentialOwnership.latestCheckpoint();\n        return exists ? latestId + 1 : _firstConsecutiveId();\n    }",
                    "start": "172",
                    "end": "175",
                    "class": "ERC721Consecutive",
                    "signature": "returns (uint96) _nextConsecutiveId",
                    "full_signature": "function _nextConsecutiveId() private  view returns (uint96)",
                    "class_method_signature": "ERC721Consecutive._nextConsecutiveId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the next tokenId to mint using {_mintConsecutive}. It will return {_firstConsecutiveId}\n     * if no consecutive tokenId has been minted before.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Enumerable.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Votes.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_update",
                    "parameters": "address to, uint256 tokenId, address auth",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        _transferVotingUnits(previousOwner, to, 1);\n\n        return previousOwner;\n    }",
                    "start": "23",
                    "end": "29",
                    "class": "ERC721Votes",
                    "signature": "returns (address) _updateaddress to, uint256 tokenId, address auth",
                    "full_signature": "function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address)",
                    "class_method_signature": "ERC721Votes._updateaddress to, uint256 tokenId, address auth",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_update}. Adjusts votes when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getVotingUnits",
                    "parameters": "address account",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _getVotingUnits(address account) internal view virtual override returns (uint256) {\n        return balanceOf(account);\n    }",
                    "start": "36",
                    "end": "38",
                    "class": "ERC721Votes",
                    "signature": "returns (uint256) _getVotingUnitsaddress account",
                    "full_signature": "function _getVotingUnits(address account) internal virtual override returns (uint256)",
                    "class_method_signature": "ERC721Votes._getVotingUnitsaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the balance of `account`.\n     *\n     * WARNING: Overriding this function will likely result in incorrect vote tracking.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_increaseBalance",
                    "parameters": "address account, uint128 amount",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _increaseBalance(address account, uint128 amount) internal virtual override {\n        super._increaseBalance(account, amount);\n        _transferVotingUnits(address(0), account, amount);\n    }",
                    "start": "43",
                    "end": "46",
                    "class": "ERC721Votes",
                    "signature": " _increaseBalanceaddress account, uint128 amount",
                    "full_signature": "function _increaseBalance(address account, uint128 amount) internal virtual override ",
                    "class_method_signature": "ERC721Votes._increaseBalanceaddress account, uint128 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Wrapper.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "depositFor",
                    "parameters": "address account, uint256[] memory tokenIds",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function depositFor(address account, uint256[] memory tokenIds) public virtual returns (bool) {\n        uint256 length = tokenIds.length;\n        for (uint256 i = 0; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n\n            // This is an \"unsafe\" transfer that doesn't call any hook on the receiver. With underlying() being trusted\n            // (by design of this contract) and no other contracts expected to be called from there, we are safe.\n            // slither-disable-next-line reentrancy-no-eth\n            underlying().transferFrom(_msgSender(), address(this), tokenId);\n            _safeMint(account, tokenId);\n        }\n\n        return true;\n    }",
                    "start": "31",
                    "end": "44",
                    "class": "ERC721Wrapper",
                    "signature": "returns (bool) depositForaddress account, uint256[] memory tokenIds",
                    "full_signature": "function depositFor(address account, uint256[] memory tokenIds) public virtual  returns (bool)",
                    "class_method_signature": "ERC721Wrapper.depositForaddress account, uint256[] memory tokenIds",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The received ERC-721 token couldn't be wrapped.\n     */\n/**\n     * @dev Allow a user to deposit underlying tokens and mint the corresponding tokenIds.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "withdrawTo",
                    "parameters": "address account, uint256[] memory tokenIds",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function withdrawTo(address account, uint256[] memory tokenIds) public virtual returns (bool) {\n        uint256 length = tokenIds.length;\n        for (uint256 i = 0; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n            // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n            _update(address(0), tokenId, _msgSender());\n            // Checks were already performed at this point, and there's no way to retake ownership or approval from\n            // the wrapped tokenId after this point, so it's safe to remove the reentrancy check for the next line.\n            // slither-disable-next-line reentrancy-no-eth\n            underlying().safeTransferFrom(address(this), account, tokenId);\n        }\n\n        return true;\n    }",
                    "start": "49",
                    "end": "63",
                    "class": "ERC721Wrapper",
                    "signature": "returns (bool) withdrawToaddress account, uint256[] memory tokenIds",
                    "full_signature": "function withdrawTo(address account, uint256[] memory tokenIds) public virtual  returns (bool)",
                    "class_method_signature": "ERC721Wrapper.withdrawToaddress account, uint256[] memory tokenIds",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Allow a user to burn wrapped tokens and withdraw the corresponding tokenIds of the underlying tokens.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "onERC721Received",
                    "parameters": "address, address from, uint256 tokenId, bytes memory",
                    "modifiers": "",
                    "return": "returns (bytes4)",
                    "body": "function onERC721Received(address, address from, uint256 tokenId, bytes memory) public virtual returns (bytes4) {\n        if (address(underlying()) != _msgSender()) {\n            revert ERC721UnsupportedToken(_msgSender());\n        }\n        _safeMint(from, tokenId);\n        return IERC721Receiver.onERC721Received.selector;\n    }",
                    "start": "75",
                    "end": "81",
                    "class": "ERC721Wrapper",
                    "signature": "returns (bytes4) onERC721Receivedaddress, address from, uint256 tokenId, bytes memory",
                    "full_signature": "function onERC721Received(address, address from, uint256 tokenId, bytes memory) public virtual  returns (bytes4)",
                    "class_method_signature": "ERC721Wrapper.onERC721Receivedaddress, address from, uint256 tokenId, bytes memory",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Overrides {IERC721Receiver-onERC721Received} to allow minting on direct ERC-721 transfers to\n     * this contract.\n     *\n     * In case there's data attached, it validates that the operator is this contract, so only trusted data\n     * is accepted from {depositFor}.\n     *\n     * WARNING: Doesn't work with unsafe transfers (eg. {IERC721-transferFrom}). Use {ERC721Wrapper-_recover}\n     * for recovering in that scenario.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_recover",
                    "parameters": "address account, uint256 tokenId",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function _recover(address account, uint256 tokenId) internal virtual returns (uint256) {\n        address owner = underlying().ownerOf(tokenId);\n        if (owner != address(this)) {\n            revert ERC721IncorrectOwner(address(this), tokenId, owner);\n        }\n        _safeMint(account, tokenId);\n        return tokenId;\n    }",
                    "start": "87",
                    "end": "94",
                    "class": "ERC721Wrapper",
                    "signature": "returns (uint256) _recoveraddress account, uint256 tokenId",
                    "full_signature": "function _recover(address account, uint256 tokenId) internal virtual  returns (uint256)",
                    "class_method_signature": "ERC721Wrapper._recoveraddress account, uint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mint a wrapped token to cover any underlyingToken that would have been transferred by mistake. Internal\n     * function that can be exposed with access control if desired.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "underlying",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (IERC721)",
                    "body": "function underlying() public view virtual returns (IERC721) {\n        return _underlying;\n    }",
                    "start": "99",
                    "end": "101",
                    "class": "ERC721Wrapper",
                    "signature": "returns (IERC721) underlying",
                    "full_signature": "function underlying() public virtual view returns (IERC721)",
                    "class_method_signature": "ERC721Wrapper.underlying",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the underlying token.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721Burnable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "burn",
                    "parameters": "uint256 tokenId",
                    "modifiers": "",
                    "return": "",
                    "body": "function burn(uint256 tokenId) public virtual {\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        _update(address(0), tokenId, _msgSender());\n    }",
                    "start": "21",
                    "end": "25",
                    "class": "ERC721Burnable",
                    "signature": " burnuint256 tokenId",
                    "full_signature": "function burn(uint256 tokenId) public virtual  ",
                    "class_method_signature": "ERC721Burnable.burnuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "name",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function name() public view virtual returns (string memory) {\n        return _name;\n    }",
                    "start": "53",
                    "end": "55",
                    "class": "ERC20",
                    "signature": "returns (string memory) name",
                    "full_signature": "function name() public virtual view returns (string memory)",
                    "class_method_signature": "ERC20.name",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n/**\n     * @dev Returns the name of the token.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "symbol",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (string memory)",
                    "body": "function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }",
                    "start": "61",
                    "end": "63",
                    "class": "ERC20",
                    "signature": "returns (string memory) symbol",
                    "full_signature": "function symbol() public virtual view returns (string memory)",
                    "class_method_signature": "ERC20.symbol",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "decimals",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint8)",
                    "body": "function decimals() public view virtual returns (uint8) {\n        return 18;\n    }",
                    "start": "78",
                    "end": "80",
                    "class": "ERC20",
                    "signature": "returns (uint8) decimals",
                    "full_signature": "function decimals() public virtual view returns (uint8)",
                    "class_method_signature": "ERC20.decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "totalSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }",
                    "start": "85",
                    "end": "87",
                    "class": "ERC20",
                    "signature": "returns (uint256) totalSupply",
                    "full_signature": "function totalSupply() public virtual view returns (uint256)",
                    "class_method_signature": "ERC20.totalSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-totalSupply}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "balanceOf",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }",
                    "start": "92",
                    "end": "94",
                    "class": "ERC20",
                    "signature": "returns (uint256) balanceOfaddress account",
                    "full_signature": "function balanceOf(address account) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20.balanceOfaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-balanceOf}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transfer",
                    "parameters": "address to, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }",
                    "start": "104",
                    "end": "108",
                    "class": "ERC20",
                    "signature": "returns (bool) transferaddress to, uint256 value",
                    "full_signature": "function transfer(address to, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20.transferaddress to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "allowance",
                    "parameters": "address owner, address spender",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }",
                    "start": "113",
                    "end": "115",
                    "class": "ERC20",
                    "signature": "returns (uint256) allowanceaddress owner, address spender",
                    "full_signature": "function allowance(address owner, address spender) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20.allowanceaddress owner, address spender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-allowance}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "approve",
                    "parameters": "address spender, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }",
                    "start": "127",
                    "end": "131",
                    "class": "ERC20",
                    "signature": "returns (bool) approveaddress spender, uint256 value",
                    "full_signature": "function approve(address spender, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20.approveaddress spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferFrom",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }",
                    "start": "149",
                    "end": "154",
                    "class": "ERC20",
                    "signature": "returns (bool) transferFromaddress from, address to, uint256 value",
                    "full_signature": "function transferFrom(address from, address to, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20.transferFromaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_transfer",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }",
                    "start": "166",
                    "end": "174",
                    "class": "ERC20",
                    "signature": " _transferaddress from, address to, uint256 value",
                    "full_signature": "function _transfer(address from, address to, uint256 value) internal   ",
                    "class_method_signature": "ERC20._transferaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }",
                    "start": "183",
                    "end": "211",
                    "class": "ERC20",
                    "signature": " _updateaddress from, address to, uint256 value",
                    "full_signature": "function _update(address from, address to, uint256 value) internal virtual  ",
                    "class_method_signature": "ERC20._updateaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_mint",
                    "parameters": "address account, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }",
                    "start": "221",
                    "end": "226",
                    "class": "ERC20",
                    "signature": " _mintaddress account, uint256 value",
                    "full_signature": "function _mint(address account, uint256 value) internal   ",
                    "class_method_signature": "ERC20._mintaddress account, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_burn",
                    "parameters": "address account, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }",
                    "start": "236",
                    "end": "241",
                    "class": "ERC20",
                    "signature": " _burnaddress account, uint256 value",
                    "full_signature": "function _burn(address account, uint256 value) internal   ",
                    "class_method_signature": "ERC20._burnaddress account, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_approve",
                    "parameters": "address owner, address spender, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }",
                    "start": "258",
                    "end": "260",
                    "class": "ERC20",
                    "signature": " _approveaddress owner, address spender, uint256 value",
                    "full_signature": "function _approve(address owner, address spender, uint256 value) internal   ",
                    "class_method_signature": "ERC20._approveaddress owner, address spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_approve",
                    "parameters": "address owner, address spender, uint256 value, bool emitEvent",
                    "modifiers": "",
                    "return": "",
                    "body": "function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }",
                    "start": "280",
                    "end": "291",
                    "class": "ERC20",
                    "signature": " _approveaddress owner, address spender, uint256 value, bool emitEvent",
                    "full_signature": "function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual  ",
                    "class_method_signature": "ERC20._approveaddress owner, address spender, uint256 value, bool emitEvent",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_spendAllowance",
                    "parameters": "address owner, address spender, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }",
                    "start": "301",
                    "end": "311",
                    "class": "ERC20",
                    "signature": " _spendAllowanceaddress owner, address spender, uint256 value",
                    "full_signature": "function _spendAllowance(address owner, address spender, uint256 value) internal virtual  ",
                    "class_method_signature": "ERC20._spendAllowanceaddress owner, address spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC20/utils/ERC1363Utils.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Pausable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\n        super._update(from, to, value);\n    }",
                    "start": "30",
                    "end": "32",
                    "class": "ERC20Pausable",
                    "signature": " _updateaddress from, address to, uint256 value",
                    "full_signature": "function _update(address from, address to, uint256 value) internal virtual override ",
                    "class_method_signature": "ERC20Pausable._updateaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC20-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20FlashMint.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "maxFlashLoan",
                    "parameters": "address token",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function maxFlashLoan(address token) public view virtual returns (uint256) {\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\n    }",
                    "start": "48",
                    "end": "50",
                    "class": "ERC20FlashMint",
                    "signature": "returns (uint256) maxFlashLoanaddress token",
                    "full_signature": "function maxFlashLoan(address token) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20FlashMint.maxFlashLoanaddress token",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The loan token is not valid.\n     */\n/**\n     * @dev The requested loan exceeds the max loan value for `token`.\n     */\n/**\n     * @dev The receiver of a flashloan is not a valid {IERC3156FlashBorrower-onFlashLoan} implementer.\n     */\n/**\n     * @dev Returns the maximum amount of tokens available for loan.\n     * @param token The address of the token that is requested.\n     * @return The amount of token that can be loaned.\n     *\n     * NOTE: This function does not consider any form of supply cap, so in case\n     * it's used in a token with a cap like {ERC20Capped}, make sure to override this\n     * function to integrate the cap instead of `type(uint256).max`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "flashFee",
                    "parameters": "address token, uint256 value",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function flashFee(address token, uint256 value) public view virtual returns (uint256) {\n        if (token != address(this)) {\n            revert ERC3156UnsupportedToken(token);\n        }\n        return _flashFee(token, value);\n    }",
                    "start": "60",
                    "end": "65",
                    "class": "ERC20FlashMint",
                    "signature": "returns (uint256) flashFeeaddress token, uint256 value",
                    "full_signature": "function flashFee(address token, uint256 value) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20FlashMint.flashFeeaddress token, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the fee applied when doing flash loans. This function calls\n     * the {_flashFee} function which returns the fee applied when doing flash\n     * loans.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_flashFee",
                    "parameters": "address token, uint256 value",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _flashFee(address token, uint256 value) internal view virtual returns (uint256) {\n        // silence warning about unused variable without the addition of bytecode.\n        token;\n        value;\n        return 0;\n    }",
                    "start": "75",
                    "end": "80",
                    "class": "ERC20FlashMint",
                    "signature": "returns (uint256) _flashFeeaddress token, uint256 value",
                    "full_signature": "function _flashFee(address token, uint256 value) internal virtual view returns (uint256)",
                    "class_method_signature": "ERC20FlashMint._flashFeeaddress token, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the fee applied when doing flash loans. By default this\n     * implementation has 0 fees. This function can be overloaded to make\n     * the flash loan mechanism deflationary.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_flashFeeReceiver",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _flashFeeReceiver() internal view virtual returns (address) {\n        return address(0);\n    }",
                    "start": "88",
                    "end": "90",
                    "class": "ERC20FlashMint",
                    "signature": "returns (address) _flashFeeReceiver",
                    "full_signature": "function _flashFeeReceiver() internal virtual view returns (address)",
                    "class_method_signature": "ERC20FlashMint._flashFeeReceiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the receiver address of the flash fee. By default this\n     * implementation returns the address(0) which means the fee amount will be burnt.\n     * This function can be overloaded to change the fee receiver.\n     * @return The address for which the flash fee will be sent to.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "flashLoan",
                    "parameters": "IERC3156FlashBorrower receiver, address token, uint256 value, bytes calldata data",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 value,\n        bytes calldata data\n    ) public virtual returns (bool) {\n        uint256 maxLoan = maxFlashLoan(token);\n        if (value > maxLoan) {\n            revert ERC3156ExceededMaxLoan(maxLoan);\n        }\n        uint256 fee = flashFee(token, value);\n        _mint(address(receiver), value);\n        if (receiver.onFlashLoan(_msgSender(), token, value, fee, data) != RETURN_VALUE) {\n            revert ERC3156InvalidReceiver(address(receiver));\n        }\n        address flashFeeReceiver = _flashFeeReceiver();\n        _spendAllowance(address(receiver), address(this), value + fee);\n        if (fee == 0 || flashFeeReceiver == address(0)) {\n            _burn(address(receiver), value + fee);\n        } else {\n            _burn(address(receiver), value);\n            _transfer(address(receiver), flashFeeReceiver, fee);\n        }\n        return true;\n    }",
                    "start": "109",
                    "end": "133",
                    "class": "ERC20FlashMint",
                    "signature": "returns (bool) flashLoanIERC3156FlashBorrower receiver, address token, uint256 value, bytes calldata data",
                    "full_signature": "function flashLoan(IERC3156FlashBorrower receiver, address token, uint256 value, bytes calldata data) public virtual  returns (bool)",
                    "class_method_signature": "ERC20FlashMint.flashLoanIERC3156FlashBorrower receiver, address token, uint256 value, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Performs a flash loan. New tokens are minted and sent to the\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\n     * interface. By the end of the flash loan, the receiver is expected to own\n     * value + fee tokens and have them approved back to the token contract itself so\n     * they can be burned.\n     * @param receiver The receiver of the flash loan. Should implement the\n     * {IERC3156FlashBorrower-onFlashLoan} interface.\n     * @param token The token to be flash loaned. Only `address(this)` is\n     * supported.\n     * @param value The amount of tokens to be loaned.\n     * @param data An arbitrary datafield that is passed to the receiver.\n     * @return `true` if the flash loan was successful.\n     */\n// This function can reenter, but it doesn't pose a risk because it always preserves the property that the amount\n// minted at the beginning is always recovered and burned at the end, or else the entire function will revert.\n// slither-disable-next-line reentrancy-no-eth\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20TemporaryApproval.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "allowance",
                    "parameters": "address owner, address spender",
                    "modifiers": "override(IERC20, ERC20)",
                    "return": "returns (uint256)",
                    "body": "function allowance(address owner, address spender) public view virtual override(IERC20, ERC20) returns (uint256) {\n        (bool success, uint256 amount) = Math.tryAdd(\n            super.allowance(owner, spender),\n            _temporaryAllowance(owner, spender)\n        );\n        return success ? amount : type(uint256).max;\n    }",
                    "start": "32",
                    "end": "38",
                    "class": "ERC20TemporaryApproval",
                    "signature": "returns (uint256) allowanceaddress owner, address spender",
                    "full_signature": "function allowance(address owner, address spender) public virtual override(IERC20, ERC20) returns (uint256)",
                    "class_method_signature": "ERC20TemporaryApproval.allowanceaddress owner, address spender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC20_TEMPORARY_APPROVAL_STORAGE\")) - 1)) & ~bytes32(uint256(0xff))\n/**\n     * @dev {allowance} override that includes the temporary allowance when looking up the current allowance. If\n     * adding up the persistent and the temporary allowances result in an overflow, type(uint256).max is returned.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_temporaryAllowance",
                    "parameters": "address owner, address spender",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _temporaryAllowance(address owner, address spender) internal view virtual returns (uint256) {\n        return _temporaryAllowanceSlot(owner, spender).tload();\n    }",
                    "start": "43",
                    "end": "45",
                    "class": "ERC20TemporaryApproval",
                    "signature": "returns (uint256) _temporaryAllowanceaddress owner, address spender",
                    "full_signature": "function _temporaryAllowance(address owner, address spender) internal virtual view returns (uint256)",
                    "class_method_signature": "ERC20TemporaryApproval._temporaryAllowanceaddress owner, address spender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal getter for the current temporary allowance that `spender` has over `owner` tokens.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "temporaryApprove",
                    "parameters": "address spender, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function temporaryApprove(address spender, uint256 value) public virtual returns (bool) {\n        _temporaryApprove(_msgSender(), spender, value);\n        return true;\n    }",
                    "start": "58",
                    "end": "61",
                    "class": "ERC20TemporaryApproval",
                    "signature": "returns (bool) temporaryApproveaddress spender, uint256 value",
                    "full_signature": "function temporaryApprove(address spender, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20TemporaryApproval.temporaryApproveaddress spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Alternative to {approve} that sets a `value` amount of tokens as the temporary allowance of `spender` over\n     * the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Requirements:\n     * - `spender` cannot be the zero address.\n     *\n     * Does NOT emit an {Approval} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_temporaryApprove",
                    "parameters": "address owner, address spender, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function _temporaryApprove(address owner, address spender, uint256 value) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _temporaryAllowanceSlot(owner, spender).tstore(value);\n    }",
                    "start": "75",
                    "end": "83",
                    "class": "ERC20TemporaryApproval",
                    "signature": " _temporaryApproveaddress owner, address spender, uint256 value",
                    "full_signature": "function _temporaryApprove(address owner, address spender, uint256 value) internal virtual  ",
                    "class_method_signature": "ERC20TemporaryApproval._temporaryApproveaddress owner, address spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `value` as the temporary allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `temporaryApprove`, and can be used to e.g. set automatic allowances\n     * for certain subsystems, etc.\n     *\n     * Requirements:\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Does NOT emit an {Approval} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_spendAllowance",
                    "parameters": "address owner, address spender, uint256 value",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _spendAllowance(address owner, address spender, uint256 value) internal virtual override {\n        // load transient allowance\n        uint256 currentTemporaryAllowance = _temporaryAllowance(owner, spender);\n\n        // Check and update (if needed) the temporary allowance + set remaining value\n        if (currentTemporaryAllowance > 0) {\n            // All value is covered by the infinite allowance. nothing left to spend, we can return early\n            if (currentTemporaryAllowance == type(uint256).max) {\n                return;\n            }\n            // check how much of the value is covered by the transient allowance\n            uint256 spendTemporaryAllowance = Math.min(currentTemporaryAllowance, value);\n            unchecked {\n                // decrease transient allowance accordingly\n                _temporaryApprove(owner, spender, currentTemporaryAllowance - spendTemporaryAllowance);\n                // update value necessary\n                value -= spendTemporaryAllowance;\n            }\n        }\n        // reduce any remaining value from the persistent allowance\n        if (value > 0) {\n            super._spendAllowance(owner, spender, value);\n        }\n    }",
                    "start": "91",
                    "end": "114",
                    "class": "ERC20TemporaryApproval",
                    "signature": " _spendAllowanceaddress owner, address spender, uint256 value",
                    "full_signature": "function _spendAllowance(address owner, address spender, uint256 value) internal virtual override ",
                    "class_method_signature": "ERC20TemporaryApproval._spendAllowanceaddress owner, address spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev {_spendAllowance} override that consumes the temporary allowance (if any) before eventually falling back\n     * to consuming the persistent allowance.\n     * NOTE: This function skips calling `super._spendAllowance` if the temporary allowance\n     * is enough to cover the spending.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Wrapper.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "decimals",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint8)",
                    "body": "function decimals() public view virtual override returns (uint8) {\n        try IERC20Metadata(address(_underlying)).decimals() returns (uint8 value) {\n            return value;\n        } catch {\n            return super.decimals();\n        }\n    }",
                    "start": "39",
                    "end": "45",
                    "class": "ERC20Wrapper",
                    "signature": "returns (uint8) decimals",
                    "full_signature": "function decimals() public virtual override returns (uint8)",
                    "class_method_signature": "ERC20Wrapper.decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The underlying token couldn't be wrapped.\n     */\n/**\n     * @dev See {ERC20-decimals}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "underlying",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (IERC20)",
                    "body": "function underlying() public view returns (IERC20) {\n        return _underlying;\n    }",
                    "start": "50",
                    "end": "52",
                    "class": "ERC20Wrapper",
                    "signature": "returns (IERC20) underlying",
                    "full_signature": "function underlying() public  view returns (IERC20)",
                    "class_method_signature": "ERC20Wrapper.underlying",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the address of the underlying ERC-20 token that is being wrapped.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "depositFor",
                    "parameters": "address account, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function depositFor(address account, uint256 value) public virtual returns (bool) {\n        address sender = _msgSender();\n        if (sender == address(this)) {\n            revert ERC20InvalidSender(address(this));\n        }\n        if (account == address(this)) {\n            revert ERC20InvalidReceiver(account);\n        }\n        SafeERC20.safeTransferFrom(_underlying, sender, address(this), value);\n        _mint(account, value);\n        return true;\n    }",
                    "start": "57",
                    "end": "68",
                    "class": "ERC20Wrapper",
                    "signature": "returns (bool) depositForaddress account, uint256 value",
                    "full_signature": "function depositFor(address account, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20Wrapper.depositForaddress account, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Allow a user to deposit underlying tokens and mint the corresponding number of wrapped tokens.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "withdrawTo",
                    "parameters": "address account, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function withdrawTo(address account, uint256 value) public virtual returns (bool) {\n        if (account == address(this)) {\n            revert ERC20InvalidReceiver(account);\n        }\n        _burn(_msgSender(), value);\n        SafeERC20.safeTransfer(_underlying, account, value);\n        return true;\n    }",
                    "start": "73",
                    "end": "80",
                    "class": "ERC20Wrapper",
                    "signature": "returns (bool) withdrawToaddress account, uint256 value",
                    "full_signature": "function withdrawTo(address account, uint256 value) public virtual  returns (bool)",
                    "class_method_signature": "ERC20Wrapper.withdrawToaddress account, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Allow a user to burn a number of wrapped tokens and withdraw the corresponding number of underlying tokens.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_recover",
                    "parameters": "address account",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function _recover(address account) internal virtual returns (uint256) {\n        uint256 value = _underlying.balanceOf(address(this)) - totalSupply();\n        _mint(account, value);\n        return value;\n    }",
                    "start": "86",
                    "end": "90",
                    "class": "ERC20Wrapper",
                    "signature": "returns (uint256) _recoveraddress account",
                    "full_signature": "function _recover(address account) internal virtual  returns (uint256)",
                    "class_method_signature": "ERC20Wrapper._recoveraddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Mint wrapped token to cover any underlyingTokens that would have been transferred by mistake or acquired from\n     * rebasing mechanisms. Internal function that can be exposed with access control if desired.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": [],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_tryGetAssetDecimals",
                    "parameters": "IERC20 asset_",
                    "modifiers": "view",
                    "return": "returns (bool ok, uint8 assetDecimals)",
                    "body": "function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool ok, uint8 assetDecimals) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeCall(IERC20Metadata.decimals, ())\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }",
                    "start": "86",
                    "end": "97",
                    "class": "ERC4626",
                    "signature": "returns (bool ok, uint8 assetDecimals) _tryGetAssetDecimalsIERC20 asset_",
                    "full_signature": "function _tryGetAssetDecimals(IERC20 asset_) private  view returns (bool ok, uint8 assetDecimals)",
                    "class_method_signature": "ERC4626._tryGetAssetDecimalsIERC20 asset_",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n/**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n/**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n/**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n/**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC-20 or ERC-777).\n     */\n/**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "decimals",
                    "parameters": "",
                    "modifiers": "override(IERC20Metadata, ERC20)",
                    "return": "returns (uint8)",
                    "body": "function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }",
                    "start": "106",
                    "end": "108",
                    "class": "ERC4626",
                    "signature": "returns (uint8) decimals",
                    "full_signature": "function decimals() public virtual override(IERC20Metadata, ERC20) returns (uint8)",
                    "class_method_signature": "ERC4626.decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "asset",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function asset() public view virtual returns (address) {\n        return address(_asset);\n    }",
                    "start": "111",
                    "end": "113",
                    "class": "ERC4626",
                    "signature": "returns (address) asset",
                    "full_signature": "function asset() public virtual view returns (address)",
                    "class_method_signature": "ERC4626.asset",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-asset}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "totalAssets",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function totalAssets() public view virtual returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }",
                    "start": "116",
                    "end": "118",
                    "class": "ERC4626",
                    "signature": "returns (uint256) totalAssets",
                    "full_signature": "function totalAssets() public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.totalAssets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-totalAssets}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "convertToShares",
                    "parameters": "uint256 assets",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }",
                    "start": "121",
                    "end": "123",
                    "class": "ERC4626",
                    "signature": "returns (uint256) convertToSharesuint256 assets",
                    "full_signature": "function convertToShares(uint256 assets) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.convertToSharesuint256 assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-convertToShares}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "convertToAssets",
                    "parameters": "uint256 shares",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }",
                    "start": "126",
                    "end": "128",
                    "class": "ERC4626",
                    "signature": "returns (uint256) convertToAssetsuint256 shares",
                    "full_signature": "function convertToAssets(uint256 shares) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.convertToAssetsuint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-convertToAssets}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "maxDeposit",
                    "parameters": "address",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }",
                    "start": "131",
                    "end": "133",
                    "class": "ERC4626",
                    "signature": "returns (uint256) maxDepositaddress",
                    "full_signature": "function maxDeposit(address) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.maxDepositaddress",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-maxDeposit}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "maxMint",
                    "parameters": "address",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }",
                    "start": "136",
                    "end": "138",
                    "class": "ERC4626",
                    "signature": "returns (uint256) maxMintaddress",
                    "full_signature": "function maxMint(address) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.maxMintaddress",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-maxMint}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "maxWithdraw",
                    "parameters": "address owner",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }",
                    "start": "141",
                    "end": "143",
                    "class": "ERC4626",
                    "signature": "returns (uint256) maxWithdrawaddress owner",
                    "full_signature": "function maxWithdraw(address owner) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.maxWithdrawaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-maxWithdraw}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "maxRedeem",
                    "parameters": "address owner",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }",
                    "start": "146",
                    "end": "148",
                    "class": "ERC4626",
                    "signature": "returns (uint256) maxRedeemaddress owner",
                    "full_signature": "function maxRedeem(address owner) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.maxRedeemaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-maxRedeem}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewDeposit",
                    "parameters": "uint256 assets",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }",
                    "start": "151",
                    "end": "153",
                    "class": "ERC4626",
                    "signature": "returns (uint256) previewDeposituint256 assets",
                    "full_signature": "function previewDeposit(uint256 assets) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.previewDeposituint256 assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-previewDeposit}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewMint",
                    "parameters": "uint256 shares",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }",
                    "start": "156",
                    "end": "158",
                    "class": "ERC4626",
                    "signature": "returns (uint256) previewMintuint256 shares",
                    "full_signature": "function previewMint(uint256 shares) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.previewMintuint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-previewMint}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewWithdraw",
                    "parameters": "uint256 assets",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }",
                    "start": "161",
                    "end": "163",
                    "class": "ERC4626",
                    "signature": "returns (uint256) previewWithdrawuint256 assets",
                    "full_signature": "function previewWithdraw(uint256 assets) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.previewWithdrawuint256 assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-previewWithdraw}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewRedeem",
                    "parameters": "uint256 shares",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }",
                    "start": "166",
                    "end": "168",
                    "class": "ERC4626",
                    "signature": "returns (uint256) previewRedeemuint256 shares",
                    "full_signature": "function previewRedeem(uint256 shares) public virtual view returns (uint256)",
                    "class_method_signature": "ERC4626.previewRedeemuint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-previewRedeem}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "deposit",
                    "parameters": "uint256 assets, address receiver",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }",
                    "start": "171",
                    "end": "181",
                    "class": "ERC4626",
                    "signature": "returns (uint256) deposituint256 assets, address receiver",
                    "full_signature": "function deposit(uint256 assets, address receiver) public virtual  returns (uint256)",
                    "class_method_signature": "ERC4626.deposituint256 assets, address receiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-deposit}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "mint",
                    "parameters": "uint256 shares, address receiver",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }",
                    "start": "184",
                    "end": "194",
                    "class": "ERC4626",
                    "signature": "returns (uint256) mintuint256 shares, address receiver",
                    "full_signature": "function mint(uint256 shares, address receiver) public virtual  returns (uint256)",
                    "class_method_signature": "ERC4626.mintuint256 shares, address receiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-mint}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "withdraw",
                    "parameters": "uint256 assets, address receiver, address owner",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }",
                    "start": "197",
                    "end": "207",
                    "class": "ERC4626",
                    "signature": "returns (uint256) withdrawuint256 assets, address receiver, address owner",
                    "full_signature": "function withdraw(uint256 assets, address receiver, address owner) public virtual  returns (uint256)",
                    "class_method_signature": "ERC4626.withdrawuint256 assets, address receiver, address owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-withdraw}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "redeem",
                    "parameters": "uint256 shares, address receiver, address owner",
                    "modifiers": "",
                    "return": "returns (uint256)",
                    "body": "function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }",
                    "start": "210",
                    "end": "220",
                    "class": "ERC4626",
                    "signature": "returns (uint256) redeemuint256 shares, address receiver, address owner",
                    "full_signature": "function redeem(uint256 shares, address receiver, address owner) public virtual  returns (uint256)",
                    "class_method_signature": "ERC4626.redeemuint256 shares, address receiver, address owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/** @dev See {IERC4626-redeem}. */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_convertToShares",
                    "parameters": "uint256 assets, Math.Rounding rounding",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }",
                    "start": "225",
                    "end": "227",
                    "class": "ERC4626",
                    "signature": "returns (uint256) _convertToSharesuint256 assets, Math.Rounding rounding",
                    "full_signature": "function _convertToShares(uint256 assets, Math.Rounding rounding) internal virtual view returns (uint256)",
                    "class_method_signature": "ERC4626._convertToSharesuint256 assets, Math.Rounding rounding",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_convertToAssets",
                    "parameters": "uint256 shares, Math.Rounding rounding",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }",
                    "start": "232",
                    "end": "234",
                    "class": "ERC4626",
                    "signature": "returns (uint256) _convertToAssetsuint256 shares, Math.Rounding rounding",
                    "full_signature": "function _convertToAssets(uint256 shares, Math.Rounding rounding) internal virtual view returns (uint256)",
                    "class_method_signature": "ERC4626._convertToAssetsuint256 shares, Math.Rounding rounding",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_deposit",
                    "parameters": "address caller, address receiver, uint256 assets, uint256 shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC-777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }",
                    "start": "239",
                    "end": "251",
                    "class": "ERC4626",
                    "signature": " _depositaddress caller, address receiver, uint256 assets, uint256 shares",
                    "full_signature": "function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual  ",
                    "class_method_signature": "ERC4626._depositaddress caller, address receiver, uint256 assets, uint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Deposit/mint common workflow.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_withdraw",
                    "parameters": "address caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "modifiers": "",
                    "return": "",
                    "body": "function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC-777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }",
                    "start": "256",
                    "end": "277",
                    "class": "ERC4626",
                    "signature": " _withdrawaddress caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "full_signature": "function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares) internal virtual  ",
                    "class_method_signature": "ERC4626._withdrawaddress caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Withdraw/redeem common workflow.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC1363.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override(ERC165, IERC165)",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "45",
                    "end": "47",
                    "class": "ERC1363",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override(ERC165, IERC165) returns (bool)",
                    "class_method_signature": "ERC1363.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Indicates a failure within the {transfer} part of a transferAndCall operation.\n     * @param receiver Address to which tokens are being transferred.\n     * @param value Amount of tokens to be transferred.\n     */\n/**\n     * @dev Indicates a failure within the {transferFrom} part of a transferFromAndCall operation.\n     * @param sender Address from which to send tokens.\n     * @param receiver Address to which tokens are being transferred.\n     * @param value Amount of tokens to be transferred.\n     */\n/**\n     * @dev Indicates a failure within the {approve} part of a approveAndCall operation.\n     * @param spender Address which will spend the funds.\n     * @param value Amount of tokens to be spent.\n     */\n/**\n     * @inheritdoc IERC165\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferAndCall",
                    "parameters": "address to, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transferAndCall(address to, uint256 value) public returns (bool) {\n        return transferAndCall(to, value, \"\");\n    }",
                    "start": "61",
                    "end": "63",
                    "class": "ERC1363",
                    "signature": "returns (bool) transferAndCalladdress to, uint256 value",
                    "full_signature": "function transferAndCall(address to, uint256 value) public   returns (bool)",
                    "class_method_signature": "ERC1363.transferAndCalladdress to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`. Returns a flag that indicates\n     * if the call succeeded.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `to` must implement the {IERC1363Receiver} interface.\n     * - The target must return the {IERC1363Receiver-onTransferReceived} selector to accept the transfer.\n     * - The internal {transfer} must succeed (returned `true`).\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferAndCall",
                    "parameters": "address to, uint256 value, bytes memory data",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transferAndCall(address to, uint256 value, bytes memory data) public virtual returns (bool) {\n        if (!transfer(to, value)) {\n            revert ERC1363TransferFailed(to, value);\n        }\n        ERC1363Utils.checkOnERC1363TransferReceived(_msgSender(), _msgSender(), to, value, data);\n        return true;\n    }",
                    "start": "69",
                    "end": "75",
                    "class": "ERC1363",
                    "signature": "returns (bool) transferAndCalladdress to, uint256 value, bytes memory data",
                    "full_signature": "function transferAndCall(address to, uint256 value, bytes memory data) public virtual  returns (bool)",
                    "class_method_signature": "ERC1363.transferAndCalladdress to, uint256 value, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Variant of {transferAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferFromAndCall",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transferFromAndCall(address from, address to, uint256 value) public returns (bool) {\n        return transferFromAndCall(from, to, value, \"\");\n    }",
                    "start": "89",
                    "end": "91",
                    "class": "ERC1363",
                    "signature": "returns (bool) transferFromAndCalladdress from, address to, uint256 value",
                    "full_signature": "function transferFromAndCall(address from, address to, uint256 value) public   returns (bool)",
                    "class_method_signature": "ERC1363.transferFromAndCalladdress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`. Returns a flag that indicates\n     * if the call succeeded.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `to` must implement the {IERC1363Receiver} interface.\n     * - The target must return the {IERC1363Receiver-onTransferReceived} selector to accept the transfer.\n     * - The internal {transferFrom} must succeed (returned `true`).\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferFromAndCall",
                    "parameters": "address from, address to, uint256 value, bytes memory data",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function transferFromAndCall(\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) public virtual returns (bool) {\n        if (!transferFrom(from, to, value)) {\n            revert ERC1363TransferFromFailed(from, to, value);\n        }\n        ERC1363Utils.checkOnERC1363TransferReceived(_msgSender(), from, to, value, data);\n        return true;\n    }",
                    "start": "97",
                    "end": "108",
                    "class": "ERC1363",
                    "signature": "returns (bool) transferFromAndCalladdress from, address to, uint256 value, bytes memory data",
                    "full_signature": "function transferFromAndCall(address from, address to, uint256 value, bytes memory data) public virtual  returns (bool)",
                    "class_method_signature": "ERC1363.transferFromAndCalladdress from, address to, uint256 value, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Variant of {transferFromAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "approveAndCall",
                    "parameters": "address spender, uint256 value",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function approveAndCall(address spender, uint256 value) public returns (bool) {\n        return approveAndCall(spender, value, \"\");\n    }",
                    "start": "122",
                    "end": "124",
                    "class": "ERC1363",
                    "signature": "returns (bool) approveAndCalladdress spender, uint256 value",
                    "full_signature": "function approveAndCall(address spender, uint256 value) public   returns (bool)",
                    "class_method_signature": "ERC1363.approveAndCalladdress spender, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * Returns a flag that indicates if the call succeeded.\n     *\n     * Requirements:\n     *\n     * - The target has code (i.e. is a contract).\n     * - The target `spender` must implement the {IERC1363Spender} interface.\n     * - The target must return the {IERC1363Spender-onApprovalReceived} selector to accept the approval.\n     * - The internal {approve} must succeed (returned `true`).\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "approveAndCall",
                    "parameters": "address spender, uint256 value, bytes memory data",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function approveAndCall(address spender, uint256 value, bytes memory data) public virtual returns (bool) {\n        if (!approve(spender, value)) {\n            revert ERC1363ApproveFailed(spender, value);\n        }\n        ERC1363Utils.checkOnERC1363ApprovalReceived(_msgSender(), spender, value, data);\n        return true;\n    }",
                    "start": "130",
                    "end": "136",
                    "class": "ERC1363",
                    "signature": "returns (bool) approveAndCalladdress spender, uint256 value, bytes memory data",
                    "full_signature": "function approveAndCall(address spender, uint256 value, bytes memory data) public virtual  returns (bool)",
                    "class_method_signature": "ERC1363.approveAndCalladdress spender, uint256 value, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Variant of {approveAndCall} that accepts an additional `data` parameter with\n     * no specified format.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Votes.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_maxSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _maxSupply() internal view virtual returns (uint256) {\n        return type(uint208).max;\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "ERC20Votes",
                    "signature": "returns (uint256) _maxSupply",
                    "full_signature": "function _maxSupply() internal virtual view returns (uint256)",
                    "class_method_signature": "ERC20Votes._maxSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Total supply cap has been exceeded, introducing a risk of votes overflowing.\n     */\n/**\n     * @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\n     *\n     * This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\n     * so that checkpoints can be stored in the Trace208 structure used by {Votes}. Increasing this value will not\n     * remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\n     * {Votes-_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\n     * additional logic requires it. When resolving override conflicts on this function, the minimum should be\n     * returned.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 value) internal virtual override {\n        super._update(from, to, value);\n        if (from == address(0)) {\n            uint256 supply = totalSupply();\n            uint256 cap = _maxSupply();\n            if (supply > cap) {\n                revert ERC20ExceededSafeSupply(supply, cap);\n            }\n        }\n        _transferVotingUnits(from, to, value);\n    }",
                    "start": "48",
                    "end": "58",
                    "class": "ERC20Votes",
                    "signature": " _updateaddress from, address to, uint256 value",
                    "full_signature": "function _update(address from, address to, uint256 value) internal virtual override ",
                    "class_method_signature": "ERC20Votes._updateaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getVotingUnits",
                    "parameters": "address account",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _getVotingUnits(address account) internal view virtual override returns (uint256) {\n        return balanceOf(account);\n    }",
                    "start": "66",
                    "end": "68",
                    "class": "ERC20Votes",
                    "signature": "returns (uint256) _getVotingUnitsaddress account",
                    "full_signature": "function _getVotingUnits(address account) internal virtual override returns (uint256)",
                    "class_method_signature": "ERC20Votes._getVotingUnitsaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the voting units of an `account`.\n     *\n     * WARNING: Overriding this function may compromise the internal vote accounting.\n     * `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "numCheckpoints",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function numCheckpoints(address account) public view virtual returns (uint32) {\n        return _numCheckpoints(account);\n    }",
                    "start": "73",
                    "end": "75",
                    "class": "ERC20Votes",
                    "signature": "returns (uint32) numCheckpointsaddress account",
                    "full_signature": "function numCheckpoints(address account) public virtual view returns (uint32)",
                    "class_method_signature": "ERC20Votes.numCheckpointsaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get number of checkpoints for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "checkpoints",
                    "parameters": "address account, uint32 pos",
                    "modifiers": "view",
                    "return": "returns (Checkpoints.Checkpoint208 memory)",
                    "body": "function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoints.Checkpoint208 memory) {\n        return _checkpoints(account, pos);\n    }",
                    "start": "80",
                    "end": "82",
                    "class": "ERC20Votes",
                    "signature": "returns (Checkpoints.Checkpoint208 memory) checkpointsaddress account, uint32 pos",
                    "full_signature": "function checkpoints(address account, uint32 pos) public virtual view returns (Checkpoints.Checkpoint208 memory)",
                    "class_method_signature": "ERC20Votes.checkpointsaddress account, uint32 pos",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Capped.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "cap",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function cap() public view virtual returns (uint256) {\n        return _cap;\n    }",
                    "start": "38",
                    "end": "40",
                    "class": "ERC20Capped",
                    "signature": "returns (uint256) cap",
                    "full_signature": "function cap() public virtual view returns (uint256)",
                    "class_method_signature": "ERC20Capped.cap",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Total supply cap has been exceeded.\n     */\n/**\n     * @dev The supplied cap is not a valid cap.\n     */\n/**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n/**\n     * @dev Returns the cap on the token's total supply.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 value",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 value) internal virtual override {\n        super._update(from, to, value);\n\n        if (from == address(0)) {\n            uint256 maxSupply = cap();\n            uint256 supply = totalSupply();\n            if (supply > maxSupply) {\n                revert ERC20ExceededCap(supply, maxSupply);\n            }\n        }\n    }",
                    "start": "45",
                    "end": "55",
                    "class": "ERC20Capped",
                    "signature": " _updateaddress from, address to, uint256 value",
                    "full_signature": "function _update(address from, address to, uint256 value) internal virtual override ",
                    "class_method_signature": "ERC20Capped._updateaddress from, address to, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {ERC20-_update}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "burn",
                    "parameters": "uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }",
                    "start": "20",
                    "end": "22",
                    "class": "ERC20Burnable",
                    "signature": " burnuint256 value",
                    "full_signature": "function burn(uint256 value) public virtual  ",
                    "class_method_signature": "ERC20Burnable.burnuint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "burnFrom",
                    "parameters": "address account, uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }",
                    "start": "35",
                    "end": "38",
                    "class": "ERC20Burnable",
                    "signature": " burnFromaddress account, uint256 value",
                    "full_signature": "function burnFrom(address account, uint256 value) public virtual  ",
                    "class_method_signature": "ERC20Burnable.burnFromaddress account, uint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "permit",
                    "parameters": "address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "modifiers": "",
                    "return": "",
                    "body": "function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }",
                    "start": "44",
                    "end": "67",
                    "class": "ERC20Permit",
                    "signature": " permitaddress owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "full_signature": "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual  ",
                    "class_method_signature": "ERC20Permit.permitaddress owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Permit deadline has expired.\n     */\n/**\n     * @dev Mismatched signature.\n     */\n/**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\n     */\n/**\n     * @inheritdoc IERC20Permit\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "nonces",
                    "parameters": "address owner",
                    "modifiers": "override(IERC20Permit, Nonces)",
                    "return": "returns (uint256)",
                    "body": "function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }",
                    "start": "72",
                    "end": "74",
                    "class": "ERC20Permit",
                    "signature": "returns (uint256) noncesaddress owner",
                    "full_signature": "function nonces(address owner) public virtual override(IERC20Permit, Nonces) returns (uint256)",
                    "class_method_signature": "ERC20Permit.noncesaddress owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IERC20Permit\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "DOMAIN_SEPARATOR",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }",
                    "start": "80",
                    "end": "82",
                    "class": "ERC20Permit",
                    "signature": "returns (bytes32) DOMAIN_SEPARATOR",
                    "full_signature": "function DOMAIN_SEPARATOR() external virtual view returns (bytes32)",
                    "class_method_signature": "ERC20Permit.DOMAIN_SEPARATOR",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IERC20Permit\n     */\n// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": [],
    "/root/openzeppelin-contracts/contracts/vendor/compound/ICompoundTimelock.sol": [],
    "/root/openzeppelin-contracts/contracts/proxy/Proxy.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_delegate",
                    "parameters": "address implementation",
                    "modifiers": "",
                    "return": "",
                    "body": "function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }",
                    "start": "22",
                    "end": "45",
                    "class": "Proxy",
                    "signature": " _delegateaddress implementation",
                    "full_signature": "function _delegate(address implementation) internal virtual  ",
                    "class_method_signature": "Proxy._delegateaddress implementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_implementation",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _implementation() internal view virtual returns (address);",
                    "start": "51",
                    "end": "51",
                    "class": "Proxy",
                    "signature": "returns (address) _implementation",
                    "full_signature": "function _implementation() internal virtual view returns (address)",
                    "class_method_signature": "Proxy._implementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n     * function and {_fallback} should delegate.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_fallback",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _fallback() internal virtual {\n        _delegate(_implementation());\n    }",
                    "start": "58",
                    "end": "60",
                    "class": "Proxy",
                    "signature": " _fallback",
                    "full_signature": "function _fallback() internal virtual  ",
                    "class_method_signature": "Proxy._fallback",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/proxy/Clones.sol": [],
    "/root/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "proxiableUUID",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }",
                    "start": "72",
                    "end": "74",
                    "class": "UUPSUpgradeable",
                    "signature": "returns (bytes32) proxiableUUID",
                    "full_signature": "function proxiableUUID() external virtual view returns (bytes32)",
                    "class_method_signature": "UUPSUpgradeable.proxiableUUID",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n/**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n/**\n     * @dev The call is from an unauthorized context.\n     */\n/**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n/**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n/**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n/**\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "upgradeToAndCall",
                    "parameters": "address newImplementation, bytes memory data",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }",
                    "start": "86",
                    "end": "89",
                    "class": "UUPSUpgradeable",
                    "signature": " upgradeToAndCalladdress newImplementation, bytes memory data",
                    "full_signature": "function upgradeToAndCall(address newImplementation, bytes memory data) public virtual payable ",
                    "class_method_signature": "UUPSUpgradeable.upgradeToAndCalladdress newImplementation, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkProxy",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }",
                    "start": "96",
                    "end": "103",
                    "class": "UUPSUpgradeable",
                    "signature": " _checkProxy",
                    "full_signature": "function _checkProxy() internal virtual view ",
                    "class_method_signature": "UUPSUpgradeable._checkProxy",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_checkNotDelegated",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }",
                    "start": "109",
                    "end": "114",
                    "class": "UUPSUpgradeable",
                    "signature": " _checkNotDelegated",
                    "full_signature": "function _checkNotDelegated() internal virtual view ",
                    "class_method_signature": "UUPSUpgradeable._checkNotDelegated",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_authorizeUpgrade",
                    "parameters": "address newImplementation",
                    "modifiers": "",
                    "return": "",
                    "body": "function _authorizeUpgrade(address newImplementation) internal virtual;",
                    "start": "126",
                    "end": "126",
                    "class": "UUPSUpgradeable",
                    "signature": " _authorizeUpgradeaddress newImplementation",
                    "full_signature": "function _authorizeUpgrade(address newImplementation) internal virtual  ",
                    "class_method_signature": "UUPSUpgradeable._authorizeUpgradeaddress newImplementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_upgradeToAndCallUUPS",
                    "parameters": "address newImplementation, bytes memory data",
                    "modifiers": "",
                    "return": "",
                    "body": "function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }",
                    "start": "136",
                    "end": "146",
                    "class": "UUPSUpgradeable",
                    "signature": " _upgradeToAndCallUUPSaddress newImplementation, bytes memory data",
                    "full_signature": "function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private   ",
                    "class_method_signature": "UUPSUpgradeable._upgradeToAndCallUUPSaddress newImplementation, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC-1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_checkInitializing",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }",
                    "start": "178",
                    "end": "182",
                    "class": "Initializable",
                    "signature": " _checkInitializing",
                    "full_signature": "function _checkInitializing() internal virtual view ",
                    "class_method_signature": "Initializable._checkInitializing",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n// keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n/**\n     * @dev The contract is already initialized.\n     */\n/**\n     * @dev The contract is not initializing.\n     */\n/**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n/**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n/**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n/**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n/**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_disableInitializers",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }",
                    "start": "192",
                    "end": "203",
                    "class": "Initializable",
                    "signature": " _disableInitializers",
                    "full_signature": "function _disableInitializers() internal virtual  ",
                    "class_method_signature": "Initializable._disableInitializers",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getInitializedVersion",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint64)",
                    "body": "function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }",
                    "start": "208",
                    "end": "210",
                    "class": "Initializable",
                    "signature": "returns (uint64) _getInitializedVersion",
                    "full_signature": "function _getInitializedVersion() internal  view returns (uint64)",
                    "class_method_signature": "Initializable._getInitializedVersion",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_isInitializing",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }",
                    "start": "215",
                    "end": "217",
                    "class": "Initializable",
                    "signature": "returns (bool) _isInitializing",
                    "full_signature": "function _isInitializing() internal  view returns (bool)",
                    "class_method_signature": "Initializable._isInitializing",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getInitializableStorage",
                    "parameters": "",
                    "modifiers": "pure",
                    "return": "returns (InitializableStorage storage $)",
                    "body": "function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }",
                    "start": "223",
                    "end": "227",
                    "class": "Initializable",
                    "signature": "returns (InitializableStorage storage $) _getInitializableStorage",
                    "full_signature": "function _getInitializableStorage() private  pure returns (InitializableStorage storage $)",
                    "class_method_signature": "Initializable._getInitializableStorage",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns a pointer to the storage namespace.\n     */\n// solhint-disable-next-line var-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": [],
    "/root/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "implementation",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function implementation() public view virtual returns (address) {\n        return _implementation;\n    }",
                    "start": "38",
                    "end": "40",
                    "class": "UpgradeableBeacon",
                    "signature": "returns (address) implementation",
                    "full_signature": "function implementation() public virtual view returns (address)",
                    "class_method_signature": "UpgradeableBeacon.implementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The `implementation` of the beacon is invalid.\n     */\n/**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n/**\n     * @dev Sets the address of the initial implementation, and the initial owner who can upgrade the beacon.\n     */\n/**\n     * @dev Returns the current implementation address.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "upgradeTo",
                    "parameters": "address newImplementation",
                    "modifiers": "",
                    "return": "",
                    "body": "function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n    }",
                    "start": "52",
                    "end": "54",
                    "class": "UpgradeableBeacon",
                    "signature": " upgradeToaddress newImplementation",
                    "full_signature": "function upgradeTo(address newImplementation) public virtual  ",
                    "class_method_signature": "UpgradeableBeacon.upgradeToaddress newImplementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setImplementation",
                    "parameters": "address newImplementation",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert BeaconInvalidImplementation(newImplementation);\n        }\n        _implementation = newImplementation;\n        emit Upgraded(newImplementation);\n    }",
                    "start": "63",
                    "end": "69",
                    "class": "UpgradeableBeacon",
                    "signature": " _setImplementationaddress newImplementation",
                    "full_signature": "function _setImplementation(address newImplementation) private   ",
                    "class_method_signature": "UpgradeableBeacon._setImplementationaddress newImplementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_implementation",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }",
                    "start": "47",
                    "end": "49",
                    "class": "BeaconProxy",
                    "signature": "returns (address) _implementation",
                    "full_signature": "function _implementation() internal virtual override returns (address)",
                    "class_method_signature": "BeaconProxy._implementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\n/**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n/**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_getBeacon",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _getBeacon() internal view virtual returns (address) {\n        return _beacon;\n    }",
                    "start": "54",
                    "end": "56",
                    "class": "BeaconProxy",
                    "signature": "returns (address) _getBeacon",
                    "full_signature": "function _getBeacon() internal virtual view returns (address)",
                    "class_method_signature": "BeaconProxy._getBeacon",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the beacon.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol": [],
    "/root/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_implementation",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (address)",
                    "body": "function _implementation() internal view virtual override returns (address) {\n        return ERC1967Utils.getImplementation();\n    }",
                    "start": "37",
                    "end": "39",
                    "class": "ERC1967Proxy",
                    "signature": "returns (address) _implementation",
                    "full_signature": "function _implementation() internal virtual override returns (address)",
                    "class_method_signature": "ERC1967Proxy._implementation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n/**\n     * @dev Returns the current implementation address.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_proxyAdmin",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function _proxyAdmin() internal view virtual returns (address) {\n        return _admin;\n    }",
                    "start": "88",
                    "end": "90",
                    "class": "TransparentUpgradeableProxy",
                    "signature": "returns (address) _proxyAdmin",
                    "full_signature": "function _proxyAdmin() internal virtual view returns (address)",
                    "class_method_signature": "TransparentUpgradeableProxy._proxyAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// An immutable address for the admin to avoid unnecessary SLOADs before each call\n// at the expense of removing the ability to change the admin once it's set.\n// This is acceptable if the admin is always a ProxyAdmin instance or similar contract\n// with its own ability to transfer the permissions to another account.\n/**\n     * @dev The proxy caller is the current admin, and can't fallback to the proxy target.\n     */\n/**\n     * @dev Initializes an upgradeable proxy managed by an instance of a {ProxyAdmin} with an `initialOwner`,\n     * backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in\n     * {ERC1967Proxy-constructor}.\n     */\n/**\n     * @dev Returns the admin of this proxy.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_fallback",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _fallback() internal virtual override {\n        if (msg.sender == _proxyAdmin()) {\n            if (msg.sig != ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                revert ProxyDeniedAdminAccess();\n            } else {\n                _dispatchUpgradeToAndCall();\n            }\n        } else {\n            super._fallback();\n        }\n    }",
                    "start": "95",
                    "end": "105",
                    "class": "TransparentUpgradeableProxy",
                    "signature": " _fallback",
                    "full_signature": "function _fallback() internal virtual override ",
                    "class_method_signature": "TransparentUpgradeableProxy._fallback",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_dispatchUpgradeToAndCall",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _dispatchUpgradeToAndCall() private {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        ERC1967Utils.upgradeToAndCall(newImplementation, data);\n    }",
                    "start": "114",
                    "end": "117",
                    "class": "TransparentUpgradeableProxy",
                    "signature": " _dispatchUpgradeToAndCall",
                    "full_signature": "function _dispatchUpgradeToAndCall() private   ",
                    "class_method_signature": "TransparentUpgradeableProxy._dispatchUpgradeToAndCall",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Upgrade the implementation of the proxy. See {ERC1967Utils-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "upgradeAndCall",
                    "parameters": "ITransparentUpgradeableProxy proxy, address implementation, bytes memory data",
                    "modifiers": "payable",
                    "return": "",
                    "body": "function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }",
                    "start": "38",
                    "end": "44",
                    "class": "ProxyAdmin",
                    "signature": " upgradeAndCallITransparentUpgradeableProxy proxy, address implementation, bytes memory data",
                    "full_signature": "function upgradeAndCall(ITransparentUpgradeableProxy proxy, address implementation, bytes memory data) public virtual payable ",
                    "class_method_signature": "ProxyAdmin.upgradeAndCallITransparentUpgradeableProxy proxy, address implementation, bytes memory data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgrade(address,address)`\n     * and `upgradeAndCall(address,address,bytes)` are present, and `upgrade` must be used if no function should be called,\n     * while `upgradeAndCall` will invoke the `receive` function if the third argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeAndCall(address,address,bytes)` is present, and the third argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n/**\n     * @dev Sets the initial owner who can perform upgrades.\n     */\n/**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation.\n     * See {TransparentUpgradeableProxy-_dispatchUpgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/MerkleTreeMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "setup",
                    "parameters": "uint8 _depth, bytes32 _zero",
                    "modifiers": "",
                    "return": "",
                    "body": "function setup(uint8 _depth, bytes32 _zero) public {\n        root = _tree.setup(_depth, _zero);\n    }",
                    "start": "18",
                    "end": "20",
                    "class": "MerkleTreeMock",
                    "signature": " setupuint8 _depth, bytes32 _zero",
                    "full_signature": "function setup(uint8 _depth, bytes32 _zero) public   ",
                    "class_method_signature": "MerkleTreeMock.setupuint8 _depth, bytes32 _zero",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// This mock only stored the latest root.\n// Production contract may want to store historical values.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "nextLeafIndex",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function nextLeafIndex() public view returns (uint256) {\n        return _tree._nextLeafIndex;\n    }",
                    "start": "33",
                    "end": "35",
                    "class": "MerkleTreeMock",
                    "signature": "returns (uint256) nextLeafIndex",
                    "full_signature": "function nextLeafIndex() public  view returns (uint256)",
                    "class_method_signature": "MerkleTreeMock.nextLeafIndex",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// internal state\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/PausableMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ERC1271WalletMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/RegressionImplementation.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ContextMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/MultipleInheritanceInitializableMocks.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "__SampleHuman_init",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleHuman_init() internal onlyInitializing {\n        __SampleHuman_init_unchained();\n    }",
                    "start": "29",
                    "end": "31",
                    "class": "SampleHuman",
                    "signature": " __SampleHuman_init",
                    "full_signature": "function __SampleHuman_init() internal   ",
                    "class_method_signature": "SampleHuman.__SampleHuman_init",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "__SampleHuman_init_unchained",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleHuman_init_unchained() internal onlyInitializing {\n        isHuman = true;\n    }",
                    "start": "34",
                    "end": "36",
                    "class": "SampleHuman",
                    "signature": " __SampleHuman_init_unchained",
                    "full_signature": "function __SampleHuman_init_unchained() internal   ",
                    "class_method_signature": "SampleHuman.__SampleHuman_init_unchained",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "__SampleMother_init",
                    "parameters": "uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleMother_init(uint256 value) internal onlyInitializing {\n        __SampleHuman_init();\n        __SampleMother_init_unchained(value);\n    }",
                    "start": "50",
                    "end": "53",
                    "class": "SampleMother",
                    "signature": " __SampleMother_inituint256 value",
                    "full_signature": "function __SampleMother_init(uint256 value) internal   ",
                    "class_method_signature": "SampleMother.__SampleMother_inituint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "__SampleMother_init_unchained",
                    "parameters": "uint256 value",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleMother_init_unchained(uint256 value) internal onlyInitializing {\n        mother = value;\n    }",
                    "start": "56",
                    "end": "58",
                    "class": "SampleMother",
                    "signature": " __SampleMother_init_unchaineduint256 value",
                    "full_signature": "function __SampleMother_init_unchained(uint256 value) internal   ",
                    "class_method_signature": "SampleMother.__SampleMother_init_unchaineduint256 value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "__SampleGramps_init",
                    "parameters": "string memory value",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleGramps_init(string memory value) internal onlyInitializing {\n        __SampleHuman_init();\n        __SampleGramps_init_unchained(value);\n    }",
                    "start": "72",
                    "end": "75",
                    "class": "SampleGramps",
                    "signature": " __SampleGramps_initstring memory value",
                    "full_signature": "function __SampleGramps_init(string memory value) internal   ",
                    "class_method_signature": "SampleGramps.__SampleGramps_initstring memory value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "__SampleGramps_init_unchained",
                    "parameters": "string memory value",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleGramps_init_unchained(string memory value) internal onlyInitializing {\n        gramps = value;\n    }",
                    "start": "78",
                    "end": "80",
                    "class": "SampleGramps",
                    "signature": " __SampleGramps_init_unchainedstring memory value",
                    "full_signature": "function __SampleGramps_init_unchained(string memory value) internal   ",
                    "class_method_signature": "SampleGramps.__SampleGramps_init_unchainedstring memory value",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "__SampleFather_init",
                    "parameters": "string memory _gramps, uint256 _father",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleFather_init(string memory _gramps, uint256 _father) internal onlyInitializing {\n        __SampleGramps_init(_gramps);\n        __SampleFather_init_unchained(_father);\n    }",
                    "start": "94",
                    "end": "97",
                    "class": "SampleFather",
                    "signature": " __SampleFather_initstring memory _gramps, uint256 _father",
                    "full_signature": "function __SampleFather_init(string memory _gramps, uint256 _father) internal   ",
                    "class_method_signature": "SampleFather.__SampleFather_initstring memory _gramps, uint256 _father",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "__SampleFather_init_unchained",
                    "parameters": "uint256 _father",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleFather_init_unchained(uint256 _father) internal onlyInitializing {\n        father = _father;\n    }",
                    "start": "100",
                    "end": "102",
                    "class": "SampleFather",
                    "signature": " __SampleFather_init_unchaineduint256 _father",
                    "full_signature": "function __SampleFather_init_unchained(uint256 _father) internal   ",
                    "class_method_signature": "SampleFather.__SampleFather_init_unchaineduint256 _father",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "__SampleChild_init",
                    "parameters": "uint256 _mother, string memory _gramps, uint256 _father, uint256 _child",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleChild_init(\n        uint256 _mother,\n        string memory _gramps,\n        uint256 _father,\n        uint256 _child\n    ) internal onlyInitializing {\n        __SampleMother_init(_mother);\n        __SampleFather_init(_gramps, _father);\n        __SampleChild_init_unchained(_child);\n    }",
                    "start": "116",
                    "end": "125",
                    "class": "SampleChild",
                    "signature": " __SampleChild_inituint256 _mother, string memory _gramps, uint256 _father, uint256 _child",
                    "full_signature": "function __SampleChild_init(uint256 _mother, string memory _gramps, uint256 _father, uint256 _child) internal   ",
                    "class_method_signature": "SampleChild.__SampleChild_inituint256 _mother, string memory _gramps, uint256 _father, uint256 _child",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "__SampleChild_init_unchained",
                    "parameters": "uint256 _child",
                    "modifiers": "",
                    "return": "",
                    "body": "function __SampleChild_init_unchained(uint256 _child) internal onlyInitializing {\n        child = _child;\n    }",
                    "start": "128",
                    "end": "130",
                    "class": "SampleChild",
                    "signature": " __SampleChild_init_unchaineduint256 _child",
                    "full_signature": "function __SampleChild_init_unchained(uint256 _child) internal   ",
                    "class_method_signature": "SampleChild.__SampleChild_init_unchaineduint256 _child",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/VotesExtendedMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public view virtual override returns (string memory) {\n        return \"mode=timestamp\";\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "VotesExtendedTimestampMock",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "VotesExtendedTimestampMock.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ERC2771ContextMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_msgSender",
                    "parameters": "",
                    "modifiers": "override(Context, ERC2771Context)",
                    "return": "returns (address)",
                    "body": "function _msgSender() internal view override(Context, ERC2771Context) returns (address) {\n        return ERC2771Context._msgSender();\n    }",
                    "start": "17",
                    "end": "19",
                    "class": "ERC2771ContextMock",
                    "signature": "returns (address) _msgSender",
                    "full_signature": "function _msgSender() internal  override(Context, ERC2771Context) returns (address)",
                    "class_method_signature": "ERC2771ContextMock._msgSender",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @custom:oz-upgrades-unsafe-allow constructor\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/SingleInheritanceInitializableMocks.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/CallReceiverMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/DummyImplementation.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "unsafeOverrideAdmin",
                    "parameters": "address newAdmin",
                    "modifiers": "",
                    "return": "",
                    "body": "function unsafeOverrideAdmin(address newAdmin) public {\n        StorageSlot.getAddressSlot(ERC1967Utils.ADMIN_SLOT).value = newAdmin;\n    }",
                    "start": "52",
                    "end": "54",
                    "class": "DummyImplementation",
                    "signature": " unsafeOverrideAdminaddress newAdmin",
                    "full_signature": "function unsafeOverrideAdmin(address newAdmin) public   ",
                    "class_method_signature": "DummyImplementation.unsafeOverrideAdminaddress newAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Use for forcing an unsafe TransparentUpgradeableProxy admin override\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/Base64Dirty.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ArraysMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/AccessManagedTarget.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/Stateless.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ERC3156FlashBorrowerMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "onFlashLoan",
                    "parameters": "address, address token, uint256 amount, uint256 fee, bytes calldata data",
                    "modifiers": "",
                    "return": "returns (bytes32)",
                    "body": "function onFlashLoan(\n        address /*initiator*/,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) public returns (bytes32) {\n        require(msg.sender == token);\n\n        emit BalanceOf(token, address(this), IERC20(token).balanceOf(address(this)));\n        emit TotalSupply(token, IERC20(token).totalSupply());\n\n        if (data.length > 0) {\n            // WARNING: This code is for testing purposes only! Do not use.\n            Address.functionCall(token, data);\n        }\n\n        if (_enableApprove) {\n            IERC20(token).approve(token, amount + fee);\n        }\n\n        return _enableReturn ? _RETURN_VALUE : bytes32(0);\n    }",
                    "start": "30",
                    "end": "52",
                    "class": "ERC3156FlashBorrowerMock",
                    "signature": "returns (bytes32) onFlashLoanaddress, address token, uint256 amount, uint256 fee, bytes calldata data",
                    "full_signature": "function onFlashLoan(address, address token, uint256 amount, uint256 fee, bytes calldata data) public   returns (bytes32)",
                    "class_method_signature": "ERC3156FlashBorrowerMock.onFlashLoanaddress, address token, uint256 amount, uint256 fee, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/*initiator*/'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/MerkleProofCustomHashMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ReentrancyTransientMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/AccessManagerMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/UpgradeableBeaconMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/EIP712Verifier.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/TransientSlotMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/StorageSlotMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/InitializableMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/VotesMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public view virtual override returns (string memory) {\n        return \"mode=timestamp\";\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "VotesTimestampMock",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "VotesTimestampMock.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/AuthorityMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address, address, bytes4",
                    "modifiers": "pure",
                    "return": "returns (bool)",
                    "body": "function canCall(address /* caller */, address /* target */, bytes4 /* selector */) external pure returns (bool) {\n        revert(\"AuthorityNoDelayMock: not implemented\");\n    }",
                    "start": "9",
                    "end": "11",
                    "class": "NotAuthorityMock",
                    "signature": "returns (bool) canCalladdress, address, bytes4",
                    "full_signature": "function canCall(address, address, bytes4) external  pure returns (bool)",
                    "class_method_signature": "NotAuthorityMock.canCalladdress, address, bytes4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/* selector */'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address, address, bytes4",
                    "modifiers": "view",
                    "return": "returns (bool immediate)",
                    "body": "function canCall(\n        address /* caller */,\n        address /* target */,\n        bytes4 /* selector */\n    ) external view returns (bool immediate) {\n        return _immediate;\n    }",
                    "start": "17",
                    "end": "23",
                    "class": "AuthorityNoDelayMock",
                    "signature": "returns (bool immediate) canCalladdress, address, bytes4",
                    "full_signature": "function canCall(address, address, bytes4) external  view returns (bool immediate)",
                    "class_method_signature": "AuthorityNoDelayMock.canCalladdress, address, bytes4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/* selector */'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address, address, bytes4",
                    "modifiers": "view",
                    "return": "returns (bool immediate, uint32 delay)",
                    "body": "function canCall(\n        address /* caller */,\n        address /* target */,\n        bytes4 /* selector */\n    ) external view returns (bool immediate, uint32 delay) {\n        return (_immediate, _delay);\n    }",
                    "start": "34",
                    "end": "40",
                    "class": "AuthorityDelayMock",
                    "signature": "returns (bool immediate, uint32 delay) canCalladdress, address, bytes4",
                    "full_signature": "function canCall(address, address, bytes4) external  view returns (bool immediate, uint32 delay)",
                    "class_method_signature": "AuthorityDelayMock.canCalladdress, address, bytes4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/* selector */'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address, address, bytes4",
                    "modifiers": "view",
                    "return": "",
                    "body": "function canCall(address /* caller */, address /* target */, bytes4 /* selector */) external view {}",
                    "start": "52",
                    "end": "52",
                    "class": "AuthorityNoResponse",
                    "signature": " canCalladdress, address, bytes4",
                    "full_signature": "function canCall(address, address, bytes4) external  view ",
                    "class_method_signature": "AuthorityNoResponse.canCalladdress, address, bytes4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/* selector */'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address, address, bytes4",
                    "modifiers": "pure",
                    "return": "returns (bool immediate, uint32 delay)",
                    "body": "function canCall(\n        address /* caller */,\n        address /* target */,\n        bytes4 /* selector */\n    ) external pure returns (bool immediate, uint32 delay) {\n        return (false, 1);\n    }",
                    "start": "58",
                    "end": "64",
                    "class": "AuthorityObserveIsConsuming",
                    "signature": "returns (bool immediate, uint32 delay) canCalladdress, address, bytes4",
                    "full_signature": "function canCall(address, address, bytes4) external  pure returns (bool immediate, uint32 delay)",
                    "class_method_signature": "AuthorityObserveIsConsuming.canCalladdress, address, bytes4",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "b'/* selector */'",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ConstructorMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/BatchCaller.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/MulticallHelper.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/TimelockReentrant.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/EtherReceiverMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/account/utils/ERC7579UtilsMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/compound/CompTimelock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ERC165/ERC165MissingData.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ERC165/ERC165MaliciousData.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ERC165/ERC165NotSupported.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ERC165/ERC165ReturnBomb.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/ERC165/ERC165InterfacesSupported.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "SupportsInterfaceWithLookupMock",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public  override returns (bool)",
                    "class_method_signature": "SupportsInterfaceWithLookupMock.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n/**\n     * @dev A mapping of interface id to whether or not it's supported.\n     */\n/**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC-165 itself.\n     */\n/**\n     * @dev Implement supportsInterface(bytes4) using a lookup table.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_registerInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165InterfacesSupported: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }",
                    "start": "46",
                    "end": "49",
                    "class": "SupportsInterfaceWithLookupMock",
                    "signature": " _registerInterfacebytes4 interfaceId",
                    "full_signature": "function _registerInterface(bytes4 interfaceId) internal   ",
                    "class_method_signature": "SupportsInterfaceWithLookupMock._registerInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Private method for registering an interface.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/governance/GovernorMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/governance/GovernorStorageMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/governance/GovernorFractionalMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/governance/GovernorCountingOverridableMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/governance/GovernorWithParamsMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/governance/GovernorVoteMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/governance/GovernorPreventLateQuorumMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/governance/GovernorTimelockCompoundMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/governance/GovernorTimelockAccessMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/governance/GovernorTimelockControlMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/ERC20WithAutoMinerReward.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/ERC4626Fees.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "previewDeposit",
                    "parameters": "uint256 assets",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\n        uint256 fee = _feeOnTotal(assets, _entryFeeBasisPoints());\n        return super.previewDeposit(assets - fee);\n    }",
                    "start": "25",
                    "end": "28",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) previewDeposituint256 assets",
                    "full_signature": "function previewDeposit(uint256 assets) public virtual override returns (uint256)",
                    "class_method_signature": "ERC4626Fees.previewDeposituint256 assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// === Overrides ===\n/// @dev Preview taking an entry fee on deposit. See {IERC4626-previewDeposit}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewMint",
                    "parameters": "uint256 shares",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function previewMint(uint256 shares) public view virtual override returns (uint256) {\n        uint256 assets = super.previewMint(shares);\n        return assets + _feeOnRaw(assets, _entryFeeBasisPoints());\n    }",
                    "start": "31",
                    "end": "34",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) previewMintuint256 shares",
                    "full_signature": "function previewMint(uint256 shares) public virtual override returns (uint256)",
                    "class_method_signature": "ERC4626Fees.previewMintuint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Preview adding an entry fee on mint. See {IERC4626-previewMint}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewWithdraw",
                    "parameters": "uint256 assets",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\n        uint256 fee = _feeOnRaw(assets, _exitFeeBasisPoints());\n        return super.previewWithdraw(assets + fee);\n    }",
                    "start": "37",
                    "end": "40",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) previewWithdrawuint256 assets",
                    "full_signature": "function previewWithdraw(uint256 assets) public virtual override returns (uint256)",
                    "class_method_signature": "ERC4626Fees.previewWithdrawuint256 assets",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Preview adding an exit fee on withdraw. See {IERC4626-previewWithdraw}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "previewRedeem",
                    "parameters": "uint256 shares",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\n        uint256 assets = super.previewRedeem(shares);\n        return assets - _feeOnTotal(assets, _exitFeeBasisPoints());\n    }",
                    "start": "43",
                    "end": "46",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) previewRedeemuint256 shares",
                    "full_signature": "function previewRedeem(uint256 shares) public virtual override returns (uint256)",
                    "class_method_signature": "ERC4626Fees.previewRedeemuint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Preview taking an exit fee on redeem. See {IERC4626-previewRedeem}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_deposit",
                    "parameters": "address caller, address receiver, uint256 assets, uint256 shares",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual override {\n        uint256 fee = _feeOnTotal(assets, _entryFeeBasisPoints());\n        address recipient = _entryFeeRecipient();\n\n        super._deposit(caller, receiver, assets, shares);\n\n        if (fee > 0 && recipient != address(this)) {\n            SafeERC20.safeTransfer(IERC20(asset()), recipient, fee);\n        }\n    }",
                    "start": "49",
                    "end": "58",
                    "class": "ERC4626Fees",
                    "signature": " _depositaddress caller, address receiver, uint256 assets, uint256 shares",
                    "full_signature": "function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual override ",
                    "class_method_signature": "ERC4626Fees._depositaddress caller, address receiver, uint256 assets, uint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Send entry fee to {_entryFeeRecipient}. See {IERC4626-_deposit}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_withdraw",
                    "parameters": "address caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual override {\n        uint256 fee = _feeOnRaw(assets, _exitFeeBasisPoints());\n        address recipient = _exitFeeRecipient();\n\n        super._withdraw(caller, receiver, owner, assets, shares);\n\n        if (fee > 0 && recipient != address(this)) {\n            SafeERC20.safeTransfer(IERC20(asset()), recipient, fee);\n        }\n    }",
                    "start": "61",
                    "end": "76",
                    "class": "ERC4626Fees",
                    "signature": " _withdrawaddress caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "full_signature": "function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares) internal virtual override ",
                    "class_method_signature": "ERC4626Fees._withdrawaddress caller, address receiver, address owner, uint256 assets, uint256 shares",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Send exit fee to {_exitFeeRecipient}. See {IERC4626-_deposit}.\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_entryFeeBasisPoints",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _entryFeeBasisPoints() internal view virtual returns (uint256) {\n        return 0; // replace with e.g. 100 for 1%\n    }",
                    "start": "80",
                    "end": "82",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) _entryFeeBasisPoints",
                    "full_signature": "function _entryFeeBasisPoints() internal virtual view returns (uint256)",
                    "class_method_signature": "ERC4626Fees._entryFeeBasisPoints",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// === Fee configuration ===\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_feeOnRaw",
                    "parameters": "uint256 assets, uint256 feeBasisPoints",
                    "modifiers": "pure",
                    "return": "returns (uint256)",
                    "body": "function _feeOnRaw(uint256 assets, uint256 feeBasisPoints) private pure returns (uint256) {\n        return assets.mulDiv(feeBasisPoints, _BASIS_POINT_SCALE, Math.Rounding.Ceil);\n    }",
                    "start": "100",
                    "end": "102",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) _feeOnRawuint256 assets, uint256 feeBasisPoints",
                    "full_signature": "function _feeOnRaw(uint256 assets, uint256 feeBasisPoints) private  pure returns (uint256)",
                    "class_method_signature": "ERC4626Fees._feeOnRawuint256 assets, uint256 feeBasisPoints",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// === Fee operations ===\n/// @dev Calculates the fees that should be added to an amount `assets` that does not already include fees.\n/// Used in {IERC4626-mint} and {IERC4626-withdraw} operations.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_feeOnTotal",
                    "parameters": "uint256 assets, uint256 feeBasisPoints",
                    "modifiers": "pure",
                    "return": "returns (uint256)",
                    "body": "function _feeOnTotal(uint256 assets, uint256 feeBasisPoints) private pure returns (uint256) {\n        return assets.mulDiv(feeBasisPoints, feeBasisPoints + _BASIS_POINT_SCALE, Math.Rounding.Ceil);\n    }",
                    "start": "106",
                    "end": "108",
                    "class": "ERC4626Fees",
                    "signature": "returns (uint256) _feeOnTotaluint256 assets, uint256 feeBasisPoints",
                    "full_signature": "function _feeOnTotal(uint256 assets, uint256 feeBasisPoints) private  pure returns (uint256)",
                    "class_method_signature": "ERC4626Fees._feeOnTotaluint256 assets, uint256 feeBasisPoints",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @dev Calculates the fee part of an amount `assets` that already includes fees.\n/// Used in {IERC4626-deposit} and {IERC4626-redeem} operations.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/MyNFT.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessControlERC20MintMissing.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessManagedERC20MintBase.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "mint",
                    "parameters": "address to, uint256 amount",
                    "modifiers": "",
                    "return": "",
                    "body": "function mint(address to, uint256 amount) public restricted {\n        _mint(to, amount);\n    }",
                    "start": "13",
                    "end": "15",
                    "class": "AccessManagedERC20Mint",
                    "signature": " mintaddress to, uint256 amount",
                    "full_signature": "function mint(address to, uint256 amount) public   ",
                    "class_method_signature": "AccessManagedERC20Mint.mintaddress to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Minting is restricted according to the manager rules for this function.\n// The function is identified by its selector: 0x40c10f19.\n// Calculated with bytes4(keccak256('mint(address,uint256)'))\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessControlNonRevokableAdmin.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/access-control/MyContractOwnable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessControlERC20MintBase.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "mint",
                    "parameters": "address to, uint256 amount",
                    "modifiers": "",
                    "return": "",
                    "body": "function mint(address to, uint256 amount) public {\n        // Check that the calling account has the minter role\n        if (!hasRole(MINTER_ROLE, msg.sender)) {\n            revert CallerNotMinter(msg.sender);\n        }\n        _mint(to, amount);\n    }",
                    "start": "18",
                    "end": "24",
                    "class": "AccessControlERC20MintBase",
                    "signature": " mintaddress to, uint256 amount",
                    "full_signature": "function mint(address to, uint256 amount) public   ",
                    "class_method_signature": "AccessControlERC20MintBase.mintaddress to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Create a new role identifier for the minter role\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessControlERC20MintOnlyRole.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/access-control/AccessControlModified.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "revokeRole",
                    "parameters": "bytes32, address",
                    "modifiers": "override",
                    "return": "",
                    "body": "function revokeRole(bytes32, address) public pure override {\n        revert AccessControlNonRevokable();\n    }",
                    "start": "11",
                    "end": "13",
                    "class": "AccessControlModified",
                    "signature": " revokeRolebytes32, address",
                    "full_signature": "function revokeRole(bytes32, address) public  override ",
                    "class_method_signature": "AccessControlModified.revokeRolebytes32, address",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Override the revokeRole function\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/governance/MyToken.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 amount",
                    "modifiers": "override(ERC20, ERC20Votes)",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._update(from, to, amount);\n    }",
                    "start": "14",
                    "end": "16",
                    "class": "MyToken",
                    "signature": " _updateaddress from, address to, uint256 amount",
                    "full_signature": "function _update(address from, address to, uint256 amount) internal  override(ERC20, ERC20Votes) ",
                    "class_method_signature": "MyToken._updateaddress from, address to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// The functions below are overrides required by Solidity.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/governance/MyGovernor.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "state",
                    "parameters": "uint256 proposalId",
                    "modifiers": "override(Governor, GovernorTimelockControl)",
                    "return": "returns (ProposalState)",
                    "body": "function state(uint256 proposalId) public view override(Governor, GovernorTimelockControl) returns (ProposalState) {\n        return super.state(proposalId);\n    }",
                    "start": "39",
                    "end": "41",
                    "class": "MyGovernor",
                    "signature": "returns (ProposalState) stateuint256 proposalId",
                    "full_signature": "function state(uint256 proposalId) public  override(Governor, GovernorTimelockControl) returns (ProposalState)",
                    "class_method_signature": "MyGovernor.stateuint256 proposalId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// The functions below are overrides required by Solidity.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/governance/MyTokenWrapped.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "decimals",
                    "parameters": "",
                    "modifiers": "override(ERC20, ERC20Wrapper)",
                    "return": "returns (uint8)",
                    "body": "function decimals() public view override(ERC20, ERC20Wrapper) returns (uint8) {\n        return super.decimals();\n    }",
                    "start": "17",
                    "end": "19",
                    "class": "MyTokenWrapped",
                    "signature": "returns (uint8) decimals",
                    "full_signature": "function decimals() public  override(ERC20, ERC20Wrapper) returns (uint8)",
                    "class_method_signature": "MyTokenWrapped.decimals",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// The functions below are overrides required by Solidity.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/governance/MyTokenTimestampBased.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "clock",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint48)",
                    "body": "function clock() public view override returns (uint48) {\n        return uint48(block.timestamp);\n    }",
                    "start": "14",
                    "end": "16",
                    "class": "MyTokenTimestampBased",
                    "signature": "returns (uint48) clock",
                    "full_signature": "function clock() public  override returns (uint48)",
                    "class_method_signature": "MyTokenTimestampBased.clock",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Overrides IERC6372 functions to make the token & governor timestamp-based\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public pure override returns (string memory) {\n        return \"mode=timestamp\";\n    }",
                    "start": "19",
                    "end": "21",
                    "class": "MyTokenTimestampBased",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public  override returns (string memory)",
                    "class_method_signature": "MyTokenTimestampBased.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 amount",
                    "modifiers": "override(ERC20, ERC20Votes)",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 amount) internal override(ERC20, ERC20Votes) {\n        super._update(from, to, amount);\n    }",
                    "start": "25",
                    "end": "27",
                    "class": "MyTokenTimestampBased",
                    "signature": " _updateaddress from, address to, uint256 amount",
                    "full_signature": "function _update(address from, address to, uint256 amount) internal  override(ERC20, ERC20Votes) ",
                    "class_method_signature": "MyTokenTimestampBased._updateaddress from, address to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// The functions below are overrides required by Solidity.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/token/ERC1155/MyERC115HolderContract.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/token/ERC1155/GameItems.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/token/ERC721/GameItem.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/token/ERC20/GLDToken.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/utilities/Multicall.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/docs/utilities/Base64NFT.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "tokenURI",
                    "parameters": "uint256 tokenId",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function tokenURI(uint256 tokenId) public pure override returns (string memory) {\n        // Equivalent to:\n        // {\n        //   \"name\": \"Base64NFT #1\",\n        //   // Replace with extra ERC-721 Metadata properties\n        // }\n        // prettier-ignore\n        string memory dataURI = string.concat(\"{\\\"name\\\": \\\"Base64NFT #\", tokenId.toString(), \"\\\"}\");\n\n        return string.concat(\"data:application/json;base64,\", Base64.encode(bytes(dataURI)));\n    }",
                    "start": "16",
                    "end": "26",
                    "class": "Base64NFT",
                    "signature": "returns (string memory) tokenURIuint256 tokenId",
                    "full_signature": "function tokenURI(uint256 tokenId) public  override returns (string memory)",
                    "class_method_signature": "Base64NFT.tokenURIuint256 tokenId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// ...\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20ReturnFalseMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC1363ReceiverMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC4626LimitsMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20Reentrant.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20DecimalsMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20ApprovalMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20MulticallMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20ExcessDecimalsMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC1155ReceiverMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20VotesTimestampMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public view virtual override returns (string memory) {\n        return \"mode=timestamp\";\n    }",
                    "start": "15",
                    "end": "17",
                    "class": "ERC20VotesTimestampMock",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "ERC20VotesTimestampMock.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public view virtual override returns (string memory) {\n        return \"mode=timestamp\";\n    }",
                    "start": "26",
                    "end": "28",
                    "class": "ERC721VotesTimestampMock",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "ERC721VotesTimestampMock.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20NoReturnMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20GetterHelper.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC721URIStorageMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC1363ReturnFalseMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20VotesAdditionalCheckpointsMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "CLOCK_MODE",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (string memory)",
                    "body": "function CLOCK_MODE() public view virtual override returns (string memory) {\n        return \"mode=timestamp\";\n    }",
                    "start": "28",
                    "end": "30",
                    "class": "ERC20VotesExtendedTimestampMock",
                    "signature": "returns (string memory) CLOCK_MODE",
                    "full_signature": "function CLOCK_MODE() public virtual override returns (string memory)",
                    "class_method_signature": "ERC20VotesExtendedTimestampMock.CLOCK_MODE",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// solhint-disable-next-line func-name-mixedcase\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC4626OffsetMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC1363NoReturnMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC4626Mock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC4646FeesMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC721ConsecutiveEnumerableMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20ForceApproveMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20VotesLegacyMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "checkpoints",
                    "parameters": "address account, uint32 pos",
                    "modifiers": "view",
                    "return": "returns (Checkpoint memory)",
                    "body": "function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }",
                    "start": "30",
                    "end": "32",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (Checkpoint memory) checkpointsaddress account, uint32 pos",
                    "full_signature": "function checkpoints(address account, uint32 pos) public virtual view returns (Checkpoint memory)",
                    "class_method_signature": "ERC20VotesLegacyMock.checkpointsaddress account, uint32 pos",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "numCheckpoints",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCast.toUint32(_checkpoints[account].length);\n    }",
                    "start": "37",
                    "end": "39",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint32) numCheckpointsaddress account",
                    "full_signature": "function numCheckpoints(address account) public virtual view returns (uint32)",
                    "class_method_signature": "ERC20VotesLegacyMock.numCheckpointsaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get number of checkpoints for `account`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "delegates",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function delegates(address account) public view virtual returns (address) {\n        return _delegatee[account];\n    }",
                    "start": "44",
                    "end": "46",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (address) delegatesaddress account",
                    "full_signature": "function delegates(address account) public virtual view returns (address)",
                    "class_method_signature": "ERC20VotesLegacyMock.delegatesaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the address `account` is currently delegating to.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getVotes",
                    "parameters": "address account",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getVotes(address account) public view virtual returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        unchecked {\n            return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n        }\n    }",
                    "start": "51",
                    "end": "56",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint256) getVotesaddress account",
                    "full_signature": "function getVotes(address account) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20VotesLegacyMock.getVotesaddress account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Gets the current votes balance for `account`\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getPastVotes",
                    "parameters": "address account, uint256 blockNumber",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getPastVotes(address account, uint256 blockNumber) public view virtual returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\n    }",
                    "start": "65",
                    "end": "68",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint256) getPastVotesaddress account, uint256 blockNumber",
                    "full_signature": "function getPastVotes(address account, uint256 blockNumber) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20VotesLegacyMock.getPastVotesaddress account, uint256 blockNumber",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getPastTotalSupply",
                    "parameters": "uint256 blockNumber",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getPastTotalSupply(uint256 blockNumber) public view virtual returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\n    }",
                    "start": "78",
                    "end": "81",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint256) getPastTotalSupplyuint256 blockNumber",
                    "full_signature": "function getPastTotalSupply(uint256 blockNumber) public virtual view returns (uint256)",
                    "class_method_signature": "ERC20VotesLegacyMock.getPastTotalSupplyuint256 blockNumber",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\n     * It is NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkpointsLookup",
                    "parameters": "Checkpoint[] storage ckpts, uint256 blockNumber",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\n        //\n        // Initially we check if the block is recent to narrow the search range.\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the\n        // invariant.\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\n        // the same.\n        uint256 length = ckpts.length;\n\n        uint256 low = 0;\n        uint256 high = length;\n\n        if (length > 5) {\n            uint256 mid = length - Math.sqrt(length);\n            if (_unsafeAccess(ckpts, mid).fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(ckpts, mid).fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        unchecked {\n            return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\n        }\n    }",
                    "start": "86",
                    "end": "126",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint256) _checkpointsLookupCheckpoint[] storage ckpts, uint256 blockNumber",
                    "full_signature": "function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private  view returns (uint256)",
                    "class_method_signature": "ERC20VotesLegacyMock._checkpointsLookupCheckpoint[] storage ckpts, uint256 blockNumber",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "delegate",
                    "parameters": "address delegatee",
                    "modifiers": "",
                    "return": "",
                    "body": "function delegate(address delegatee) public virtual {\n        _delegate(_msgSender(), delegatee);\n    }",
                    "start": "131",
                    "end": "133",
                    "class": "ERC20VotesLegacyMock",
                    "signature": " delegateaddress delegatee",
                    "full_signature": "function delegate(address delegatee) public virtual  ",
                    "class_method_signature": "ERC20VotesLegacyMock.delegateaddress delegatee",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "delegateBySig",
                    "parameters": "address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "modifiers": "",
                    "return": "",
                    "body": "function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        _delegate(signer, delegatee);\n    }",
                    "start": "138",
                    "end": "155",
                    "class": "ERC20VotesLegacyMock",
                    "signature": " delegateBySigaddress delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "full_signature": "function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) public virtual  ",
                    "class_method_signature": "ERC20VotesLegacyMock.delegateBySigaddress delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_maxSupply",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint224)",
                    "body": "function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }",
                    "start": "160",
                    "end": "162",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (uint224) _maxSupply",
                    "full_signature": "function _maxSupply() internal virtual view returns (uint224)",
                    "class_method_signature": "ERC20VotesLegacyMock._maxSupply",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_update",
                    "parameters": "address from, address to, uint256 amount",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _update(address from, address to, uint256 amount) internal virtual override {\n        super._update(from, to, amount);\n\n        if (from == address(0)) {\n            require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n            _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n        }\n\n        if (to == address(0)) {\n            _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n        }\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }",
                    "start": "169",
                    "end": "182",
                    "class": "ERC20VotesLegacyMock",
                    "signature": " _updateaddress from, address to, uint256 amount",
                    "full_signature": "function _update(address from, address to, uint256 amount) internal virtual override ",
                    "class_method_signature": "ERC20VotesLegacyMock._updateaddress from, address to, uint256 amount",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_delegate",
                    "parameters": "address delegator, address delegatee",
                    "modifiers": "",
                    "return": "",
                    "body": "function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegatee[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }",
                    "start": "189",
                    "end": "197",
                    "class": "ERC20VotesLegacyMock",
                    "signature": " _delegateaddress delegator, address delegatee",
                    "full_signature": "function _delegate(address delegator, address delegatee) internal virtual  ",
                    "class_method_signature": "ERC20VotesLegacyMock._delegateaddress delegator, address delegatee",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_unsafeAccess",
                    "parameters": "Checkpoint[] storage ckpts, uint256 pos",
                    "modifiers": "pure",
                    "return": "returns (Checkpoint storage result)",
                    "body": "function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\n        assembly {\n            mstore(0, ckpts.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }",
                    "start": "247",
                    "end": "252",
                    "class": "ERC20VotesLegacyMock",
                    "signature": "returns (Checkpoint storage result) _unsafeAccessCheckpoint[] storage ckpts, uint256 pos",
                    "full_signature": "function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private  pure returns (Checkpoint storage result)",
                    "class_method_signature": "ERC20VotesLegacyMock._unsafeAccessCheckpoint[] storage ckpts, uint256 pos",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC20FlashMintMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC1363ForceApproveMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC1363SpenderMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC721ConsecutiveMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/token/ERC721ReceiverMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/proxy/UUPSUpgradeableMock.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "_authorizeUpgrade",
                    "parameters": "address",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _authorizeUpgrade(address) internal override {}",
                    "start": "22",
                    "end": "22",
                    "class": "UUPSUpgradeableMock",
                    "signature": " _authorizeUpgradeaddress",
                    "full_signature": "function _authorizeUpgrade(address) internal  override ",
                    "class_method_signature": "UUPSUpgradeableMock._authorizeUpgradeaddress",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Not having any checks in this function is dangerous! Do not do this outside tests!\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/proxy/ClashingImplementation.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/mocks/proxy/BadBeacon.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        },
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/contracts/access/IAccessControl.sol": [],
    "/root/openzeppelin-contracts/contracts/access/Ownable2Step.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "pendingOwner",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }",
                    "start": "33",
                    "end": "35",
                    "class": "Ownable2Step",
                    "signature": "returns (address) pendingOwner",
                    "full_signature": "function pendingOwner() public virtual view returns (address)",
                    "class_method_signature": "Ownable2Step.pendingOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the address of the pending owner.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferOwnership",
                    "parameters": "address newOwner",
                    "modifiers": "override",
                    "return": "",
                    "body": "function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }",
                    "start": "43",
                    "end": "46",
                    "class": "Ownable2Step",
                    "signature": " transferOwnershipaddress newOwner",
                    "full_signature": "function transferOwnership(address newOwner) public virtual override ",
                    "class_method_signature": "Ownable2Step.transferOwnershipaddress newOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     *\n     * Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_transferOwnership",
                    "parameters": "address newOwner",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }",
                    "start": "52",
                    "end": "55",
                    "class": "Ownable2Step",
                    "signature": " _transferOwnershipaddress newOwner",
                    "full_signature": "function _transferOwnership(address newOwner) internal virtual override ",
                    "class_method_signature": "Ownable2Step._transferOwnershipaddress newOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "acceptOwnership",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }",
                    "start": "60",
                    "end": "66",
                    "class": "Ownable2Step",
                    "signature": " acceptOwnership",
                    "full_signature": "function acceptOwnership() public virtual  ",
                    "class_method_signature": "Ownable2Step.acceptOwnership",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The new owner accepts the ownership transfer.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/access/AccessControl.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "71",
                    "end": "73",
                    "class": "AccessControl",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override returns (bool)",
                    "class_method_signature": "AccessControl.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "hasRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }",
                    "start": "78",
                    "end": "80",
                    "class": "AccessControl",
                    "signature": "returns (bool) hasRolebytes32 role, address account",
                    "full_signature": "function hasRole(bytes32 role, address account) public virtual view returns (bool)",
                    "class_method_signature": "AccessControl.hasRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkRole",
                    "parameters": "bytes32 role",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }",
                    "start": "86",
                    "end": "88",
                    "class": "AccessControl",
                    "signature": " _checkRolebytes32 role",
                    "full_signature": "function _checkRole(bytes32 role) internal virtual view ",
                    "class_method_signature": "AccessControl._checkRolebytes32 role",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_checkRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }",
                    "start": "94",
                    "end": "98",
                    "class": "AccessControl",
                    "signature": " _checkRolebytes32 role, address account",
                    "full_signature": "function _checkRole(bytes32 role, address account) internal virtual view ",
                    "class_method_signature": "AccessControl._checkRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "getRoleAdmin",
                    "parameters": "bytes32 role",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }",
                    "start": "106",
                    "end": "108",
                    "class": "AccessControl",
                    "signature": "returns (bytes32) getRoleAdminbytes32 role",
                    "full_signature": "function getRoleAdmin(bytes32 role) public virtual view returns (bytes32)",
                    "class_method_signature": "AccessControl.getRoleAdminbytes32 role",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "grantRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "",
                    "return": "",
                    "body": "function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }",
                    "start": "122",
                    "end": "124",
                    "class": "AccessControl",
                    "signature": " grantRolebytes32 role, address account",
                    "full_signature": "function grantRole(bytes32 role, address account) public virtual  ",
                    "class_method_signature": "AccessControl.grantRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "revokeRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "",
                    "return": "",
                    "body": "function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }",
                    "start": "137",
                    "end": "139",
                    "class": "AccessControl",
                    "signature": " revokeRolebytes32 role, address account",
                    "full_signature": "function revokeRole(bytes32 role, address account) public virtual  ",
                    "class_method_signature": "AccessControl.revokeRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "renounceRole",
                    "parameters": "bytes32 role, address callerConfirmation",
                    "modifiers": "",
                    "return": "",
                    "body": "function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }",
                    "start": "157",
                    "end": "163",
                    "class": "AccessControl",
                    "signature": " renounceRolebytes32 role, address callerConfirmation",
                    "full_signature": "function renounceRole(bytes32 role, address callerConfirmation) public virtual  ",
                    "class_method_signature": "AccessControl.renounceRolebytes32 role, address callerConfirmation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setRoleAdmin",
                    "parameters": "bytes32 role, bytes32 adminRole",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }",
                    "start": "170",
                    "end": "174",
                    "class": "AccessControl",
                    "signature": " _setRoleAdminbytes32 role, bytes32 adminRole",
                    "full_signature": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual  ",
                    "class_method_signature": "AccessControl._setRoleAdminbytes32 role, bytes32 adminRole",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_grantRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }",
                    "start": "183",
                    "end": "191",
                    "class": "AccessControl",
                    "signature": "returns (bool) _grantRolebytes32 role, address account",
                    "full_signature": "function _grantRole(bytes32 role, address account) internal virtual  returns (bool)",
                    "class_method_signature": "AccessControl._grantRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_revokeRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }",
                    "start": "200",
                    "end": "208",
                    "class": "AccessControl",
                    "signature": "returns (bool) _revokeRolebytes32 role, address account",
                    "full_signature": "function _revokeRole(bytes32 role, address account) internal virtual  returns (bool)",
                    "class_method_signature": "AccessControl._revokeRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/access/Ownable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "owner",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function owner() public view virtual returns (address) {\n        return _owner;\n    }",
                    "start": "56",
                    "end": "58",
                    "class": "Ownable",
                    "signature": "returns (address) owner",
                    "full_signature": "function owner() public virtual view returns (address)",
                    "class_method_signature": "Ownable.owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n/**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n/**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n/**\n     * @dev Throws if called by any account other than the owner.\n     */\n/**\n     * @dev Returns the address of the current owner.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkOwner",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }",
                    "start": "63",
                    "end": "67",
                    "class": "Ownable",
                    "signature": " _checkOwner",
                    "full_signature": "function _checkOwner() internal virtual view ",
                    "class_method_signature": "Ownable._checkOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Throws if the sender is not the owner.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "renounceOwnership",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }",
                    "start": "76",
                    "end": "78",
                    "class": "Ownable",
                    "signature": " renounceOwnership",
                    "full_signature": "function renounceOwnership() public virtual  ",
                    "class_method_signature": "Ownable.renounceOwnership",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "transferOwnership",
                    "parameters": "address newOwner",
                    "modifiers": "",
                    "return": "",
                    "body": "function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }",
                    "start": "84",
                    "end": "89",
                    "class": "Ownable",
                    "signature": " transferOwnershipaddress newOwner",
                    "full_signature": "function transferOwnership(address newOwner) public virtual  ",
                    "class_method_signature": "Ownable.transferOwnershipaddress newOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_transferOwnership",
                    "parameters": "address newOwner",
                    "modifiers": "",
                    "return": "",
                    "body": "function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }",
                    "start": "95",
                    "end": "99",
                    "class": "Ownable",
                    "signature": " _transferOwnershipaddress newOwner",
                    "full_signature": "function _transferOwnership(address newOwner) internal virtual  ",
                    "class_method_signature": "Ownable._transferOwnershipaddress newOwner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/access/manager/AuthorityUtils.sol": [],
    "/root/openzeppelin-contracts/contracts/access/manager/IAuthority.sol": [],
    "/root/openzeppelin-contracts/contracts/access/manager/IAccessManager.sol": [],
    "/root/openzeppelin-contracts/contracts/access/manager/AccessManaged.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "authority",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function authority() public view virtual returns (address) {\n        return _authority;\n    }",
                    "start": "62",
                    "end": "64",
                    "class": "AccessManaged",
                    "signature": "returns (address) authority",
                    "full_signature": "function authority() public virtual view returns (address)",
                    "class_method_signature": "AccessManaged.authority",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Initializes the contract connected to an initial authority.\n     */\n/**\n     * @dev Restricts access to a function as defined by the connected Authority for this contract and the\n     * caller and selector of the function that entered the contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * In general, this modifier should only be used on `external` functions. It is okay to use it on `public`\n     * functions that are used as external entry points and are not called internally. Unless you know what you're\n     * doing, it should never be used on `internal` functions. Failure to follow these rules can have critical security\n     * implications! This is because the permissions are determined by the function that entered the contract, i.e. the\n     * function at the bottom of the call stack, and not the function where the modifier is visible in the source code.\n     * ====\n     *\n     * [WARNING]\n     * ====\n     * Avoid adding this modifier to the https://docs.soliditylang.org/en/v0.8.20/contracts.html#receive-ether-function[`receive()`]\n     * function or the https://docs.soliditylang.org/en/v0.8.20/contracts.html#fallback-function[`fallback()`]. These\n     * functions are the only execution paths where a function selector cannot be unambiguously determined from the calldata\n     * since the selector defaults to `0x00000000` in the `receive()` function and similarly in the `fallback()` function\n     * if no calldata is provided. (See {_checkCanCall}).\n     *\n     * The `receive()` function will always panic whereas the `fallback()` may panic depending on the calldata length.\n     * ====\n     */\n/// @inheritdoc IAccessManaged\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setAuthority",
                    "parameters": "address newAuthority",
                    "modifiers": "",
                    "return": "",
                    "body": "function setAuthority(address newAuthority) public virtual {\n        address caller = _msgSender();\n        if (caller != authority()) {\n            revert AccessManagedUnauthorized(caller);\n        }\n        if (newAuthority.code.length == 0) {\n            revert AccessManagedInvalidAuthority(newAuthority);\n        }\n        _setAuthority(newAuthority);\n    }",
                    "start": "67",
                    "end": "76",
                    "class": "AccessManaged",
                    "signature": " setAuthorityaddress newAuthority",
                    "full_signature": "function setAuthority(address newAuthority) public virtual  ",
                    "class_method_signature": "AccessManaged.setAuthorityaddress newAuthority",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManaged\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isConsumingScheduledOp",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (bytes4)",
                    "body": "function isConsumingScheduledOp() public view returns (bytes4) {\n        return _consumingSchedule ? this.isConsumingScheduledOp.selector : bytes4(0);\n    }",
                    "start": "79",
                    "end": "81",
                    "class": "AccessManaged",
                    "signature": "returns (bytes4) isConsumingScheduledOp",
                    "full_signature": "function isConsumingScheduledOp() public  view returns (bytes4)",
                    "class_method_signature": "AccessManaged.isConsumingScheduledOp",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManaged\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setAuthority",
                    "parameters": "address newAuthority",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setAuthority(address newAuthority) internal virtual {\n        _authority = newAuthority;\n        emit AuthorityUpdated(newAuthority);\n    }",
                    "start": "87",
                    "end": "90",
                    "class": "AccessManaged",
                    "signature": " _setAuthorityaddress newAuthority",
                    "full_signature": "function _setAuthority(address newAuthority) internal virtual  ",
                    "class_method_signature": "AccessManaged._setAuthorityaddress newAuthority",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Transfers control to a new authority. Internal function with no access restriction. Allows bypassing the\n     * permissions set by the current authority.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_checkCanCall",
                    "parameters": "address caller, bytes calldata data",
                    "modifiers": "",
                    "return": "",
                    "body": "function _checkCanCall(address caller, bytes calldata data) internal virtual {\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\n            authority(),\n            caller,\n            address(this),\n            bytes4(data[0:4])\n        );\n        if (!immediate) {\n            if (delay > 0) {\n                _consumingSchedule = true;\n                IAccessManager(authority()).consumeScheduledOp(caller, data);\n                _consumingSchedule = false;\n            } else {\n                revert AccessManagedUnauthorized(caller);\n            }\n        }\n    }",
                    "start": "96",
                    "end": "112",
                    "class": "AccessManaged",
                    "signature": " _checkCanCalladdress caller, bytes calldata data",
                    "full_signature": "function _checkCanCall(address caller, bytes calldata data) internal virtual  ",
                    "class_method_signature": "AccessManaged._checkCanCalladdress caller, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts if the caller is not allowed to call the function identified by a selector. Panics if the calldata\n     * is less than 4 bytes long.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/access/manager/IAccessManaged.sol": [],
    "/root/openzeppelin-contracts/contracts/access/manager/AccessManager.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "canCall",
                    "parameters": "address caller, address target, bytes4 selector",
                    "modifiers": "view",
                    "return": "returns (bool immediate, uint32 delay)",
                    "body": "function canCall(\n        address caller,\n        address target,\n        bytes4 selector\n    ) public view virtual returns (bool immediate, uint32 delay) {\n        if (isTargetClosed(target)) {\n            return (false, 0);\n        } else if (caller == address(this)) {\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\n            // permissions. We verify that the call \"identifier\", which is set during {execute}, is correct.\n            return (_isExecuting(target, selector), 0);\n        } else {\n            uint64 roleId = getTargetFunctionRole(target, selector);\n            (bool isMember, uint32 currentDelay) = hasRole(roleId, caller);\n            return isMember ? (currentDelay == 0, currentDelay) : (false, 0);\n        }\n    }",
                    "start": "139",
                    "end": "155",
                    "class": "AccessManager",
                    "signature": "returns (bool immediate, uint32 delay) canCalladdress caller, address target, bytes4 selector",
                    "full_signature": "function canCall(address caller, address target, bytes4 selector) public virtual view returns (bool immediate, uint32 delay)",
                    "class_method_signature": "AccessManager.canCalladdress caller, address target, bytes4 selector",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Structure that stores the details for a target contract.\n// Structure that stores the details for a role/account pair. This structures fit into a single slot.\n// Structure that stores the details of a role.\n// Structure that stores the details for a scheduled operation. This structure fits into a single slot.\n/**\n     * @dev The identifier of the admin role. Required to perform most configuration operations including\n     * other roles' management and target restrictions.\n     */\n// 0\n/**\n     * @dev The identifier of the public role. Automatically granted to all addresses with no delay.\n     */\n// 2**64-1\n// Used to identify operations that are currently being executed via {execute}.\n// This should be transient storage when supported by the EVM.\n/**\n     * @dev Check that the caller is authorized to perform the operation.\n     * See {AccessManager} description for a detailed breakdown of the authorization logic.\n     */\n// =================================================== GETTERS ====================================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "expiration",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function expiration() public view virtual returns (uint32) {\n        return 1 weeks;\n    }",
                    "start": "158",
                    "end": "160",
                    "class": "AccessManager",
                    "signature": "returns (uint32) expiration",
                    "full_signature": "function expiration() public virtual view returns (uint32)",
                    "class_method_signature": "AccessManager.expiration",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "minSetback",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function minSetback() public view virtual returns (uint32) {\n        return 5 days;\n    }",
                    "start": "163",
                    "end": "165",
                    "class": "AccessManager",
                    "signature": "returns (uint32) minSetback",
                    "full_signature": "function minSetback() public virtual view returns (uint32)",
                    "class_method_signature": "AccessManager.minSetback",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "isTargetClosed",
                    "parameters": "address target",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function isTargetClosed(address target) public view virtual returns (bool) {\n        return _targets[target].closed;\n    }",
                    "start": "168",
                    "end": "170",
                    "class": "AccessManager",
                    "signature": "returns (bool) isTargetClosedaddress target",
                    "full_signature": "function isTargetClosed(address target) public virtual view returns (bool)",
                    "class_method_signature": "AccessManager.isTargetClosedaddress target",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getTargetFunctionRole",
                    "parameters": "address target, bytes4 selector",
                    "modifiers": "view",
                    "return": "returns (uint64)",
                    "body": "function getTargetFunctionRole(address target, bytes4 selector) public view virtual returns (uint64) {\n        return _targets[target].allowedRoles[selector];\n    }",
                    "start": "173",
                    "end": "175",
                    "class": "AccessManager",
                    "signature": "returns (uint64) getTargetFunctionRoleaddress target, bytes4 selector",
                    "full_signature": "function getTargetFunctionRole(address target, bytes4 selector) public virtual view returns (uint64)",
                    "class_method_signature": "AccessManager.getTargetFunctionRoleaddress target, bytes4 selector",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getTargetAdminDelay",
                    "parameters": "address target",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function getTargetAdminDelay(address target) public view virtual returns (uint32) {\n        return _targets[target].adminDelay.get();\n    }",
                    "start": "178",
                    "end": "180",
                    "class": "AccessManager",
                    "signature": "returns (uint32) getTargetAdminDelayaddress target",
                    "full_signature": "function getTargetAdminDelay(address target) public virtual view returns (uint32)",
                    "class_method_signature": "AccessManager.getTargetAdminDelayaddress target",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleAdmin",
                    "parameters": "uint64 roleId",
                    "modifiers": "view",
                    "return": "returns (uint64)",
                    "body": "function getRoleAdmin(uint64 roleId) public view virtual returns (uint64) {\n        return _roles[roleId].admin;\n    }",
                    "start": "183",
                    "end": "185",
                    "class": "AccessManager",
                    "signature": "returns (uint64) getRoleAdminuint64 roleId",
                    "full_signature": "function getRoleAdmin(uint64 roleId) public virtual view returns (uint64)",
                    "class_method_signature": "AccessManager.getRoleAdminuint64 roleId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleGuardian",
                    "parameters": "uint64 roleId",
                    "modifiers": "view",
                    "return": "returns (uint64)",
                    "body": "function getRoleGuardian(uint64 roleId) public view virtual returns (uint64) {\n        return _roles[roleId].guardian;\n    }",
                    "start": "188",
                    "end": "190",
                    "class": "AccessManager",
                    "signature": "returns (uint64) getRoleGuardianuint64 roleId",
                    "full_signature": "function getRoleGuardian(uint64 roleId) public virtual view returns (uint64)",
                    "class_method_signature": "AccessManager.getRoleGuardianuint64 roleId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleGrantDelay",
                    "parameters": "uint64 roleId",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function getRoleGrantDelay(uint64 roleId) public view virtual returns (uint32) {\n        return _roles[roleId].grantDelay.get();\n    }",
                    "start": "193",
                    "end": "195",
                    "class": "AccessManager",
                    "signature": "returns (uint32) getRoleGrantDelayuint64 roleId",
                    "full_signature": "function getRoleGrantDelay(uint64 roleId) public virtual view returns (uint32)",
                    "class_method_signature": "AccessManager.getRoleGrantDelayuint64 roleId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getAccess",
                    "parameters": "uint64 roleId, address account",
                    "modifiers": "view",
                    "return": "returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect)",
                    "body": "function getAccess(\n        uint64 roleId,\n        address account\n    ) public view virtual returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect) {\n        Access storage access = _roles[roleId].members[account];\n\n        since = access.since;\n        (currentDelay, pendingDelay, effect) = access.delay.getFull();\n\n        return (since, currentDelay, pendingDelay, effect);\n    }",
                    "start": "198",
                    "end": "208",
                    "class": "AccessManager",
                    "signature": "returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect) getAccessuint64 roleId, address account",
                    "full_signature": "function getAccess(uint64 roleId, address account) public virtual view returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect)",
                    "class_method_signature": "AccessManager.getAccessuint64 roleId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "hasRole",
                    "parameters": "uint64 roleId, address account",
                    "modifiers": "view",
                    "return": "returns (bool isMember, uint32 executionDelay)",
                    "body": "function hasRole(\n        uint64 roleId,\n        address account\n    ) public view virtual returns (bool isMember, uint32 executionDelay) {\n        if (roleId == PUBLIC_ROLE) {\n            return (true, 0);\n        } else {\n            (uint48 hasRoleSince, uint32 currentDelay, , ) = getAccess(roleId, account);\n            return (hasRoleSince != 0 && hasRoleSince <= Time.timestamp(), currentDelay);\n        }\n    }",
                    "start": "211",
                    "end": "221",
                    "class": "AccessManager",
                    "signature": "returns (bool isMember, uint32 executionDelay) hasRoleuint64 roleId, address account",
                    "full_signature": "function hasRole(uint64 roleId, address account) public virtual view returns (bool isMember, uint32 executionDelay)",
                    "class_method_signature": "AccessManager.hasRoleuint64 roleId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "labelRole",
                    "parameters": "uint64 roleId, string calldata label",
                    "modifiers": "",
                    "return": "",
                    "body": "function labelRole(uint64 roleId, string calldata label) public virtual onlyAuthorized {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n        emit RoleLabel(roleId, label);\n    }",
                    "start": "225",
                    "end": "230",
                    "class": "AccessManager",
                    "signature": " labelRoleuint64 roleId, string calldata label",
                    "full_signature": "function labelRole(uint64 roleId, string calldata label) public virtual  ",
                    "class_method_signature": "AccessManager.labelRoleuint64 roleId, string calldata label",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// =============================================== ROLE MANAGEMENT ===============================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "grantRole",
                    "parameters": "uint64 roleId, address account, uint32 executionDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function grantRole(uint64 roleId, address account, uint32 executionDelay) public virtual onlyAuthorized {\n        _grantRole(roleId, account, getRoleGrantDelay(roleId), executionDelay);\n    }",
                    "start": "233",
                    "end": "235",
                    "class": "AccessManager",
                    "signature": " grantRoleuint64 roleId, address account, uint32 executionDelay",
                    "full_signature": "function grantRole(uint64 roleId, address account, uint32 executionDelay) public virtual  ",
                    "class_method_signature": "AccessManager.grantRoleuint64 roleId, address account, uint32 executionDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "revokeRole",
                    "parameters": "uint64 roleId, address account",
                    "modifiers": "",
                    "return": "",
                    "body": "function revokeRole(uint64 roleId, address account) public virtual onlyAuthorized {\n        _revokeRole(roleId, account);\n    }",
                    "start": "238",
                    "end": "240",
                    "class": "AccessManager",
                    "signature": " revokeRoleuint64 roleId, address account",
                    "full_signature": "function revokeRole(uint64 roleId, address account) public virtual  ",
                    "class_method_signature": "AccessManager.revokeRoleuint64 roleId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "renounceRole",
                    "parameters": "uint64 roleId, address callerConfirmation",
                    "modifiers": "",
                    "return": "",
                    "body": "function renounceRole(uint64 roleId, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessManagerBadConfirmation();\n        }\n        _revokeRole(roleId, callerConfirmation);\n    }",
                    "start": "243",
                    "end": "248",
                    "class": "AccessManager",
                    "signature": " renounceRoleuint64 roleId, address callerConfirmation",
                    "full_signature": "function renounceRole(uint64 roleId, address callerConfirmation) public virtual  ",
                    "class_method_signature": "AccessManager.renounceRoleuint64 roleId, address callerConfirmation",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setRoleAdmin",
                    "parameters": "uint64 roleId, uint64 admin",
                    "modifiers": "",
                    "return": "",
                    "body": "function setRoleAdmin(uint64 roleId, uint64 admin) public virtual onlyAuthorized {\n        _setRoleAdmin(roleId, admin);\n    }",
                    "start": "251",
                    "end": "253",
                    "class": "AccessManager",
                    "signature": " setRoleAdminuint64 roleId, uint64 admin",
                    "full_signature": "function setRoleAdmin(uint64 roleId, uint64 admin) public virtual  ",
                    "class_method_signature": "AccessManager.setRoleAdminuint64 roleId, uint64 admin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setRoleGuardian",
                    "parameters": "uint64 roleId, uint64 guardian",
                    "modifiers": "",
                    "return": "",
                    "body": "function setRoleGuardian(uint64 roleId, uint64 guardian) public virtual onlyAuthorized {\n        _setRoleGuardian(roleId, guardian);\n    }",
                    "start": "256",
                    "end": "258",
                    "class": "AccessManager",
                    "signature": " setRoleGuardianuint64 roleId, uint64 guardian",
                    "full_signature": "function setRoleGuardian(uint64 roleId, uint64 guardian) public virtual  ",
                    "class_method_signature": "AccessManager.setRoleGuardianuint64 roleId, uint64 guardian",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "setGrantDelay",
                    "parameters": "uint64 roleId, uint32 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function setGrantDelay(uint64 roleId, uint32 newDelay) public virtual onlyAuthorized {\n        _setGrantDelay(roleId, newDelay);\n    }",
                    "start": "261",
                    "end": "263",
                    "class": "AccessManager",
                    "signature": " setGrantDelayuint64 roleId, uint32 newDelay",
                    "full_signature": "function setGrantDelay(uint64 roleId, uint32 newDelay) public virtual  ",
                    "class_method_signature": "AccessManager.setGrantDelayuint64 roleId, uint32 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_grantRole",
                    "parameters": "uint64 roleId, address account, uint32 grantDelay, uint32 executionDelay",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function _grantRole(\n        uint64 roleId,\n        address account,\n        uint32 grantDelay,\n        uint32 executionDelay\n    ) internal virtual returns (bool) {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        bool newMember = _roles[roleId].members[account].since == 0;\n        uint48 since;\n\n        if (newMember) {\n            since = Time.timestamp() + grantDelay;\n            _roles[roleId].members[account] = Access({since: since, delay: executionDelay.toDelay()});\n        } else {\n            // No setback here. Value can be reset by doing revoke + grant, effectively allowing the admin to perform\n            // any change to the execution delay within the duration of the role admin delay.\n            (_roles[roleId].members[account].delay, since) = _roles[roleId].members[account].delay.withUpdate(\n                executionDelay,\n                0\n            );\n        }\n\n        emit RoleGranted(roleId, account, executionDelay, since, newMember);\n        return newMember;\n    }",
                    "start": "270",
                    "end": "297",
                    "class": "AccessManager",
                    "signature": "returns (bool) _grantRoleuint64 roleId, address account, uint32 grantDelay, uint32 executionDelay",
                    "full_signature": "function _grantRole(uint64 roleId, address account, uint32 grantDelay, uint32 executionDelay) internal virtual  returns (bool)",
                    "class_method_signature": "AccessManager._grantRoleuint64 roleId, address account, uint32 grantDelay, uint32 executionDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {grantRole} without access control. Returns true if the role was newly granted.\n     *\n     * Emits a {RoleGranted} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_revokeRole",
                    "parameters": "uint64 roleId, address account",
                    "modifiers": "",
                    "return": "returns (bool)",
                    "body": "function _revokeRole(uint64 roleId, address account) internal virtual returns (bool) {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        if (_roles[roleId].members[account].since == 0) {\n            return false;\n        }\n\n        delete _roles[roleId].members[account];\n\n        emit RoleRevoked(roleId, account);\n        return true;\n    }",
                    "start": "305",
                    "end": "318",
                    "class": "AccessManager",
                    "signature": "returns (bool) _revokeRoleuint64 roleId, address account",
                    "full_signature": "function _revokeRole(uint64 roleId, address account) internal virtual  returns (bool)",
                    "class_method_signature": "AccessManager._revokeRoleuint64 roleId, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {revokeRole} without access control. This logic is also used by {renounceRole}.\n     * Returns true if the role was previously granted.\n     *\n     * Emits a {RoleRevoked} event if the account had the role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setRoleAdmin",
                    "parameters": "uint64 roleId, uint64 admin",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setRoleAdmin(uint64 roleId, uint64 admin) internal virtual {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        _roles[roleId].admin = admin;\n\n        emit RoleAdminChanged(roleId, admin);\n    }",
                    "start": "328",
                    "end": "336",
                    "class": "AccessManager",
                    "signature": " _setRoleAdminuint64 roleId, uint64 admin",
                    "full_signature": "function _setRoleAdmin(uint64 roleId, uint64 admin) internal virtual  ",
                    "class_method_signature": "AccessManager._setRoleAdminuint64 roleId, uint64 admin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {setRoleAdmin} without access control.\n     *\n     * Emits a {RoleAdminChanged} event.\n     *\n     * NOTE: Setting the admin role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n     * anyone to set grant or revoke such role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setRoleGuardian",
                    "parameters": "uint64 roleId, uint64 guardian",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setRoleGuardian(uint64 roleId, uint64 guardian) internal virtual {\n        if (roleId == ADMIN_ROLE || roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        _roles[roleId].guardian = guardian;\n\n        emit RoleGuardianChanged(roleId, guardian);\n    }",
                    "start": "346",
                    "end": "354",
                    "class": "AccessManager",
                    "signature": " _setRoleGuardianuint64 roleId, uint64 guardian",
                    "full_signature": "function _setRoleGuardian(uint64 roleId, uint64 guardian) internal virtual  ",
                    "class_method_signature": "AccessManager._setRoleGuardianuint64 roleId, uint64 guardian",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {setRoleGuardian} without access control.\n     *\n     * Emits a {RoleGuardianChanged} event.\n     *\n     * NOTE: Setting the guardian role as the `PUBLIC_ROLE` is allowed, but it will effectively allow\n     * anyone to cancel any scheduled operation for such role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setGrantDelay",
                    "parameters": "uint64 roleId, uint32 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setGrantDelay(uint64 roleId, uint32 newDelay) internal virtual {\n        if (roleId == PUBLIC_ROLE) {\n            revert AccessManagerLockedRole(roleId);\n        }\n\n        uint48 effect;\n        (_roles[roleId].grantDelay, effect) = _roles[roleId].grantDelay.withUpdate(newDelay, minSetback());\n\n        emit RoleGrantDelayChanged(roleId, newDelay, effect);\n    }",
                    "start": "361",
                    "end": "370",
                    "class": "AccessManager",
                    "signature": " _setGrantDelayuint64 roleId, uint32 newDelay",
                    "full_signature": "function _setGrantDelay(uint64 roleId, uint32 newDelay) internal virtual  ",
                    "class_method_signature": "AccessManager._setGrantDelayuint64 roleId, uint32 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {setGrantDelay} without access control.\n     *\n     * Emits a {RoleGrantDelayChanged} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "setTargetFunctionRole",
                    "parameters": "address target, bytes4[] calldata selectors, uint64 roleId",
                    "modifiers": "",
                    "return": "",
                    "body": "function setTargetFunctionRole(\n        address target,\n        bytes4[] calldata selectors,\n        uint64 roleId\n    ) public virtual onlyAuthorized {\n        for (uint256 i = 0; i < selectors.length; ++i) {\n            _setTargetFunctionRole(target, selectors[i], roleId);\n        }\n    }",
                    "start": "374",
                    "end": "382",
                    "class": "AccessManager",
                    "signature": " setTargetFunctionRoleaddress target, bytes4[] calldata selectors, uint64 roleId",
                    "full_signature": "function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) public virtual  ",
                    "class_method_signature": "AccessManager.setTargetFunctionRoleaddress target, bytes4[] calldata selectors, uint64 roleId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// ============================================= FUNCTION MANAGEMENT ==============================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setTargetFunctionRole",
                    "parameters": "address target, bytes4 selector, uint64 roleId",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setTargetFunctionRole(address target, bytes4 selector, uint64 roleId) internal virtual {\n        _targets[target].allowedRoles[selector] = roleId;\n        emit TargetFunctionRoleUpdated(target, selector, roleId);\n    }",
                    "start": "389",
                    "end": "392",
                    "class": "AccessManager",
                    "signature": " _setTargetFunctionRoleaddress target, bytes4 selector, uint64 roleId",
                    "full_signature": "function _setTargetFunctionRole(address target, bytes4 selector, uint64 roleId) internal virtual  ",
                    "class_method_signature": "AccessManager._setTargetFunctionRoleaddress target, bytes4 selector, uint64 roleId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {setTargetFunctionRole} without access control.\n     *\n     * Emits a {TargetFunctionRoleUpdated} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "setTargetAdminDelay",
                    "parameters": "address target, uint32 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function setTargetAdminDelay(address target, uint32 newDelay) public virtual onlyAuthorized {\n        _setTargetAdminDelay(target, newDelay);\n    }",
                    "start": "395",
                    "end": "397",
                    "class": "AccessManager",
                    "signature": " setTargetAdminDelayaddress target, uint32 newDelay",
                    "full_signature": "function setTargetAdminDelay(address target, uint32 newDelay) public virtual  ",
                    "class_method_signature": "AccessManager.setTargetAdminDelayaddress target, uint32 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setTargetAdminDelay",
                    "parameters": "address target, uint32 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setTargetAdminDelay(address target, uint32 newDelay) internal virtual {\n        uint48 effect;\n        (_targets[target].adminDelay, effect) = _targets[target].adminDelay.withUpdate(newDelay, minSetback());\n\n        emit TargetAdminDelayUpdated(target, newDelay, effect);\n    }",
                    "start": "404",
                    "end": "409",
                    "class": "AccessManager",
                    "signature": " _setTargetAdminDelayaddress target, uint32 newDelay",
                    "full_signature": "function _setTargetAdminDelay(address target, uint32 newDelay) internal virtual  ",
                    "class_method_signature": "AccessManager._setTargetAdminDelayaddress target, uint32 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal version of {setTargetAdminDelay} without access control.\n     *\n     * Emits a {TargetAdminDelayUpdated} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "setTargetClosed",
                    "parameters": "address target, bool closed",
                    "modifiers": "",
                    "return": "",
                    "body": "function setTargetClosed(address target, bool closed) public virtual onlyAuthorized {\n        _setTargetClosed(target, closed);\n    }",
                    "start": "413",
                    "end": "415",
                    "class": "AccessManager",
                    "signature": " setTargetClosedaddress target, bool closed",
                    "full_signature": "function setTargetClosed(address target, bool closed) public virtual  ",
                    "class_method_signature": "AccessManager.setTargetClosedaddress target, bool closed",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// =============================================== MODE MANAGEMENT ================================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_setTargetClosed",
                    "parameters": "address target, bool closed",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setTargetClosed(address target, bool closed) internal virtual {\n        _targets[target].closed = closed;\n        emit TargetClosed(target, closed);\n    }",
                    "start": "422",
                    "end": "425",
                    "class": "AccessManager",
                    "signature": " _setTargetClosedaddress target, bool closed",
                    "full_signature": "function _setTargetClosed(address target, bool closed) internal virtual  ",
                    "class_method_signature": "AccessManager._setTargetClosedaddress target, bool closed",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Set the closed flag for a contract. This is an internal setter with no access restrictions.\n     *\n     * Emits a {TargetClosed} event.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "getSchedule",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function getSchedule(bytes32 id) public view virtual returns (uint48) {\n        uint48 timepoint = _schedules[id].timepoint;\n        return _isExpired(timepoint) ? 0 : timepoint;\n    }",
                    "start": "429",
                    "end": "432",
                    "class": "AccessManager",
                    "signature": "returns (uint48) getSchedulebytes32 id",
                    "full_signature": "function getSchedule(bytes32 id) public virtual view returns (uint48)",
                    "class_method_signature": "AccessManager.getSchedulebytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// ============================================== DELAYED OPERATIONS ==============================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getNonce",
                    "parameters": "bytes32 id",
                    "modifiers": "view",
                    "return": "returns (uint32)",
                    "body": "function getNonce(bytes32 id) public view virtual returns (uint32) {\n        return _schedules[id].nonce;\n    }",
                    "start": "435",
                    "end": "437",
                    "class": "AccessManager",
                    "signature": "returns (uint32) getNoncebytes32 id",
                    "full_signature": "function getNonce(bytes32 id) public virtual view returns (uint32)",
                    "class_method_signature": "AccessManager.getNoncebytes32 id",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "schedule",
                    "parameters": "address target, bytes calldata data, uint48 when",
                    "modifiers": "",
                    "return": "returns (bytes32 operationId, uint32 nonce)",
                    "body": "function schedule(\n        address target,\n        bytes calldata data,\n        uint48 when\n    ) public virtual returns (bytes32 operationId, uint32 nonce) {\n        address caller = _msgSender();\n\n        // Fetch restrictions that apply to the caller on the targeted function\n        (, uint32 setback) = _canCallExtended(caller, target, data);\n\n        uint48 minWhen = Time.timestamp() + setback;\n\n        // If call with delay is not authorized, or if requested timing is too soon, revert\n        if (setback == 0 || (when > 0 && when < minWhen)) {\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\n        }\n\n        // Reuse variable due to stack too deep\n        when = uint48(Math.max(when, minWhen)); // cast is safe: both inputs are uint48\n\n        // If caller is authorised, schedule operation\n        operationId = hashOperation(caller, target, data);\n\n        _checkNotScheduled(operationId);\n\n        unchecked {\n            // It's not feasible to overflow the nonce in less than 1000 years\n            nonce = _schedules[operationId].nonce + 1;\n        }\n        _schedules[operationId].timepoint = when;\n        _schedules[operationId].nonce = nonce;\n        emit OperationScheduled(operationId, nonce, when, caller, target, data);\n\n        // Using named return values because otherwise we get stack too deep\n    }",
                    "start": "440",
                    "end": "474",
                    "class": "AccessManager",
                    "signature": "returns (bytes32 operationId, uint32 nonce) scheduleaddress target, bytes calldata data, uint48 when",
                    "full_signature": "function schedule(address target, bytes calldata data, uint48 when) public virtual  returns (bytes32 operationId, uint32 nonce)",
                    "class_method_signature": "AccessManager.scheduleaddress target, bytes calldata data, uint48 when",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkNotScheduled",
                    "parameters": "bytes32 operationId",
                    "modifiers": "view",
                    "return": "",
                    "body": "function _checkNotScheduled(bytes32 operationId) private view {\n        uint48 prevTimepoint = _schedules[operationId].timepoint;\n        if (prevTimepoint != 0 && !_isExpired(prevTimepoint)) {\n            revert AccessManagerAlreadyScheduled(operationId);\n        }\n    }",
                    "start": "481",
                    "end": "486",
                    "class": "AccessManager",
                    "signature": " _checkNotScheduledbytes32 operationId",
                    "full_signature": "function _checkNotScheduled(bytes32 operationId) private  view ",
                    "class_method_signature": "AccessManager._checkNotScheduledbytes32 operationId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Reverts if the operation is currently scheduled and has not expired.\n     *\n     * NOTE: This function was introduced due to stack too deep errors in schedule.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "execute",
                    "parameters": "address target, bytes calldata data",
                    "modifiers": "payable",
                    "return": "returns (uint32)",
                    "body": "function execute(address target, bytes calldata data) public payable virtual returns (uint32) {\n        address caller = _msgSender();\n\n        // Fetch restrictions that apply to the caller on the targeted function\n        (bool immediate, uint32 setback) = _canCallExtended(caller, target, data);\n\n        // If call is not authorized, revert\n        if (!immediate && setback == 0) {\n            revert AccessManagerUnauthorizedCall(caller, target, _checkSelector(data));\n        }\n\n        bytes32 operationId = hashOperation(caller, target, data);\n        uint32 nonce;\n\n        // If caller is authorised, check operation was scheduled early enough\n        // Consume an available schedule even if there is no currently enforced delay\n        if (setback != 0 || getSchedule(operationId) != 0) {\n            nonce = _consumeScheduledOp(operationId);\n        }\n\n        // Mark the target and selector as authorised\n        bytes32 executionIdBefore = _executionId;\n        _executionId = _hashExecutionId(target, _checkSelector(data));\n\n        // Perform call\n        Address.functionCallWithValue(target, data, msg.value);\n\n        // Reset execute identifier\n        _executionId = executionIdBefore;\n\n        return nonce;\n    }",
                    "start": "492",
                    "end": "523",
                    "class": "AccessManager",
                    "signature": "returns (uint32) executeaddress target, bytes calldata data",
                    "full_signature": "function execute(address target, bytes calldata data) public virtual payable returns (uint32)",
                    "class_method_signature": "AccessManager.executeaddress target, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n// Reentrancy is not an issue because permissions are checked on msg.sender. Additionally,\n// _consumeScheduledOp guarantees a scheduled operation is only executed once.\n// slither-disable-next-line reentrancy-no-eth\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "cancel",
                    "parameters": "address caller, address target, bytes calldata data",
                    "modifiers": "",
                    "return": "returns (uint32)",
                    "body": "function cancel(address caller, address target, bytes calldata data) public virtual returns (uint32) {\n        address msgsender = _msgSender();\n        bytes4 selector = _checkSelector(data);\n\n        bytes32 operationId = hashOperation(caller, target, data);\n        if (_schedules[operationId].timepoint == 0) {\n            revert AccessManagerNotScheduled(operationId);\n        } else if (caller != msgsender) {\n            // calls can only be canceled by the account that scheduled them, a global admin, or by a guardian of the required role.\n            (bool isAdmin, ) = hasRole(ADMIN_ROLE, msgsender);\n            (bool isGuardian, ) = hasRole(getRoleGuardian(getTargetFunctionRole(target, selector)), msgsender);\n            if (!isAdmin && !isGuardian) {\n                revert AccessManagerUnauthorizedCancel(msgsender, caller, target, selector);\n            }\n        }\n\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\n        uint32 nonce = _schedules[operationId].nonce;\n        emit OperationCanceled(operationId, nonce);\n\n        return nonce;\n    }",
                    "start": "526",
                    "end": "547",
                    "class": "AccessManager",
                    "signature": "returns (uint32) canceladdress caller, address target, bytes calldata data",
                    "full_signature": "function cancel(address caller, address target, bytes calldata data) public virtual  returns (uint32)",
                    "class_method_signature": "AccessManager.canceladdress caller, address target, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "consumeScheduledOp",
                    "parameters": "address caller, bytes calldata data",
                    "modifiers": "",
                    "return": "",
                    "body": "function consumeScheduledOp(address caller, bytes calldata data) public virtual {\n        address target = _msgSender();\n        if (IAccessManaged(target).isConsumingScheduledOp() != IAccessManaged.isConsumingScheduledOp.selector) {\n            revert AccessManagerUnauthorizedConsume(target);\n        }\n        _consumeScheduledOp(hashOperation(caller, target, data));\n    }",
                    "start": "550",
                    "end": "556",
                    "class": "AccessManager",
                    "signature": " consumeScheduledOpaddress caller, bytes calldata data",
                    "full_signature": "function consumeScheduledOp(address caller, bytes calldata data) public virtual  ",
                    "class_method_signature": "AccessManager.consumeScheduledOpaddress caller, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_consumeScheduledOp",
                    "parameters": "bytes32 operationId",
                    "modifiers": "",
                    "return": "returns (uint32)",
                    "body": "function _consumeScheduledOp(bytes32 operationId) internal virtual returns (uint32) {\n        uint48 timepoint = _schedules[operationId].timepoint;\n        uint32 nonce = _schedules[operationId].nonce;\n\n        if (timepoint == 0) {\n            revert AccessManagerNotScheduled(operationId);\n        } else if (timepoint > Time.timestamp()) {\n            revert AccessManagerNotReady(operationId);\n        } else if (_isExpired(timepoint)) {\n            revert AccessManagerExpired(operationId);\n        }\n\n        delete _schedules[operationId].timepoint; // reset the timepoint, keep the nonce\n        emit OperationExecuted(operationId, nonce);\n\n        return nonce;\n    }",
                    "start": "563",
                    "end": "579",
                    "class": "AccessManager",
                    "signature": "returns (uint32) _consumeScheduledOpbytes32 operationId",
                    "full_signature": "function _consumeScheduledOp(bytes32 operationId) internal virtual  returns (uint32)",
                    "class_method_signature": "AccessManager._consumeScheduledOpbytes32 operationId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Internal variant of {consumeScheduledOp} that operates on bytes32 operationId.\n     *\n     * Returns the nonce of the scheduled operation that is consumed.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "hashOperation",
                    "parameters": "address caller, address target, bytes calldata data",
                    "modifiers": "view",
                    "return": "returns (bytes32)",
                    "body": "function hashOperation(address caller, address target, bytes calldata data) public view virtual returns (bytes32) {\n        return keccak256(abi.encode(caller, target, data));\n    }",
                    "start": "582",
                    "end": "584",
                    "class": "AccessManager",
                    "signature": "returns (bytes32) hashOperationaddress caller, address target, bytes calldata data",
                    "full_signature": "function hashOperation(address caller, address target, bytes calldata data) public virtual view returns (bytes32)",
                    "class_method_signature": "AccessManager.hashOperationaddress caller, address target, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "updateAuthority",
                    "parameters": "address target, address newAuthority",
                    "modifiers": "",
                    "return": "",
                    "body": "function updateAuthority(address target, address newAuthority) public virtual onlyAuthorized {\n        IAccessManaged(target).setAuthority(newAuthority);\n    }",
                    "start": "588",
                    "end": "590",
                    "class": "AccessManager",
                    "signature": " updateAuthorityaddress target, address newAuthority",
                    "full_signature": "function updateAuthority(address target, address newAuthority) public virtual  ",
                    "class_method_signature": "AccessManager.updateAuthorityaddress target, address newAuthority",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// ==================================================== OTHERS ====================================================\n/// @inheritdoc IAccessManager\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_checkAuthorized",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _checkAuthorized() private {\n        address caller = _msgSender();\n        (bool immediate, uint32 delay) = _canCallSelf(caller, _msgData());\n        if (!immediate) {\n            if (delay == 0) {\n                (, uint64 requiredRole, ) = _getAdminRestrictions(_msgData());\n                revert AccessManagerUnauthorizedAccount(caller, requiredRole);\n            } else {\n                _consumeScheduledOp(hashOperation(caller, address(this), _msgData()));\n            }\n        }\n    }",
                    "start": "598",
                    "end": "609",
                    "class": "AccessManager",
                    "signature": " _checkAuthorized",
                    "full_signature": "function _checkAuthorized() private   ",
                    "class_method_signature": "AccessManager._checkAuthorized",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// ================================================= ADMIN LOGIC ==================================================\n/**\n     * @dev Check if the current call is authorized according to admin and roles logic.\n     *\n     * WARNING: Carefully review the considerations of {AccessManaged-restricted} since they apply to this modifier.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_getAdminRestrictions",
                    "parameters": "bytes calldata data",
                    "modifiers": "view",
                    "return": "returns (bool adminRestricted, uint64 roleAdminId, uint32 executionDelay)",
                    "body": "function _getAdminRestrictions(\n        bytes calldata data\n    ) private view returns (bool adminRestricted, uint64 roleAdminId, uint32 executionDelay) {\n        if (data.length < 4) {\n            return (false, 0, 0);\n        }\n\n        bytes4 selector = _checkSelector(data);\n\n        // Restricted to ADMIN with no delay beside any execution delay the caller may have\n        if (\n            selector == this.labelRole.selector ||\n            selector == this.setRoleAdmin.selector ||\n            selector == this.setRoleGuardian.selector ||\n            selector == this.setGrantDelay.selector ||\n            selector == this.setTargetAdminDelay.selector\n        ) {\n            return (true, ADMIN_ROLE, 0);\n        }\n\n        // Restricted to ADMIN with the admin delay corresponding to the target\n        if (\n            selector == this.updateAuthority.selector ||\n            selector == this.setTargetClosed.selector ||\n            selector == this.setTargetFunctionRole.selector\n        ) {\n            // First argument is a target.\n            address target = abi.decode(data[0x04:0x24], (address));\n            uint32 delay = getTargetAdminDelay(target);\n            return (true, ADMIN_ROLE, delay);\n        }\n\n        // Restricted to that role's admin with no delay beside any execution delay the caller may have.\n        if (selector == this.grantRole.selector || selector == this.revokeRole.selector) {\n            // First argument is a roleId.\n            uint64 roleId = abi.decode(data[0x04:0x24], (uint64));\n            return (true, getRoleAdmin(roleId), 0);\n        }\n\n        return (false, getTargetFunctionRole(address(this), selector), 0);\n    }",
                    "start": "619",
                    "end": "659",
                    "class": "AccessManager",
                    "signature": "returns (bool adminRestricted, uint64 roleAdminId, uint32 executionDelay) _getAdminRestrictionsbytes calldata data",
                    "full_signature": "function _getAdminRestrictions(bytes calldata data) private  view returns (bool adminRestricted, uint64 roleAdminId, uint32 executionDelay)",
                    "class_method_signature": "AccessManager._getAdminRestrictionsbytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Get the admin restrictions of a given function call based on the function and arguments involved.\n     *\n     * Returns:\n     * - bool restricted: does this data match a restricted operation\n     * - uint64: which role is this operation restricted to\n     * - uint32: minimum delay to enforce for that operation (max between operation's delay and admin's execution delay)\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_canCallExtended",
                    "parameters": "address caller, address target, bytes calldata data",
                    "modifiers": "view",
                    "return": "returns (bool immediate, uint32 delay)",
                    "body": "function _canCallExtended(\n        address caller,\n        address target,\n        bytes calldata data\n    ) private view returns (bool immediate, uint32 delay) {\n        if (target == address(this)) {\n            return _canCallSelf(caller, data);\n        } else {\n            return data.length < 4 ? (false, 0) : canCall(caller, target, _checkSelector(data));\n        }\n    }",
                    "start": "670",
                    "end": "680",
                    "class": "AccessManager",
                    "signature": "returns (bool immediate, uint32 delay) _canCallExtendedaddress caller, address target, bytes calldata data",
                    "full_signature": "function _canCallExtended(address caller, address target, bytes calldata data) private  view returns (bool immediate, uint32 delay)",
                    "class_method_signature": "AccessManager._canCallExtendedaddress caller, address target, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// =================================================== HELPERS ====================================================\n/**\n     * @dev An extended version of {canCall} for internal usage that checks {_canCallSelf}\n     * when the target is this contract.\n     *\n     * Returns:\n     * - bool immediate: whether the operation can be executed immediately (with no delay)\n     * - uint32 delay: the execution delay\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_canCallSelf",
                    "parameters": "address caller, bytes calldata data",
                    "modifiers": "view",
                    "return": "returns (bool immediate, uint32 delay)",
                    "body": "function _canCallSelf(address caller, bytes calldata data) private view returns (bool immediate, uint32 delay) {\n        if (data.length < 4) {\n            return (false, 0);\n        }\n\n        if (caller == address(this)) {\n            // Caller is AccessManager, this means the call was sent through {execute} and it already checked\n            // permissions. We verify that the call \"identifier\", which is set during {execute}, is correct.\n            return (_isExecuting(address(this), _checkSelector(data)), 0);\n        }\n\n        (bool adminRestricted, uint64 roleId, uint32 operationDelay) = _getAdminRestrictions(data);\n\n        // isTargetClosed apply to non-admin-restricted function\n        if (!adminRestricted && isTargetClosed(address(this))) {\n            return (false, 0);\n        }\n\n        (bool inRole, uint32 executionDelay) = hasRole(roleId, caller);\n        if (!inRole) {\n            return (false, 0);\n        }\n\n        // downcast is safe because both options are uint32\n        delay = uint32(Math.max(operationDelay, executionDelay));\n        return (delay == 0, delay);\n    }",
                    "start": "685",
                    "end": "711",
                    "class": "AccessManager",
                    "signature": "returns (bool immediate, uint32 delay) _canCallSelfaddress caller, bytes calldata data",
                    "full_signature": "function _canCallSelf(address caller, bytes calldata data) private  view returns (bool immediate, uint32 delay)",
                    "class_method_signature": "AccessManager._canCallSelfaddress caller, bytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev A version of {canCall} that checks for restrictions in this contract.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_isExecuting",
                    "parameters": "address target, bytes4 selector",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isExecuting(address target, bytes4 selector) private view returns (bool) {\n        return _executionId == _hashExecutionId(target, selector);\n    }",
                    "start": "716",
                    "end": "718",
                    "class": "AccessManager",
                    "signature": "returns (bool) _isExecutingaddress target, bytes4 selector",
                    "full_signature": "function _isExecuting(address target, bytes4 selector) private  view returns (bool)",
                    "class_method_signature": "AccessManager._isExecutingaddress target, bytes4 selector",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns true if a call with `target` and `selector` is being executed via {executed}.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_isExpired",
                    "parameters": "uint48 timepoint",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _isExpired(uint48 timepoint) private view returns (bool) {\n        return timepoint + expiration() <= Time.timestamp();\n    }",
                    "start": "723",
                    "end": "725",
                    "class": "AccessManager",
                    "signature": "returns (bool) _isExpireduint48 timepoint",
                    "full_signature": "function _isExpired(uint48 timepoint) private  view returns (bool)",
                    "class_method_signature": "AccessManager._isExpireduint48 timepoint",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns true if a schedule timepoint is past its expiration deadline.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_checkSelector",
                    "parameters": "bytes calldata data",
                    "modifiers": "pure",
                    "return": "returns (bytes4)",
                    "body": "function _checkSelector(bytes calldata data) private pure returns (bytes4) {\n        return bytes4(data[0:4]);\n    }",
                    "start": "730",
                    "end": "732",
                    "class": "AccessManager",
                    "signature": "returns (bytes4) _checkSelectorbytes calldata data",
                    "full_signature": "function _checkSelector(bytes calldata data) private  pure returns (bytes4)",
                    "class_method_signature": "AccessManager._checkSelectorbytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Extracts the selector from calldata. Panics if data is not at least 4 bytes\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_hashExecutionId",
                    "parameters": "address target, bytes4 selector",
                    "modifiers": "pure",
                    "return": "returns (bytes32)",
                    "body": "function _hashExecutionId(address target, bytes4 selector) private pure returns (bytes32) {\n        return keccak256(abi.encode(target, selector));\n    }",
                    "start": "737",
                    "end": "739",
                    "class": "AccessManager",
                    "signature": "returns (bytes32) _hashExecutionIdaddress target, bytes4 selector",
                    "full_signature": "function _hashExecutionId(address target, bytes4 selector) private  pure returns (bytes32)",
                    "class_method_signature": "AccessManager._hashExecutionIdaddress target, bytes4 selector",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Hashing function for execute protection\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/access/extensions/AccessControlEnumerable.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "21",
                    "end": "23",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override returns (bool)",
                    "class_method_signature": "AccessControlEnumerable.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleMember",
                    "parameters": "bytes32 role, uint256 index",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\n        return _roleMembers[role].at(index);\n    }",
                    "start": "37",
                    "end": "39",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (address) getRoleMemberbytes32 role, uint256 index",
                    "full_signature": "function getRoleMember(bytes32 role, uint256 index) public virtual view returns (address)",
                    "class_method_signature": "AccessControlEnumerable.getRoleMemberbytes32 role, uint256 index",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleMemberCount",
                    "parameters": "bytes32 role",
                    "modifiers": "view",
                    "return": "returns (uint256)",
                    "body": "function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\n        return _roleMembers[role].length();\n    }",
                    "start": "45",
                    "end": "47",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (uint256) getRoleMemberCountbytes32 role",
                    "full_signature": "function getRoleMemberCount(bytes32 role) public virtual view returns (uint256)",
                    "class_method_signature": "AccessControlEnumerable.getRoleMemberCountbytes32 role",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getRoleMembers",
                    "parameters": "bytes32 role",
                    "modifiers": "view",
                    "return": "returns (address[] memory)",
                    "body": "function getRoleMembers(bytes32 role) public view virtual returns (address[] memory) {\n        return _roleMembers[role].values();\n    }",
                    "start": "57",
                    "end": "59",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (address[] memory) getRoleMembersbytes32 role",
                    "full_signature": "function getRoleMembers(bytes32 role) public virtual view returns (address[] memory)",
                    "class_method_signature": "AccessControlEnumerable.getRoleMembersbytes32 role",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Return all accounts that have `role`\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_grantRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\n        bool granted = super._grantRole(role, account);\n        if (granted) {\n            _roleMembers[role].add(account);\n        }\n        return granted;\n    }",
                    "start": "64",
                    "end": "70",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (bool) _grantRolebytes32 role, address account",
                    "full_signature": "function _grantRole(bytes32 role, address account) internal virtual override returns (bool)",
                    "class_method_signature": "AccessControlEnumerable._grantRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_revokeRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\n        bool revoked = super._revokeRole(role, account);\n        if (revoked) {\n            _roleMembers[role].remove(account);\n        }\n        return revoked;\n    }",
                    "start": "75",
                    "end": "81",
                    "class": "AccessControlEnumerable",
                    "signature": "returns (bool) _revokeRolebytes32 role, address account",
                    "full_signature": "function _revokeRole(bytes32 role, address account) internal virtual override returns (bool)",
                    "class_method_signature": "AccessControlEnumerable._revokeRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/contracts/access/extensions/IAccessControlEnumerable.sol": [],
    "/root/openzeppelin-contracts/contracts/access/extensions/IAccessControlDefaultAdminRules.sol": [],
    "/root/openzeppelin-contracts/contracts/access/extensions/AccessControlDefaultAdminRules.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "supportsInterface",
                    "parameters": "bytes4 interfaceId",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlDefaultAdminRules).interfaceId || super.supportsInterface(interfaceId);\n    }",
                    "start": "65",
                    "end": "67",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (bool) supportsInterfacebytes4 interfaceId",
                    "full_signature": "function supportsInterface(bytes4 interfaceId) public virtual override returns (bool)",
                    "class_method_signature": "AccessControlDefaultAdminRules.supportsInterfacebytes4 interfaceId",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// pending admin pair read/written together frequently\n// 0 == unset\n// pending delay pair read/written together frequently\n// 0 == unset\n/**\n     * @dev Sets the initial values for {defaultAdminDelay} and {defaultAdmin} address.\n     */\n/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "owner",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function owner() public view virtual returns (address) {\n        return defaultAdmin();\n    }",
                    "start": "72",
                    "end": "74",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (address) owner",
                    "full_signature": "function owner() public virtual view returns (address)",
                    "class_method_signature": "AccessControlDefaultAdminRules.owner",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {IERC5313-owner}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "grantRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override(AccessControl, IAccessControl)",
                    "return": "",
                    "body": "function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super.grantRole(role, account);\n    }",
                    "start": "83",
                    "end": "88",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " grantRolebytes32 role, address account",
                    "full_signature": "function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) ",
                    "class_method_signature": "AccessControlDefaultAdminRules.grantRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// Override AccessControl role management\n///\n/**\n     * @dev See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "revokeRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override(AccessControl, IAccessControl)",
                    "return": "",
                    "body": "function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super.revokeRole(role, account);\n    }",
                    "start": "93",
                    "end": "98",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " revokeRolebytes32 role, address account",
                    "full_signature": "function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) ",
                    "class_method_signature": "AccessControlDefaultAdminRules.revokeRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "renounceRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override(AccessControl, IAccessControl)",
                    "return": "",
                    "body": "function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\n            (address newDefaultAdmin, uint48 schedule) = pendingDefaultAdmin();\n            if (newDefaultAdmin != address(0) || !_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\n                revert AccessControlEnforcedDefaultAdminDelay(schedule);\n            }\n            delete _pendingDefaultAdminSchedule;\n        }\n        super.renounceRole(role, account);\n    }",
                    "start": "113",
                    "end": "122",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " renounceRolebytes32 role, address account",
                    "full_signature": "function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) ",
                    "class_method_signature": "AccessControlDefaultAdminRules.renounceRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {AccessControl-renounceRole}.\n     *\n     * For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling\n     * {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule\n     * has also passed when calling this function.\n     *\n     * After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions.\n     *\n     * NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin},\n     * thereby disabling any functionality that is only available for it, and the possibility of reassigning a\n     * non-administrated role.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_grantRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            if (defaultAdmin() != address(0)) {\n                revert AccessControlEnforcedDefaultAdminRules();\n            }\n            _currentDefaultAdmin = account;\n        }\n        return super._grantRole(role, account);\n    }",
                    "start": "133",
                    "end": "141",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (bool) _grantRolebytes32 role, address account",
                    "full_signature": "function _grantRole(bytes32 role, address account) internal virtual override returns (bool)",
                    "class_method_signature": "AccessControlDefaultAdminRules._grantRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {AccessControl-_grantRole}.\n     *\n     * For `DEFAULT_ADMIN_ROLE`, it only allows granting if there isn't already a {defaultAdmin} or if the\n     * role has been previously renounced.\n     *\n     * NOTE: Exposing this function through another mechanism may make the `DEFAULT_ADMIN_ROLE`\n     * assignable again. Make sure to guarantee this is the expected behavior in your implementation.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_revokeRole",
                    "parameters": "bytes32 role, address account",
                    "modifiers": "override",
                    "return": "returns (bool)",
                    "body": "function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\n            delete _currentDefaultAdmin;\n        }\n        return super._revokeRole(role, account);\n    }",
                    "start": "146",
                    "end": "151",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (bool) _revokeRolebytes32 role, address account",
                    "full_signature": "function _revokeRole(bytes32 role, address account) internal virtual override returns (bool)",
                    "class_method_signature": "AccessControlDefaultAdminRules._revokeRolebytes32 role, address account",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {AccessControl-_revokeRole}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setRoleAdmin",
                    "parameters": "bytes32 role, bytes32 adminRole",
                    "modifiers": "override",
                    "return": "",
                    "body": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual override {\n        if (role == DEFAULT_ADMIN_ROLE) {\n            revert AccessControlEnforcedDefaultAdminRules();\n        }\n        super._setRoleAdmin(role, adminRole);\n    }",
                    "start": "156",
                    "end": "161",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _setRoleAdminbytes32 role, bytes32 adminRole",
                    "full_signature": "function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual override ",
                    "class_method_signature": "AccessControlDefaultAdminRules._setRoleAdminbytes32 role, bytes32 adminRole",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {AccessControl-_setRoleAdmin}. Reverts for `DEFAULT_ADMIN_ROLE`.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "defaultAdmin",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function defaultAdmin() public view virtual returns (address) {\n        return _currentDefaultAdmin;\n    }",
                    "start": "170",
                    "end": "172",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (address) defaultAdmin",
                    "full_signature": "function defaultAdmin() public virtual view returns (address)",
                    "class_method_signature": "AccessControlDefaultAdminRules.defaultAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// AccessControlDefaultAdminRules accessors\n///\n/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "pendingDefaultAdmin",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address newAdmin, uint48 schedule)",
                    "body": "function pendingDefaultAdmin() public view virtual returns (address newAdmin, uint48 schedule) {\n        return (_pendingDefaultAdmin, _pendingDefaultAdminSchedule);\n    }",
                    "start": "177",
                    "end": "179",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (address newAdmin, uint48 schedule) pendingDefaultAdmin",
                    "full_signature": "function pendingDefaultAdmin() public virtual view returns (address newAdmin, uint48 schedule)",
                    "class_method_signature": "AccessControlDefaultAdminRules.pendingDefaultAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "defaultAdminDelay",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function defaultAdminDelay() public view virtual returns (uint48) {\n        uint48 schedule = _pendingDelaySchedule;\n        return (_isScheduleSet(schedule) && _hasSchedulePassed(schedule)) ? _pendingDelay : _currentDelay;\n    }",
                    "start": "184",
                    "end": "187",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (uint48) defaultAdminDelay",
                    "full_signature": "function defaultAdminDelay() public virtual view returns (uint48)",
                    "class_method_signature": "AccessControlDefaultAdminRules.defaultAdminDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "pendingDefaultAdminDelay",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint48 newDelay, uint48 schedule)",
                    "body": "function pendingDefaultAdminDelay() public view virtual returns (uint48 newDelay, uint48 schedule) {\n        schedule = _pendingDelaySchedule;\n        return (_isScheduleSet(schedule) && !_hasSchedulePassed(schedule)) ? (_pendingDelay, schedule) : (0, 0);\n    }",
                    "start": "192",
                    "end": "195",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (uint48 newDelay, uint48 schedule) pendingDefaultAdminDelay",
                    "full_signature": "function pendingDefaultAdminDelay() public virtual view returns (uint48 newDelay, uint48 schedule)",
                    "class_method_signature": "AccessControlDefaultAdminRules.pendingDefaultAdminDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "defaultAdminDelayIncreaseWait",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function defaultAdminDelayIncreaseWait() public view virtual returns (uint48) {\n        return 5 days;\n    }",
                    "start": "200",
                    "end": "202",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (uint48) defaultAdminDelayIncreaseWait",
                    "full_signature": "function defaultAdminDelayIncreaseWait() public virtual view returns (uint48)",
                    "class_method_signature": "AccessControlDefaultAdminRules.defaultAdminDelayIncreaseWait",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "beginDefaultAdminTransfer",
                    "parameters": "address newAdmin",
                    "modifiers": "",
                    "return": "",
                    "body": "function beginDefaultAdminTransfer(address newAdmin) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _beginDefaultAdminTransfer(newAdmin);\n    }",
                    "start": "211",
                    "end": "213",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " beginDefaultAdminTransferaddress newAdmin",
                    "full_signature": "function beginDefaultAdminTransfer(address newAdmin) public virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules.beginDefaultAdminTransferaddress newAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// AccessControlDefaultAdminRules public and internal setters for defaultAdmin/pendingDefaultAdmin\n///\n/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_beginDefaultAdminTransfer",
                    "parameters": "address newAdmin",
                    "modifiers": "",
                    "return": "",
                    "body": "function _beginDefaultAdminTransfer(address newAdmin) internal virtual {\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay();\n        _setPendingDefaultAdmin(newAdmin, newSchedule);\n        emit DefaultAdminTransferScheduled(newAdmin, newSchedule);\n    }",
                    "start": "220",
                    "end": "224",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _beginDefaultAdminTransferaddress newAdmin",
                    "full_signature": "function _beginDefaultAdminTransfer(address newAdmin) internal virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules._beginDefaultAdminTransferaddress newAdmin",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {beginDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "cancelDefaultAdminTransfer",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function cancelDefaultAdminTransfer() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _cancelDefaultAdminTransfer();\n    }",
                    "start": "229",
                    "end": "231",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " cancelDefaultAdminTransfer",
                    "full_signature": "function cancelDefaultAdminTransfer() public virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules.cancelDefaultAdminTransfer",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_cancelDefaultAdminTransfer",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _cancelDefaultAdminTransfer() internal virtual {\n        _setPendingDefaultAdmin(address(0), 0);\n    }",
                    "start": "238",
                    "end": "240",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _cancelDefaultAdminTransfer",
                    "full_signature": "function _cancelDefaultAdminTransfer() internal virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules._cancelDefaultAdminTransfer",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {cancelDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "acceptDefaultAdminTransfer",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function acceptDefaultAdminTransfer() public virtual {\n        (address newDefaultAdmin, ) = pendingDefaultAdmin();\n        if (_msgSender() != newDefaultAdmin) {\n            // Enforce newDefaultAdmin explicit acceptance.\n            revert AccessControlInvalidDefaultAdmin(_msgSender());\n        }\n        _acceptDefaultAdminTransfer();\n    }",
                    "start": "245",
                    "end": "252",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " acceptDefaultAdminTransfer",
                    "full_signature": "function acceptDefaultAdminTransfer() public virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules.acceptDefaultAdminTransfer",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_acceptDefaultAdminTransfer",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _acceptDefaultAdminTransfer() internal virtual {\n        (address newAdmin, uint48 schedule) = pendingDefaultAdmin();\n        if (!_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\n            revert AccessControlEnforcedDefaultAdminDelay(schedule);\n        }\n        _revokeRole(DEFAULT_ADMIN_ROLE, defaultAdmin());\n        _grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        delete _pendingDefaultAdmin;\n        delete _pendingDefaultAdminSchedule;\n    }",
                    "start": "259",
                    "end": "268",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _acceptDefaultAdminTransfer",
                    "full_signature": "function _acceptDefaultAdminTransfer() internal virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules._acceptDefaultAdminTransfer",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {acceptDefaultAdminTransfer}.\n     *\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "changeDefaultAdminDelay",
                    "parameters": "uint48 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function changeDefaultAdminDelay(uint48 newDelay) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _changeDefaultAdminDelay(newDelay);\n    }",
                    "start": "277",
                    "end": "279",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " changeDefaultAdminDelayuint48 newDelay",
                    "full_signature": "function changeDefaultAdminDelay(uint48 newDelay) public virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules.changeDefaultAdminDelayuint48 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// AccessControlDefaultAdminRules public and internal setters for defaultAdminDelay/pendingDefaultAdminDelay\n///\n/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_changeDefaultAdminDelay",
                    "parameters": "uint48 newDelay",
                    "modifiers": "",
                    "return": "",
                    "body": "function _changeDefaultAdminDelay(uint48 newDelay) internal virtual {\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay);\n        _setPendingDelay(newDelay, newSchedule);\n        emit DefaultAdminDelayChangeScheduled(newDelay, newSchedule);\n    }",
                    "start": "286",
                    "end": "290",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _changeDefaultAdminDelayuint48 newDelay",
                    "full_signature": "function _changeDefaultAdminDelay(uint48 newDelay) internal virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules._changeDefaultAdminDelayuint48 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {changeDefaultAdminDelay}.\n     *\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "rollbackDefaultAdminDelay",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function rollbackDefaultAdminDelay() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _rollbackDefaultAdminDelay();\n    }",
                    "start": "295",
                    "end": "297",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " rollbackDefaultAdminDelay",
                    "full_signature": "function rollbackDefaultAdminDelay() public virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules.rollbackDefaultAdminDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @inheritdoc IAccessControlDefaultAdminRules\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_rollbackDefaultAdminDelay",
                    "parameters": "",
                    "modifiers": "",
                    "return": "",
                    "body": "function _rollbackDefaultAdminDelay() internal virtual {\n        _setPendingDelay(0, 0);\n    }",
                    "start": "304",
                    "end": "306",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _rollbackDefaultAdminDelay",
                    "full_signature": "function _rollbackDefaultAdminDelay() internal virtual  ",
                    "class_method_signature": "AccessControlDefaultAdminRules._rollbackDefaultAdminDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev See {rollbackDefaultAdminDelay}.\n     *\n     * Internal function without access restriction.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_delayChangeWait",
                    "parameters": "uint48 newDelay",
                    "modifiers": "view",
                    "return": "returns (uint48)",
                    "body": "function _delayChangeWait(uint48 newDelay) internal view virtual returns (uint48) {\n        uint48 currentDelay = defaultAdminDelay();\n\n        // When increasing the delay, we schedule the delay change to occur after a period of \"new delay\" has passed, up\n        // to a maximum given by defaultAdminDelayIncreaseWait, by default 5 days. For example, if increasing from 1 day\n        // to 3 days, the new delay will come into effect after 3 days. If increasing from 1 day to 10 days, the new\n        // delay will come into effect after 5 days. The 5 day wait period is intended to be able to fix an error like\n        // using milliseconds instead of seconds.\n        //\n        // When decreasing the delay, we wait the difference between \"current delay\" and \"new delay\". This guarantees\n        // that an admin transfer cannot be made faster than \"current delay\" at the time the delay change is scheduled.\n        // For example, if decreasing from 10 days to 3 days, the new delay will come into effect after 7 days.\n        return\n            newDelay > currentDelay\n                ? uint48(Math.min(newDelay, defaultAdminDelayIncreaseWait())) // no need to safecast, both inputs are uint48\n                : currentDelay - newDelay;\n    }",
                    "start": "317",
                    "end": "333",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (uint48) _delayChangeWaituint48 newDelay",
                    "full_signature": "function _delayChangeWait(uint48 newDelay) internal virtual view returns (uint48)",
                    "class_method_signature": "AccessControlDefaultAdminRules._delayChangeWaituint48 newDelay",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Returns the amount of seconds to wait after the `newDelay` will\n     * become the new {defaultAdminDelay}.\n     *\n     * The value returned guarantees that if the delay is reduced, it will go into effect\n     * after a wait that honors the previously set delay.\n     *\n     * See {defaultAdminDelayIncreaseWait}.\n     */\n",
                    "virtual": "virtual",
                    "invocations": [],
                    "visibility": "internal"
                },
                {
                    "identifier": "_setPendingDefaultAdmin",
                    "parameters": "address newAdmin, uint48 newSchedule",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setPendingDefaultAdmin(address newAdmin, uint48 newSchedule) private {\n        (, uint48 oldSchedule) = pendingDefaultAdmin();\n\n        _pendingDefaultAdmin = newAdmin;\n        _pendingDefaultAdminSchedule = newSchedule;\n\n        // An `oldSchedule` from `pendingDefaultAdmin()` is only set if it hasn't been accepted.\n        if (_isScheduleSet(oldSchedule)) {\n            // Emit for implicit cancellations when another default admin was scheduled.\n            emit DefaultAdminTransferCanceled();\n        }\n    }",
                    "start": "344",
                    "end": "355",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _setPendingDefaultAdminaddress newAdmin, uint48 newSchedule",
                    "full_signature": "function _setPendingDefaultAdmin(address newAdmin, uint48 newSchedule) private   ",
                    "class_method_signature": "AccessControlDefaultAdminRules._setPendingDefaultAdminaddress newAdmin, uint48 newSchedule",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// Private setters\n///\n/**\n     * @dev Setter of the tuple for pending admin and its schedule.\n     *\n     * May emit a DefaultAdminTransferCanceled event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_setPendingDelay",
                    "parameters": "uint48 newDelay, uint48 newSchedule",
                    "modifiers": "",
                    "return": "",
                    "body": "function _setPendingDelay(uint48 newDelay, uint48 newSchedule) private {\n        uint48 oldSchedule = _pendingDelaySchedule;\n\n        if (_isScheduleSet(oldSchedule)) {\n            if (_hasSchedulePassed(oldSchedule)) {\n                // Materialize a virtual delay\n                _currentDelay = _pendingDelay;\n            } else {\n                // Emit for implicit cancellations when another delay was scheduled.\n                emit DefaultAdminDelayChangeCanceled();\n            }\n        }\n\n        _pendingDelay = newDelay;\n        _pendingDelaySchedule = newSchedule;\n    }",
                    "start": "362",
                    "end": "377",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": " _setPendingDelayuint48 newDelay, uint48 newSchedule",
                    "full_signature": "function _setPendingDelay(uint48 newDelay, uint48 newSchedule) private   ",
                    "class_method_signature": "AccessControlDefaultAdminRules._setPendingDelayuint48 newDelay, uint48 newSchedule",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Setter of the tuple for pending delay and its schedule.\n     *\n     * May emit a DefaultAdminDelayChangeCanceled event.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_isScheduleSet",
                    "parameters": "uint48 schedule",
                    "modifiers": "pure",
                    "return": "returns (bool)",
                    "body": "function _isScheduleSet(uint48 schedule) private pure returns (bool) {\n        return schedule != 0;\n    }",
                    "start": "386",
                    "end": "388",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (bool) _isScheduleSetuint48 schedule",
                    "full_signature": "function _isScheduleSet(uint48 schedule) private  pure returns (bool)",
                    "class_method_signature": "AccessControlDefaultAdminRules._isScheduleSetuint48 schedule",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "///\n/// Private helpers\n///\n/**\n     * @dev Defines if an `schedule` is considered set. For consistency purposes.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                },
                {
                    "identifier": "_hasSchedulePassed",
                    "parameters": "uint48 schedule",
                    "modifiers": "view",
                    "return": "returns (bool)",
                    "body": "function _hasSchedulePassed(uint48 schedule) private view returns (bool) {\n        return schedule < block.timestamp;\n    }",
                    "start": "393",
                    "end": "395",
                    "class": "AccessControlDefaultAdminRules",
                    "signature": "returns (bool) _hasSchedulePasseduint48 schedule",
                    "full_signature": "function _hasSchedulePassed(uint48 schedule) private  view returns (bool)",
                    "class_method_signature": "AccessControlDefaultAdminRules._hasSchedulePasseduint48 schedule",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "/**\n     * @dev Defines if an `schedule` is considered passed. For consistency purposes.\n     */\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "private"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/AccessManagedHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/ERC721Harness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/ERC20PermitHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/TimelockControllerHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/EnumerableSetHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/ERC3156FlashBorrowerHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/OwnableHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/PausableHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/Ownable2StepHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/AccessControlHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/ERC721ReceiverHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/AccessControlDefaultAdminRulesHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "pendingDefaultAdmin_",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function pendingDefaultAdmin_() external view returns (address) {\n        (address newAdmin, ) = pendingDefaultAdmin();\n        return newAdmin;\n    }",
                    "start": "18",
                    "end": "21",
                    "class": "AccessControlDefaultAdminRulesHarness",
                    "signature": "returns (address) pendingDefaultAdmin_",
                    "full_signature": "function pendingDefaultAdmin_() external  view returns (address)",
                    "class_method_signature": "AccessControlDefaultAdminRulesHarness.pendingDefaultAdmin_",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// FV\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                },
                {
                    "identifier": "defaultAdminDelayIncreaseWait",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint48)",
                    "body": "function defaultAdminDelayIncreaseWait() public view override returns (uint48) {\n        return _delayIncreaseWait;\n    }",
                    "start": "43",
                    "end": "45",
                    "class": "AccessControlDefaultAdminRulesHarness",
                    "signature": "returns (uint48) defaultAdminDelayIncreaseWait",
                    "full_signature": "function defaultAdminDelayIncreaseWait() public  override returns (uint48)",
                    "class_method_signature": "AccessControlDefaultAdminRulesHarness.defaultAdminDelayIncreaseWait",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Overrides\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/AccessManagerHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "minSetback",
                    "parameters": "",
                    "modifiers": "override",
                    "return": "returns (uint32)",
                    "body": "function minSetback() public view override returns (uint32) {\n        return _minSetback;\n    }",
                    "start": "14",
                    "end": "16",
                    "class": "AccessManagerHarness",
                    "signature": "returns (uint32) minSetback",
                    "full_signature": "function minSetback() public  override returns (uint32)",
                    "class_method_signature": "AccessManagerHarness.minSetback",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// override with a storage slot that can basically take any value.\n// FV\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "getSelector",
                    "parameters": "bytes calldata data",
                    "modifiers": "pure",
                    "return": "returns (bytes4)",
                    "body": "function getSelector(bytes calldata data) external pure returns (bytes4) {\n        return bytes4(data);\n    }",
                    "start": "99",
                    "end": "101",
                    "class": "AccessManagerHarness",
                    "signature": "returns (bytes4) getSelectorbytes calldata data",
                    "full_signature": "function getSelector(bytes calldata data) external  pure returns (bytes4)",
                    "class_method_signature": "AccessManagerHarness.getSelectorbytes calldata data",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// Pad with zeros (and don't revert) if data is too short.\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "external"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/InitializableHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/EnumerableMapHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/ERC20FlashMintHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": [
                {
                    "identifier": "flashFeeReceiver",
                    "parameters": "",
                    "modifiers": "view",
                    "return": "returns (address)",
                    "body": "function flashFeeReceiver() public view returns (address) {\n        return someFeeReceiver;\n    }",
                    "start": "24",
                    "end": "26",
                    "class": "ERC20FlashMintHarness",
                    "signature": "returns (address) flashFeeReceiver",
                    "full_signature": "function flashFeeReceiver() public  view returns (address)",
                    "class_method_signature": "ERC20FlashMintHarness.flashFeeReceiver",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// public accessor\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "public"
                },
                {
                    "identifier": "_flashFee",
                    "parameters": "address, uint256",
                    "modifiers": "override",
                    "return": "returns (uint256)",
                    "body": "function _flashFee(address, uint256) internal view override returns (uint256) {\n        return someFee;\n    }",
                    "start": "29",
                    "end": "31",
                    "class": "ERC20FlashMintHarness",
                    "signature": "returns (uint256) _flashFeeaddress, uint256",
                    "full_signature": "function _flashFee(address, uint256) internal  override returns (uint256)",
                    "class_method_signature": "ERC20FlashMintHarness._flashFeeaddress, uint256",
                    "testcase": "",
                    "constructor": "False",
                    "comment": "// internal hook\n",
                    "virtual": "",
                    "invocations": [],
                    "visibility": "internal"
                }
            ]
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/DoubleEndedQueueHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/NoncesHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ],
    "/root/openzeppelin-contracts/certora/harnesses/ERC20WrapperHarness.sol": [
        {
            "identifier": "",
            "superclass": "",
            "interfaces": "",
            "fields": [],
            "argument_list": "",
            "methods": []
        }
    ]
}